function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var React = _interopDefault(require('react'));
var invariant = _interopDefault(require('tiny-invariant'));
var createContext = _interopDefault(require('mini-create-react-context'));
var hoistStatics = _interopDefault(require('hoist-non-react-statics'));

var createNamedContext = function createNamedContext(name) {
  var context = createContext();
  context.displayName = name;
  return context;
};

var context = /* #__PURE__ */createNamedContext('Analytics');

var AnalyticsProvider = function AnalyticsProvider(_ref) {
  var children = _ref.children,
      instance = _ref.instance;
  invariant(instance, "Analytics instance not provided to <AnalyticsProvider />");
  return /*#__PURE__*/React.createElement(context.Provider, {
    value: instance,
    children: children || null
  });
};

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

function withAnalytics(Component) {
  var displayName = "withAnalytics(" + (Component.displayName || Component.name) + ")";

  var C = function C(props) {
    var wrappedComponentRef = props.wrappedComponentRef,
        remainingProps = _objectWithoutPropertiesLoose(props, ["wrappedComponentRef"]);

    return /*#__PURE__*/React.createElement(context.Consumer, null, function (context) {
      invariant(context, "You should not use " + displayName + " outside of a <AnalyticsProvider>");
      return /*#__PURE__*/React.createElement(Component, _extends({}, remainingProps, {
        analytics: context,
        ref: wrappedComponentRef
      }));
    });
  };

  C.displayName = displayName;
  C.WrappedComponent = Component;
  return hoistStatics(C, Component);
}

var useContext = React.useContext;
var useAnalytics = function useAnalytics() {
  return useContext(context);
};
var useTrack = function useTrack() {
  return useContext(context).track;
};
var usePage = function usePage() {
  return useContext(context).page;
};
var useIdentify = function useIdentify() {
  return useContext(context).identify;
};

var AnalyticsConsumer = context.Consumer;

exports.AnalyticsConsumer = AnalyticsConsumer;
exports.AnalyticsContext = context;
exports.AnalyticsProvider = AnalyticsProvider;
exports.useAnalytics = useAnalytics;
exports.useIdentify = useIdentify;
exports.usePage = usePage;
exports.useTrack = useTrack;
exports.withAnalytics = withAnalytics;
//# sourceMappingURL=index.js.map
