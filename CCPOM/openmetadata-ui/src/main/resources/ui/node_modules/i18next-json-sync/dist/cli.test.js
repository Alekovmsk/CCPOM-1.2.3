"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock('./');
var sync;
beforeEach(function () {
    jest.resetModules();
    sync = require('./index').default;
});
test('kitchen sink', function () {
    callWithFlags("--check --files '**/locales/*.json' --excludefiles '**/pattern1' 'other/*/pattern' --primary en --languages es fr pt-BR ja --space \t --lineendings LF --finalnewline --newkeysempty");
    expect(getParams()).toMatchInlineSnapshot("\nObject {\n  \"check\": true,\n  \"createResources\": Array [\n    \"es\",\n    \"fr\",\n    \"pt-BR\",\n    \"ja\",\n  ],\n  \"excludeFiles\": Array [\n    \"'**/pattern1'\",\n    \"'other/*/pattern'\",\n  ],\n  \"files\": \"'**/locales/*.json'\",\n  \"finalNewline\": true,\n  \"lineEndings\": \"LF\",\n  \"newKeysEmpty\": true,\n  \"primary\": \"en\",\n  \"space\": \"\t\",\n}\n");
});
test('kitchen sink shorthand aliases', function () {
    callWithFlags("-c -f '**/locales/*.json' --ef '**/pattern1' 'other/*/pattern' -p en -l es fr pt-BR ja -s \t --le LF --fn -e");
    expect(getParams()).toMatchInlineSnapshot("\nObject {\n  \"check\": true,\n  \"createResources\": Array [\n    \"es\",\n    \"fr\",\n    \"pt-BR\",\n    \"ja\",\n  ],\n  \"excludeFiles\": Array [\n    \"'**/pattern1'\",\n    \"'other/*/pattern'\",\n  ],\n  \"files\": \"'**/locales/*.json'\",\n  \"finalNewline\": true,\n  \"lineEndings\": \"LF\",\n  \"newKeysEmpty\": true,\n  \"primary\": \"en\",\n  \"space\": \"\t\",\n}\n");
});
test('no flags passed', function () {
    callWithFlags('');
    expect(getParams()).toMatchInlineSnapshot("\nObject {\n  \"check\": false,\n  \"createResources\": undefined,\n  \"excludeFiles\": Array [\n    \"**/node_modules/**\",\n  ],\n  \"files\": undefined,\n  \"finalNewline\": false,\n  \"lineEndings\": undefined,\n  \"newKeysEmpty\": false,\n  \"primary\": undefined,\n  \"space\": undefined,\n}\n");
});
test('single language', function () {
    callWithFlags('--languages fr');
    expect(getParams('createResources')).toEqual(['fr']);
});
test('single files exclusion', function () {
    callWithFlags('--excludefiles "my/**/pattern"');
    expect(getParams('excludeFiles')).toEqual(['"my/**/pattern"']);
});
test('glob pattern double quotes', function () {
    callWithFlags('--files "**/locales/*.json"');
    expect(getParams('files')).toEqual('"**/locales/*.json"');
});
function callWithFlags(argv) {
    process.argv = "node ./someScript.js ".concat(argv).split(' ');
    require('./cli');
}
function getParams(key) {
    var params = sync.mock.calls[0][0];
    if (key) {
        return params[key];
    }
    return params;
}
//# sourceMappingURL=cli.test.js.map