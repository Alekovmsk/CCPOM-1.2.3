"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DEFAULT_FORMATS = exports.DEFAULT_FORMAT = exports.REGEX_OPTION = exports.CONFIG_OPTION = exports.OPTIONS = void 0;
var path = __importStar(require("path"));
exports.OPTIONS = {
    'config-file': {
        alias: ['f'],
        default: path.join(process.cwd(), 'license-checker-config.json'),
        required: false,
        type: 'string',
    },
};
exports.CONFIG_OPTION = 'config-file';
exports.REGEX_OPTION = 'regex-replacements';
// tslint:disable: object-literal-sort-keys
exports.DEFAULT_FORMAT = {
    prepend: '/*',
    append: '*/',
};
exports.DEFAULT_FORMATS = {
    'gitignore|npmignore|eslintignore|dockerignore|sh|py': {
        eachLine: {
            prepend: '# ',
        },
    },
    'html|xml|svg': {
        prepend: '<!--',
        append: '-->',
    },
    'js|ts|css|scss|less|php|as|c|java|cpp|go|cto|acl': {
        prepend: '/*',
        append: '*/',
    },
    txt: {},
};
// tslint:enable: object-literal-sort-keys
//# sourceMappingURL=constants.js.map