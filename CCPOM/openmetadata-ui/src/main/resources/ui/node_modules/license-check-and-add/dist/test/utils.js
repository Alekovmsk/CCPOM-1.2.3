"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.directoriesMatch = void 0;
var fs = __importStar(require("fs-extra"));
var path = __importStar(require("path"));
function directoriesMatch(original, goal) {
    return fs.readdirSync(original).every(function (fileOrDir) {
        var fullPath = path.resolve(original, fileOrDir);
        var goalPath = path.resolve(goal, fileOrDir);
        if (fs.lstatSync(fullPath).isDirectory()) {
            return directoriesMatch(fullPath, goalPath);
        }
        else if (fullPath.endsWith('.ignorefile')) {
            return true; // skip the ignore file we had to copy over
        }
        return fs.readFileSync(fullPath).toString() === fs.readFileSync(goalPath).toString();
    });
}
exports.directoriesMatch = directoriesMatch;
//# sourceMappingURL=utils.js.map