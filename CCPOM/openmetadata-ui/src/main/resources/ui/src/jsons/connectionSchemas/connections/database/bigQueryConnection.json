{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "BigQueryConnection",
  "description": "Google BigQuery Connection Config",
  "type": "object",
  "javaType": "org.openmetadata.schema.services.connections.database.BigQueryConnection",
  "definitions": {
    "bigqueryType": {
      "description": "Service type.",
      "type": "string",
      "enum": [
        "BigQuery"
      ],
      "default": "BigQuery"
    },
    "bigqueryScheme": {
      "description": "SQLAlchemy driver scheme options.",
      "type": "string",
      "enum": [
        "bigquery"
      ],
      "default": "bigquery"
    }
  },
  "properties": {
    "type": {
      "title": "Service Type",
      "description": "Service Type",
      "default": "BigQuery",
      "type": "string",
      "enum": [
        "BigQuery"
      ]
    },
    "scheme": {
      "title": "Connection Scheme",
      "description": "SQLAlchemy driver scheme options.",
      "default": "bigquery",
      "type": "string",
      "enum": [
        "bigquery"
      ]
    },
    "hostPort": {
      "title": "Host and Port",
      "description": "BigQuery APIs URL.",
      "type": "string",
      "default": "bigquery.googleapis.com"
    },
    "credentials": {
      "title": "GCP Credentials",
      "description": "GCP Credentials",
      "$schema": "http://json-schema.org/draft-07/schema#",
      "type": "object",
      "javaType": "org.openmetadata.schema.security.credentials.GCPCredentials",
      "definitions": {
        "gcpCredentialsPath": {
          "title": "GCP Credentials Path",
          "description": "Pass the path of file containing the GCP credentials info",
          "type": "string"
        },
        "GCPImpersonateServiceAccountValues": {
          "title": "GCP impersonate service account values",
          "description": "Pass the values to impersonate a service account of Google Cloud",
          "type": "object",
          "properties": {
            "impersonateServiceAccount": {
              "title": "Target Service Account Email",
              "description": "The impersonated service account email",
              "type": "string"
            },
            "lifetime": {
              "title": "Lifetime",
              "description": "Number of seconds the delegated credential should be valid",
              "type": "integer",
              "default": 3600
            }
          }
        }
      },
      "properties": {
        "gcpConfig": {
          "title": "GCP Credentials Configuration",
          "description": "We support two ways of authenticating to GCP i.e via GCP Credentials Values or GCP Credentials Path",
          "oneOf": [
            {
              "$schema": "http://json-schema.org/draft-07/schema#",
              "type": "object",
              "javaType": "org.openmetadata.schema.security.credentials.GCPValues",
              "title": "GCP Credentials Values",
              "description": "Pass the raw credential values provided by GCP",
              "definitions": {
                "singleProjectId": {
                  "title": "Single Project ID",
                  "type": "string"
                },
                "multipleProjectId": {
                  "title": "Multiple Project ID",
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              },
              "properties": {
                "type": {
                  "title": "Credentials Type",
                  "description": "Google Cloud Platform account type.",
                  "type": "string"
                },
                "projectId": {
                  "title": "Project ID",
                  "description": "Project ID",
                  "oneOf": [
                    {
                      "title": "Single Project ID",
                      "type": "string"
                    },
                    {
                      "title": "Multiple Project ID",
                      "type": "array",
                      "items": {
                        "type": "string"
                      }
                    }
                  ]
                },
                "privateKeyId": {
                  "title": "Private Key ID",
                  "description": "Google Cloud private key id.",
                  "type": "string"
                },
                "privateKey": {
                  "title": "Private Key",
                  "description": "Google Cloud private key.",
                  "type": "string",
                  "format": "password"
                },
                "clientEmail": {
                  "title": "Client Email",
                  "description": "Google Cloud email.",
                  "type": "string"
                },
                "clientId": {
                  "title": "Client ID",
                  "description": "Google Cloud Client ID.",
                  "type": "string"
                },
                "authUri": {
                  "title": "Authentication URI",
                  "description": "Google Cloud auth uri.",
                  "type": "string",
                  "format": "uri",
                  "default": "https://accounts.google.com/o/oauth2/auth"
                },
                "tokenUri": {
                  "title": "Token URI",
                  "description": "Google Cloud token uri.",
                  "type": "string",
                  "format": "uri",
                  "default": "https://oauth2.googleapis.com/token"
                },
                "authProviderX509CertUrl": {
                  "title": "Authentication Provider x509 Certificate URL",
                  "description": "Google Cloud auth provider certificate.",
                  "type": "string",
                  "format": "uri",
                  "default": "https://www.googleapis.com/oauth2/v1/certs"
                },
                "clientX509CertUrl": {
                  "title": "Client x509 Certificate URL",
                  "description": "Google Cloud client certificate uri.",
                  "type": "string",
                  "format": "uri"
                }
              },
              "additionalProperties": false
            },
            {
              "title": "GCP Credentials Path",
              "description": "Pass the path of file containing the GCP credentials info",
              "type": "string"
            }
          ]
        },
        "gcpImpersonateServiceAccount": {
          "title": "GCP Impersonate Service Account Configuration",
          "description": "we enable the authenticated service account to impersonate another service account",
          "type": "object",
          "properties": {
            "impersonateServiceAccount": {
              "title": "Target Service Account Email",
              "description": "The impersonated service account email",
              "type": "string"
            },
            "lifetime": {
              "title": "Lifetime",
              "description": "Number of seconds the delegated credential should be valid",
              "type": "integer",
              "default": 3600
            }
          }
        }
      },
      "additionalProperties": false,
      "required": [
        "gcpConfig"
      ]
    },
    "taxonomyProjectID": {
      "title": "Taxonomy Project IDs",
      "description": "Project IDs used to fetch policy tags",
      "type": "array",
      "items": {
        "type": "string"
      },
      "default": null
    },
    "taxonomyLocation": {
      "title": "Taxonomy Location",
      "description": "Taxonomy location used to fetch policy tags",
      "type": "string",
      "default": "us"
    },
    "usageLocation": {
      "title": "Usage Location",
      "description": "Location used to query INFORMATION_SCHEMA.JOBS_BY_PROJECT to fetch usage data. You can pass multi-regions, such as `us` or `eu`, or you specific region. Australia and Asia multi-regions are not yet in GA.",
      "type": "string",
      "default": "us"
    },
    "connectionOptions": {
      "title": "Connection Options",
      "javaType": "org.openmetadata.schema.services.connections.database.ConnectionOptions",
      "description": "Additional connection options to build the URL that can be sent to service during the connection.",
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "connectionArguments": {
      "title": "Connection Arguments",
      "javaType": "org.openmetadata.schema.services.connections.database.ConnectionArguments",
      "description": "Additional connection arguments such as security or protocol configs that can be sent to service during connection.",
      "type": "object",
      "additionalProperties": {
        ".{1,}": {
          "type": "string"
        }
      }
    },
    "supportsMetadataExtraction": {
      "title": "Supports Metadata Extraction",
      "description": "Supports Metadata Extraction.",
      "type": "boolean",
      "default": true
    },
    "supportsUsageExtraction": {
      "description": "Supports Usage Extraction.",
      "type": "boolean",
      "default": true
    },
    "supportsLineageExtraction": {
      "description": "Supports Lineage Extraction.",
      "type": "boolean",
      "default": true
    },
    "supportsDBTExtraction": {
      "description": "Supports DBT Extraction.",
      "type": "boolean",
      "default": true
    },
    "supportsProfiler": {
      "title": "Supports Profiler",
      "description": "Supports Profiler",
      "type": "boolean",
      "default": true
    },
    "supportsDatabase": {
      "title": "Supports Database",
      "description": "The source service supports the database concept in its hierarchy",
      "type": "boolean",
      "default": true
    },
    "supportsQueryComment": {
      "title": "Supports Query Comment",
      "description": "For Database Services using SQLAlchemy, True to enable running a comment for all queries run from OpenMetadata.",
      "type": "boolean",
      "default": true
    },
    "sampleDataStorageConfig": {
      "title": "S3 Config for Sample Data",
      "description": "Storage config to store sample data",
      "type": "object",
      "javaType": "org.openmetadata.schema.services.connections.database.SampleDataStorageConfig",
      "properties": {
        "config": {
          "oneOf": [
            {
              "title": "Sample Data Storage Config",
              "description": "Storage config to store sample data",
              "type": "object",
              "properties": {
                "bucketName": {
                  "title": "Bucket Name",
                  "description": "Bucket Name",
                  "type": "string",
                  "default": ""
                },
                "prefix": {
                  "title": "Prefix",
                  "description": "Prefix of the data source.",
                  "type": "string",
                  "default": ""
                },
                "overwriteData": {
                  "title": "Overwrite Sample Data",
                  "description": "When this field enabled a single parquet file will be created to store sample data, otherwise we will create a new file per day",
                  "type": "boolean",
                  "default": true
                },
                "storageConfig": {
                  "oneOf": [
                    {
                      "title": "AWS S3 Storage Config",
                      "$schema": "http://json-schema.org/draft-07/schema#",
                      "description": "AWS credentials configs.",
                      "type": "object",
                      "javaType": "org.openmetadata.schema.security.credentials.AWSCredentials",
                      "properties": {
                        "awsAccessKeyId": {
                          "title": "AWS Access Key ID",
                          "description": "AWS Access key ID.",
                          "type": "string"
                        },
                        "awsSecretAccessKey": {
                          "title": "AWS Secret Access Key",
                          "description": "AWS Secret Access Key.",
                          "type": "string",
                          "format": "password"
                        },
                        "awsRegion": {
                          "title": "AWS Region",
                          "description": "AWS Region",
                          "type": "string"
                        },
                        "awsSessionToken": {
                          "title": "AWS Session Token",
                          "description": "AWS Session Token.",
                          "type": "string"
                        },
                        "endPointURL": {
                          "title": "Endpoint URL",
                          "description": "EndPoint URL for the AWS",
                          "type": "string",
                          "format": "uri"
                        },
                        "profileName": {
                          "title": "Profile Name",
                          "description": "The name of a profile to use with the boto session.",
                          "type": "string"
                        },
                        "assumeRoleArn": {
                          "title": "Role Arn for Assume Role",
                          "description": "The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role",
                          "type": "string"
                        },
                        "assumeRoleSessionName": {
                          "title": "Role Session Name for Assume Role",
                          "description": "An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role",
                          "type": "string",
                          "default": "OpenMetadataSession"
                        },
                        "assumeRoleSourceIdentity": {
                          "title": "Source Identity for Assume Role",
                          "description": "The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role",
                          "type": "string"
                        }
                      },
                      "additionalProperties": false,
                      "required": [
                        "awsRegion"
                      ]
                    },
                    {
                      "title": "OpenMetadata Storage",
                      "type": "object",
                      "additionalProperties": false
                    }
                  ]
                }
              }
            },
            {
              "title": "No Sample Data Storage Config",
              "type": "object",
              "additionalProperties": false
            }
          ]
        }
      },
      "additionalProperties": false
    }
  },
  "additionalProperties": false,
  "required": [
    "credentials"
  ]
}