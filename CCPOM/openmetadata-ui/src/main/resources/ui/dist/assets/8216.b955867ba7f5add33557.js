"use strict";(self.webpackChunkopen_metadata=self.webpackChunkopen_metadata||[]).push([[8216],{98461:function(e,t,i){i.d(t,{c:function(){return B}});var o=i(70655),s=i(96486),a=i(55846),n=i(66827),r=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"AthenaConnection","description":"AWS Athena Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.AthenaConnection","definitions":{"athenaType":{"description":"Service type.","type":"string","enum":["Athena"],"default":"Athena"},"athenaScheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["awsathena+rest"],"default":"awsathena+rest"}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"Athena","type":"string","enum":["Athena"]},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","default":"awsathena+rest","type":"string","enum":["awsathena+rest"]},"awsConfig":{"title":"AWS Credentials Configuration","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string","format":"uri"},"profileName":{"title":"Profile Name","description":"The name of a profile to use with the boto session.","type":"string"},"assumeRoleArn":{"title":"Role Arn for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role","type":"string"},"assumeRoleSessionName":{"title":"Role Session Name for Assume Role","description":"An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role","type":"string","default":"OpenMetadataSession"},"assumeRoleSourceIdentity":{"title":"Source Identity for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role","type":"string"}},"additionalProperties":false,"required":["awsRegion"]},"s3StagingDir":{"title":"S3 Staging Directory","description":"S3 Staging Directory. Example: s3://postgres/input/","type":"string","format":"uri"},"workgroup":{"title":"Athena Workgroup","description":"Athena workgroup.","type":"string"},"databaseName":{"title":"Database Name","description":"Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.","type":"string"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsDBTExtraction":{"description":"Supports DBT Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"supportsQueryComment":{"title":"Supports Query Comment","description":"For Database Services using SQLAlchemy, True to enable running a comment for all queries run from OpenMetadata.","type":"boolean","default":true},"supportsUsageExtraction":{"description":"Supports Usage Extraction.","type":"boolean","default":true},"supportsLineageExtraction":{"description":"Supports Lineage Extraction.","type":"boolean","default":true},"sampleDataStorageConfig":{"title":"S3 Config for Sample Data","description":"Storage config to store sample data","type":"object","javaType":"org.openmetadata.schema.services.connections.database.SampleDataStorageConfig","properties":{"config":{"oneOf":[{"title":"Sample Data Storage Config","description":"Storage config to store sample data","type":"object","properties":{"bucketName":{"title":"Bucket Name","description":"Bucket Name","type":"string","default":""},"prefix":{"title":"Prefix","description":"Prefix of the data source.","type":"string","default":""},"overwriteData":{"title":"Overwrite Sample Data","description":"When this field enabled a single parquet file will be created to store sample data, otherwise we will create a new file per day","type":"boolean","default":true},"storageConfig":{"oneOf":[{"title":"AWS S3 Storage Config","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string","format":"uri"},"profileName":{"title":"Profile Name","description":"The name of a profile to use with the boto session.","type":"string"},"assumeRoleArn":{"title":"Role Arn for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role","type":"string"},"assumeRoleSessionName":{"title":"Role Session Name for Assume Role","description":"An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role","type":"string","default":"OpenMetadataSession"},"assumeRoleSourceIdentity":{"title":"Source Identity for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role","type":"string"}},"additionalProperties":false,"required":["awsRegion"]},{"title":"OpenMetadata Storage","type":"object","additionalProperties":false}]}}},{"title":"No Sample Data Storage Config","type":"object","additionalProperties":false}]}},"additionalProperties":false}},"additionalProperties":false,"required":["s3StagingDir","awsConfig","workgroup"]}'),c=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"AzureSQLConnection","description":"Azure SQL Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.AzureSQLConnection","definitions":{"azureSQLType":{"description":"Service type.","type":"string","enum":["AzureSQL"],"default":"AzureSQL"},"azureSQLScheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["mssql+pyodbc"],"default":"mssql+pyodbc"}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"AzureSQL","type":"string","enum":["AzureSQL"]},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","default":"mssql+pyodbc","type":"string","enum":["mssql+pyodbc"]},"username":{"title":"Username","description":"Username to connect to AzureSQL. This user should have privileges to read the metadata.","type":"string"},"password":{"title":"Password","description":"Password to connect to AzureSQL.","type":"string","format":"password"},"hostPort":{"title":"Host and Port","description":"Host and port of the AzureSQL service.","type":"string"},"database":{"title":"Database","description":"Database of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single database. When left blank, OpenMetadata Ingestion attempts to scan all the databases.","type":"string"},"driver":{"title":"Driver","description":"SQLAlchemy driver for AzureSQL.","type":"string","default":"ODBC Driver 18 for SQL Server"},"ingestAllDatabases":{"title":"Ingest All Databases","description":"Ingest data from all databases in Azuresql. You can use databaseFilterPattern on top of this.","type":"boolean","default":false},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsUsageExtraction":{"title":"Supports Usage Extraction","description":"Supports Usage Extraction.","type":"boolean","default":true},"supportsLineageExtraction":{"title":"Supports Lineage Extraction","description":"Supports Lineage Extraction.","type":"boolean","default":true},"supportsDBTExtraction":{"description":"Supports DBT Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"supportsDatabase":{"title":"Supports Database","description":"The source service supports the database concept in its hierarchy","type":"boolean","default":true},"sampleDataStorageConfig":{"title":"S3 Config for Sample Data","description":"Storage config to store sample data","type":"object","javaType":"org.openmetadata.schema.services.connections.database.SampleDataStorageConfig","properties":{"config":{"oneOf":[{"title":"Sample Data Storage Config","description":"Storage config to store sample data","type":"object","properties":{"bucketName":{"title":"Bucket Name","description":"Bucket Name","type":"string","default":""},"prefix":{"title":"Prefix","description":"Prefix of the data source.","type":"string","default":""},"overwriteData":{"title":"Overwrite Sample Data","description":"When this field enabled a single parquet file will be created to store sample data, otherwise we will create a new file per day","type":"boolean","default":true},"storageConfig":{"oneOf":[{"title":"AWS S3 Storage Config","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string","format":"uri"},"profileName":{"title":"Profile Name","description":"The name of a profile to use with the boto session.","type":"string"},"assumeRoleArn":{"title":"Role Arn for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role","type":"string"},"assumeRoleSessionName":{"title":"Role Session Name for Assume Role","description":"An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role","type":"string","default":"OpenMetadataSession"},"assumeRoleSourceIdentity":{"title":"Source Identity for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role","type":"string"}},"additionalProperties":false,"required":["awsRegion"]},{"title":"OpenMetadata Storage","type":"object","additionalProperties":false}]}}},{"title":"No Sample Data Storage Config","type":"object","additionalProperties":false}]}},"additionalProperties":false}},"additionalProperties":false,"required":["hostPort","username","database"]}'),p=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"BigQueryConnection","description":"Google BigQuery Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.BigQueryConnection","definitions":{"bigqueryType":{"description":"Service type.","type":"string","enum":["BigQuery"],"default":"BigQuery"},"bigqueryScheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["bigquery"],"default":"bigquery"}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"BigQuery","type":"string","enum":["BigQuery"]},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","default":"bigquery","type":"string","enum":["bigquery"]},"hostPort":{"title":"Host and Port","description":"BigQuery APIs URL.","type":"string","default":"bigquery.googleapis.com"},"credentials":{"title":"GCP Credentials","description":"GCP Credentials","$schema":"http://json-schema.org/draft-07/schema#","type":"object","javaType":"org.openmetadata.schema.security.credentials.GCPCredentials","definitions":{"gcpCredentialsPath":{"title":"GCP Credentials Path","description":"Pass the path of file containing the GCP credentials info","type":"string"},"GCPImpersonateServiceAccountValues":{"title":"GCP impersonate service account values","description":"Pass the values to impersonate a service account of Google Cloud","type":"object","properties":{"impersonateServiceAccount":{"title":"Target Service Account Email","description":"The impersonated service account email","type":"string"},"lifetime":{"title":"Lifetime","description":"Number of seconds the delegated credential should be valid","type":"integer","default":3600}}}},"properties":{"gcpConfig":{"title":"GCP Credentials Configuration","description":"We support two ways of authenticating to GCP i.e via GCP Credentials Values or GCP Credentials Path","oneOf":[{"$schema":"http://json-schema.org/draft-07/schema#","type":"object","javaType":"org.openmetadata.schema.security.credentials.GCPValues","title":"GCP Credentials Values","description":"Pass the raw credential values provided by GCP","definitions":{"singleProjectId":{"title":"Single Project ID","type":"string"},"multipleProjectId":{"title":"Multiple Project ID","type":"array","items":{"type":"string"}}},"properties":{"type":{"title":"Credentials Type","description":"Google Cloud Platform account type.","type":"string"},"projectId":{"title":"Project ID","description":"Project ID","oneOf":[{"title":"Single Project ID","type":"string"},{"title":"Multiple Project ID","type":"array","items":{"type":"string"}}]},"privateKeyId":{"title":"Private Key ID","description":"Google Cloud private key id.","type":"string"},"privateKey":{"title":"Private Key","description":"Google Cloud private key.","type":"string","format":"password"},"clientEmail":{"title":"Client Email","description":"Google Cloud email.","type":"string"},"clientId":{"title":"Client ID","description":"Google Cloud Client ID.","type":"string"},"authUri":{"title":"Authentication URI","description":"Google Cloud auth uri.","type":"string","format":"uri","default":"https://accounts.google.com/o/oauth2/auth"},"tokenUri":{"title":"Token URI","description":"Google Cloud token uri.","type":"string","format":"uri","default":"https://oauth2.googleapis.com/token"},"authProviderX509CertUrl":{"title":"Authentication Provider x509 Certificate URL","description":"Google Cloud auth provider certificate.","type":"string","format":"uri","default":"https://www.googleapis.com/oauth2/v1/certs"},"clientX509CertUrl":{"title":"Client x509 Certificate URL","description":"Google Cloud client certificate uri.","type":"string","format":"uri"}},"additionalProperties":false},{"title":"GCP Credentials Path","description":"Pass the path of file containing the GCP credentials info","type":"string"}]},"gcpImpersonateServiceAccount":{"title":"GCP Impersonate Service Account Configuration","description":"we enable the authenticated service account to impersonate another service account","type":"object","properties":{"impersonateServiceAccount":{"title":"Target Service Account Email","description":"The impersonated service account email","type":"string"},"lifetime":{"title":"Lifetime","description":"Number of seconds the delegated credential should be valid","type":"integer","default":3600}}}},"additionalProperties":false,"required":["gcpConfig"]},"taxonomyProjectID":{"title":"Taxonomy Project IDs","description":"Project IDs used to fetch policy tags","type":"array","items":{"type":"string"},"default":null},"taxonomyLocation":{"title":"Taxonomy Location","description":"Taxonomy location used to fetch policy tags","type":"string","default":"us"},"usageLocation":{"title":"Usage Location","description":"Location used to query INFORMATION_SCHEMA.JOBS_BY_PROJECT to fetch usage data. You can pass multi-regions, such as `us` or `eu`, or you specific region. Australia and Asia multi-regions are not yet in GA.","type":"string","default":"us"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsUsageExtraction":{"description":"Supports Usage Extraction.","type":"boolean","default":true},"supportsLineageExtraction":{"description":"Supports Lineage Extraction.","type":"boolean","default":true},"supportsDBTExtraction":{"description":"Supports DBT Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"supportsDatabase":{"title":"Supports Database","description":"The source service supports the database concept in its hierarchy","type":"boolean","default":true},"supportsQueryComment":{"title":"Supports Query Comment","description":"For Database Services using SQLAlchemy, True to enable running a comment for all queries run from OpenMetadata.","type":"boolean","default":true},"sampleDataStorageConfig":{"title":"S3 Config for Sample Data","description":"Storage config to store sample data","type":"object","javaType":"org.openmetadata.schema.services.connections.database.SampleDataStorageConfig","properties":{"config":{"oneOf":[{"title":"Sample Data Storage Config","description":"Storage config to store sample data","type":"object","properties":{"bucketName":{"title":"Bucket Name","description":"Bucket Name","type":"string","default":""},"prefix":{"title":"Prefix","description":"Prefix of the data source.","type":"string","default":""},"overwriteData":{"title":"Overwrite Sample Data","description":"When this field enabled a single parquet file will be created to store sample data, otherwise we will create a new file per day","type":"boolean","default":true},"storageConfig":{"oneOf":[{"title":"AWS S3 Storage Config","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string","format":"uri"},"profileName":{"title":"Profile Name","description":"The name of a profile to use with the boto session.","type":"string"},"assumeRoleArn":{"title":"Role Arn for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role","type":"string"},"assumeRoleSessionName":{"title":"Role Session Name for Assume Role","description":"An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role","type":"string","default":"OpenMetadataSession"},"assumeRoleSourceIdentity":{"title":"Source Identity for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role","type":"string"}},"additionalProperties":false,"required":["awsRegion"]},{"title":"OpenMetadata Storage","type":"object","additionalProperties":false}]}}},{"title":"No Sample Data Storage Config","type":"object","additionalProperties":false}]}},"additionalProperties":false}},"additionalProperties":false,"required":["credentials"]}'),l=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"ClickhouseConnection","description":"Clickhouse Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.ClickhouseConnection","definitions":{"clickhouseType":{"description":"Service type.","type":"string","enum":["Clickhouse"],"default":"Clickhouse"},"clickhouseScheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["clickhouse+http","clickhouse+native"],"default":"clickhouse+http"}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"Clickhouse","type":"string","enum":["Clickhouse"]},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","default":"clickhouse+http","type":"string","enum":["clickhouse+http","clickhouse+native"]},"username":{"title":"Username","description":"Username to connect to Clickhouse. This user should have privileges to read all the metadata in Clickhouse.","type":"string"},"password":{"title":"Password","description":"Password to connect to Clickhouse.","type":"string","format":"password"},"hostPort":{"title":"Host and Port","description":"Host and port of the Clickhouse service.","type":"string"},"databaseName":{"title":"Database Name","description":"Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.","type":"string"},"databaseSchema":{"title":"Database Schema","description":"Database Schema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single schema. When left blank, OpenMetadata Ingestion attempts to scan all the schemas.","type":"string"},"duration":{"title":"Duration","description":"Clickhouse SQL connection duration.","type":"integer"},"https":{"title":"Use HTTPS Protocol","description":"Use HTTPS Protocol for connection with clickhouse","type":"boolean"},"secure":{"title":"Secure Connection","description":"Establish secure connection with clickhouse","type":"boolean"},"keyfile":{"title":"Key File Path","description":"Path to key file for establishing secure connection","type":"string"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsUsageExtraction":{"description":"Supports Usage Extraction.","type":"boolean","default":true},"supportsLineageExtraction":{"description":"Supports Lineage Extraction.","type":"boolean","default":true},"supportsDBTExtraction":{"description":"Supports DBT Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"supportsQueryComment":{"title":"Supports Query Comment","description":"For Database Services using SQLAlchemy, True to enable running a comment for all queries run from OpenMetadata.","type":"boolean","default":true},"sampleDataStorageConfig":{"title":"S3 Config for Sample Data","description":"Storage config to store sample data","type":"object","javaType":"org.openmetadata.schema.services.connections.database.SampleDataStorageConfig","properties":{"config":{"oneOf":[{"title":"Sample Data Storage Config","description":"Storage config to store sample data","type":"object","properties":{"bucketName":{"title":"Bucket Name","description":"Bucket Name","type":"string","default":""},"prefix":{"title":"Prefix","description":"Prefix of the data source.","type":"string","default":""},"overwriteData":{"title":"Overwrite Sample Data","description":"When this field enabled a single parquet file will be created to store sample data, otherwise we will create a new file per day","type":"boolean","default":true},"storageConfig":{"oneOf":[{"title":"AWS S3 Storage Config","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string","format":"uri"},"profileName":{"title":"Profile Name","description":"The name of a profile to use with the boto session.","type":"string"},"assumeRoleArn":{"title":"Role Arn for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role","type":"string"},"assumeRoleSessionName":{"title":"Role Session Name for Assume Role","description":"An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role","type":"string","default":"OpenMetadataSession"},"assumeRoleSourceIdentity":{"title":"Source Identity for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role","type":"string"}},"additionalProperties":false,"required":["awsRegion"]},{"title":"OpenMetadata Storage","type":"object","additionalProperties":false}]}}},{"title":"No Sample Data Storage Config","type":"object","additionalProperties":false}]}},"additionalProperties":false}},"additionalProperties":false,"required":["hostPort"]}'),d=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"Couchbase Connection","description":"Couchbase Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.CouchbaseConnection","definitions":{"couchbaseType":{"description":"Service type.","type":"string","enum":["Couchbase"],"default":"Couchbase"},"couchbaseScheme":{"description":"Couchbase driver scheme options.","type":"string","enum":["couchbase"],"default":"couchbase"}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"Couchbase","type":"string","enum":["Couchbase"]},"scheme":{"title":"Connection Scheme","description":"Couchbase driver scheme options.","default":"couchbase","type":"string","enum":["couchbase"]},"bucket":{"title":"Connection Bucket","description":"Couchbase connection Bucket options.","type":"string"},"username":{"title":"Username","description":"Username to connect to Couchbase. This user should have privileges to read all the metadata in Couchbase.","type":"string"},"password":{"title":"Password","description":"Password to connect to Couchbase.","type":"string","format":"password"},"hostport":{"title":"Hostport","description":"Hostname of the Couchbase service.","type":"string"}},"additionalProperties":false,"required":["hostport","username","password"]}'),u=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"CustomDatabaseConnection","description":"Custom Database Service connection to build a source that is not supported by OpenMetadata yet.","type":"object","javaType":"org.openmetadata.schema.services.connections.database.CustomDatabaseConnection","definitions":{"customDatabaseType":{"title":"Service Type","description":"Custom database service type","type":"string","enum":["CustomDatabase"],"default":"CustomDatabase"}},"properties":{"type":{"title":"Service Type","description":"Custom database service type","default":"CustomDatabase","type":"string","enum":["CustomDatabase"]},"sourcePythonClass":{"title":"Source Python Class Name","description":"Source Python Class Name to instantiated by the ingestion workflow","type":"string"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}}},"additionalProperties":false,"required":["type"]}'),m=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"DatabricksConnection","description":"Databricks Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.DatabricksConnection","definitions":{"databricksType":{"description":"Service type.","type":"string","enum":["Databricks"],"default":"Databricks"},"databricksScheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["databricks+connector"],"default":"databricks+connector"}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"Databricks","type":"string","enum":["Databricks"]},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","default":"databricks+connector","type":"string","enum":["databricks+connector"]},"hostPort":{"title":"Host and Port","description":"Host and port of the Databricks service.","type":"string"},"token":{"title":"Token","description":"Generated Token to connect to Databricks.","type":"string","format":"password"},"httpPath":{"title":"Http Path","description":"Databricks compute resources URL.","type":"string"},"catalog":{"title":"Catalog","description":"Catalog of the data source(Example: hive_metastore). This is optional parameter, if you would like to restrict the metadata reading to a single catalog. When left blank, OpenMetadata Ingestion attempts to scan all the catalog.","type":"string"},"databaseSchema":{"title":"Database Schema","description":"Database Schema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single schema. When left blank, OpenMetadata Ingestion attempts to scan all the schemas.","type":"string"},"connectionTimeout":{"title":"Connection Timeout","description":"The maximum amount of time (in seconds) to wait for a successful connection to the data source. If the connection attempt takes longer than this timeout period, an error will be returned.","type":"integer","default":120},"useUnityCatalog":{"title":"Use Unity Catalog","description":"Use unity catalog for fetching the metadata instead of using the hive metastore","type":"boolean","default":false},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsUsageExtraction":{"description":"Supports Usage Extraction.","type":"boolean","default":true},"supportsLineageExtraction":{"description":"Supports Lineage Extraction.","type":"boolean","default":true},"supportsDBTExtraction":{"description":"Supports DBT Extraction.","type":"boolean","default":true},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"supportsDatabase":{"title":"Supports Database","description":"The source service supports the database concept in its hierarchy","type":"boolean","default":true},"supportsQueryComment":{"title":"Supports Query Comment","description":"For Database Services using SQLAlchemy, True to enable running a comment for all queries run from OpenMetadata.","type":"boolean","default":true},"sampleDataStorageConfig":{"title":"S3 Config for Sample Data","description":"Storage config to store sample data","type":"object","javaType":"org.openmetadata.schema.services.connections.database.SampleDataStorageConfig","properties":{"config":{"oneOf":[{"title":"Sample Data Storage Config","description":"Storage config to store sample data","type":"object","properties":{"bucketName":{"title":"Bucket Name","description":"Bucket Name","type":"string","default":""},"prefix":{"title":"Prefix","description":"Prefix of the data source.","type":"string","default":""},"overwriteData":{"title":"Overwrite Sample Data","description":"When this field enabled a single parquet file will be created to store sample data, otherwise we will create a new file per day","type":"boolean","default":true},"storageConfig":{"oneOf":[{"title":"AWS S3 Storage Config","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string","format":"uri"},"profileName":{"title":"Profile Name","description":"The name of a profile to use with the boto session.","type":"string"},"assumeRoleArn":{"title":"Role Arn for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role","type":"string"},"assumeRoleSessionName":{"title":"Role Session Name for Assume Role","description":"An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role","type":"string","default":"OpenMetadataSession"},"assumeRoleSourceIdentity":{"title":"Source Identity for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role","type":"string"}},"additionalProperties":false,"required":["awsRegion"]},{"title":"OpenMetadata Storage","type":"object","additionalProperties":false}]}}},{"title":"No Sample Data Storage Config","type":"object","additionalProperties":false}]}},"additionalProperties":false}},"additionalProperties":false,"required":["hostPort","token"]}'),f=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"DatalakeConnection","description":"Datalake Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.DatalakeConnection","definitions":{"datalakeType":{"description":"Service type.","type":"string","enum":["Datalake"],"default":"Datalake"},"localConfig":{"title":"Local Config","description":"Local config source where no extra information needs to be sent.","type":"object","additionalProperties":false}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"Datalake","type":"string","enum":["Datalake"]},"configSource":{"title":"DataLake Configuration Source","description":"Available sources to fetch files.","oneOf":[{"title":"Local Config","description":"Local config source where no extra information needs to be sent.","type":"object","additionalProperties":false},{"$schema":"http://json-schema.org/draft-07/schema#","title":"AzureConfig","description":"Azure Datalake Storage will ingest files in container","type":"object","javaType":"org.openmetadata.schema.services.connections.database.datalake.AzureConfig","properties":{"securityConfig":{"title":"Azure Datalake Config Source","$schema":"http://json-schema.org/draft-07/schema#","description":"Azure Datalake Credentials","type":"object","javaType":"org.openmetadata.schema.security.credentials.AzureCredentials","properties":{"clientId":{"title":"Client ID","description":"Your Service Principal App ID (Client ID)","type":"string"},"clientSecret":{"title":"Client Secret","description":"Your Service Principal Password (Client Secret)","type":"string","format":"password"},"tenantId":{"title":"Tenant ID","description":"Tenant ID of your Azure Subscription","type":"string"},"accountName":{"title":"Account Name","description":"Account Name of your storage account","type":"string"}},"additionalProperties":false,"required":["clientId","clientSecret","tenantId","accountName"]}},"additionalProperties":false},{"$schema":"http://json-schema.org/draft-07/schema#","title":"GCSConfig","description":"DataLake GCS storage will ingest metadata of files","type":"object","javaType":"org.openmetadata.schema.services.connections.database.datalake.GCSConfig","properties":{"securityConfig":{"title":"DataLake GCS Security Config","$schema":"http://json-schema.org/draft-07/schema#","description":"GCP credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.GCPCredentials","definitions":{"gcpCredentialsPath":{"title":"GCP Credentials Path","description":"Pass the path of file containing the GCP credentials info","type":"string"},"GCPImpersonateServiceAccountValues":{"title":"GCP impersonate service account values","description":"Pass the values to impersonate a service account of Google Cloud","type":"object","properties":{"impersonateServiceAccount":{"title":"Target Service Account Email","description":"The impersonated service account email","type":"string"},"lifetime":{"title":"Lifetime","description":"Number of seconds the delegated credential should be valid","type":"integer","default":3600}}}},"properties":{"gcpConfig":{"title":"GCP Credentials Configuration","description":"We support two ways of authenticating to GCP i.e via GCP Credentials Values or GCP Credentials Path","oneOf":[{"$schema":"http://json-schema.org/draft-07/schema#","type":"object","javaType":"org.openmetadata.schema.security.credentials.GCPValues","title":"GCP Credentials Values","description":"Pass the raw credential values provided by GCP","definitions":{"singleProjectId":{"title":"Single Project ID","type":"string"},"multipleProjectId":{"title":"Multiple Project ID","type":"array","items":{"type":"string"}}},"properties":{"type":{"title":"Credentials Type","description":"Google Cloud Platform account type.","type":"string"},"projectId":{"title":"Project ID","description":"Project ID","oneOf":[{"title":"Single Project ID","type":"string"},{"title":"Multiple Project ID","type":"array","items":{"type":"string"}}]},"privateKeyId":{"title":"Private Key ID","description":"Google Cloud private key id.","type":"string"},"privateKey":{"title":"Private Key","description":"Google Cloud private key.","type":"string","format":"password"},"clientEmail":{"title":"Client Email","description":"Google Cloud email.","type":"string"},"clientId":{"title":"Client ID","description":"Google Cloud Client ID.","type":"string"},"authUri":{"title":"Authentication URI","description":"Google Cloud auth uri.","type":"string","format":"uri","default":"https://accounts.google.com/o/oauth2/auth"},"tokenUri":{"title":"Token URI","description":"Google Cloud token uri.","type":"string","format":"uri","default":"https://oauth2.googleapis.com/token"},"authProviderX509CertUrl":{"title":"Authentication Provider x509 Certificate URL","description":"Google Cloud auth provider certificate.","type":"string","format":"uri","default":"https://www.googleapis.com/oauth2/v1/certs"},"clientX509CertUrl":{"title":"Client x509 Certificate URL","description":"Google Cloud client certificate uri.","type":"string","format":"uri"}},"additionalProperties":false},{"title":"GCP Credentials Path","description":"Pass the path of file containing the GCP credentials info","type":"string"}]},"gcpImpersonateServiceAccount":{"title":"GCP Impersonate Service Account Configuration","description":"we enable the authenticated service account to impersonate another service account","type":"object","properties":{"impersonateServiceAccount":{"title":"Target Service Account Email","description":"The impersonated service account email","type":"string"},"lifetime":{"title":"Lifetime","description":"Number of seconds the delegated credential should be valid","type":"integer","default":3600}}}},"additionalProperties":false,"required":["gcpConfig"]}},"additionalProperties":false},{"$schema":"http://json-schema.org/draft-07/schema#","title":"S3Config","description":"DataLake S3 bucket will ingest metadata of files in bucket","type":"object","javaType":"org.openmetadata.schema.services.connections.database.datalake.S3Config","properties":{"securityConfig":{"title":"DataLake S3 Security Config","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string","format":"uri"},"profileName":{"title":"Profile Name","description":"The name of a profile to use with the boto session.","type":"string"},"assumeRoleArn":{"title":"Role Arn for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role","type":"string"},"assumeRoleSessionName":{"title":"Role Session Name for Assume Role","description":"An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role","type":"string","default":"OpenMetadataSession"},"assumeRoleSourceIdentity":{"title":"Source Identity for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role","type":"string"}},"additionalProperties":false,"required":["awsRegion"]}},"additionalProperties":false}]},"bucketName":{"title":"Bucket Name","description":"Bucket Name of the data source.","type":"string","default":""},"prefix":{"title":"Prefix","description":"Prefix of the data source.","type":"string","default":""},"databaseName":{"title":"Database Name","description":"Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.","type":"string"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"sampleDataStorageConfig":{"title":"S3 Config for Sample Data","description":"Storage config to store sample data","type":"object","javaType":"org.openmetadata.schema.services.connections.database.SampleDataStorageConfig","properties":{"config":{"oneOf":[{"title":"Sample Data Storage Config","description":"Storage config to store sample data","type":"object","properties":{"bucketName":{"title":"Bucket Name","description":"Bucket Name","type":"string","default":""},"prefix":{"title":"Prefix","description":"Prefix of the data source.","type":"string","default":""},"overwriteData":{"title":"Overwrite Sample Data","description":"When this field enabled a single parquet file will be created to store sample data, otherwise we will create a new file per day","type":"boolean","default":true},"storageConfig":{"oneOf":[{"title":"AWS S3 Storage Config","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string","format":"uri"},"profileName":{"title":"Profile Name","description":"The name of a profile to use with the boto session.","type":"string"},"assumeRoleArn":{"title":"Role Arn for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role","type":"string"},"assumeRoleSessionName":{"title":"Role Session Name for Assume Role","description":"An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role","type":"string","default":"OpenMetadataSession"},"assumeRoleSourceIdentity":{"title":"Source Identity for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role","type":"string"}},"additionalProperties":false,"required":["awsRegion"]},{"title":"OpenMetadata Storage","type":"object","additionalProperties":false}]}}},{"title":"No Sample Data Storage Config","type":"object","additionalProperties":false}]}},"additionalProperties":false}},"additionalProperties":false,"required":["configSource"]}'),y=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"Db2Connection","description":"Db2 Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.Db2Connection","definitions":{"db2Type":{"description":"Service type.","type":"string","enum":["Db2"],"default":"Db2"},"db2Scheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["db2+ibm_db"],"default":"db2+ibm_db"}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"Db2","type":"string","enum":["Db2"]},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","default":"db2+ibm_db","type":"string","enum":["db2+ibm_db"]},"username":{"title":"Username","description":"Username to connect to DB2. This user should have privileges to read all the metadata in DB2.","type":"string"},"password":{"title":"Password","description":"Password to connect to DB2.","type":"string","format":"password"},"hostPort":{"title":"Host and Port","description":"Host and port of the DB2 service.","type":"string"},"database":{"title":"database","description":"Database of the data source.","type":"string"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsDBTExtraction":{"description":"Supports DBT Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"supportsDatabase":{"title":"Supports Database","description":"The source service supports the database concept in its hierarchy","type":"boolean","default":true},"supportsQueryComment":{"title":"Supports Query Comment","description":"For Database Services using SQLAlchemy, True to enable running a comment for all queries run from OpenMetadata.","type":"boolean","default":true},"sampleDataStorageConfig":{"title":"S3 Config for Sample Data","description":"Storage config to store sample data","type":"object","javaType":"org.openmetadata.schema.services.connections.database.SampleDataStorageConfig","properties":{"config":{"oneOf":[{"title":"Sample Data Storage Config","description":"Storage config to store sample data","type":"object","properties":{"bucketName":{"title":"Bucket Name","description":"Bucket Name","type":"string","default":""},"prefix":{"title":"Prefix","description":"Prefix of the data source.","type":"string","default":""},"overwriteData":{"title":"Overwrite Sample Data","description":"When this field enabled a single parquet file will be created to store sample data, otherwise we will create a new file per day","type":"boolean","default":true},"storageConfig":{"oneOf":[{"title":"AWS S3 Storage Config","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string","format":"uri"},"profileName":{"title":"Profile Name","description":"The name of a profile to use with the boto session.","type":"string"},"assumeRoleArn":{"title":"Role Arn for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role","type":"string"},"assumeRoleSessionName":{"title":"Role Session Name for Assume Role","description":"An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role","type":"string","default":"OpenMetadataSession"},"assumeRoleSourceIdentity":{"title":"Source Identity for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role","type":"string"}},"additionalProperties":false,"required":["awsRegion"]},{"title":"OpenMetadata Storage","type":"object","additionalProperties":false}]}}},{"title":"No Sample Data Storage Config","type":"object","additionalProperties":false}]}},"additionalProperties":false}},"additionalProperties":false,"required":["hostPort","username","database"]}'),g=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"DeltaLakeConnection","description":"DeltaLake Database Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.DeltaLakeConnection","definitions":{"deltaLakeType":{"description":"Service type.","type":"string","enum":["DeltaLake"],"default":"DeltaLake"},"metastoreHostPortConnection":{"title":"Hive Metastore Service","type":"object","properties":{"metastoreHostPort":{"title":"Hive Metastore Service","description":"Thrift connection to the metastore service. E.g., localhost:9083","type":"string"}},"additionalProperties":false},"metastoreDbConnection":{"title":"Hive Metastore Database","type":"object","properties":{"metastoreDb":{"title":"Hive Metastore Database","description":"JDBC connection to the metastore database. E.g., jdbc:mysql://localhost:3306/demo_hive","type":"string"},"username":{"title":"Connection UserName","description":"Username to use against metastore database. The value will be mapped as spark.hadoop.javax.jdo.option.ConnectionUserName sparks property.","type":"string"},"password":{"title":"Connection Password","description":"Password to use against metastore database. The value will be mapped as spark.hadoop.javax.jdo.option.ConnectionPassword sparks property.","type":"string","format":"password"},"driverName":{"title":"Connection Driver Name","description":"Driver class name for JDBC metastore. The value will be mapped as spark.hadoop.javax.jdo.option.ConnectionDriverName sparks property. E.g., org.mariadb.jdbc.Driver","type":"string"},"jdbcDriverClassPath":{"title":"JDBC Driver Class Path","description":"Class path to JDBC driver required for JDBC connection. The value will be mapped as sparks.driver.extraClassPath sparks property.","type":"string"}},"additionalProperties":false},"metastoreFilePathConnection":{"title":"Hive Metastore File Path","type":"object","properties":{"metastoreFilePath":{"title":"Hive Metastore File Path","description":"Local path for the local file with metastore data. E.g., /tmp/metastore.db","type":"string"}},"additionalProperties":false}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"DeltaLake","type":"string","enum":["DeltaLake"]},"metastoreConnection":{"title":"Hive Metastore Connection","description":"Hive metastore service, local file path or metastore db.","oneOf":[{"title":"Hive Metastore Service","type":"object","properties":{"metastoreHostPort":{"title":"Hive Metastore Service","description":"Thrift connection to the metastore service. E.g., localhost:9083","type":"string"}},"additionalProperties":false},{"title":"Hive Metastore Database","type":"object","properties":{"metastoreDb":{"title":"Hive Metastore Database","description":"JDBC connection to the metastore database. E.g., jdbc:mysql://localhost:3306/demo_hive","type":"string"},"username":{"title":"Connection UserName","description":"Username to use against metastore database. The value will be mapped as spark.hadoop.javax.jdo.option.ConnectionUserName sparks property.","type":"string"},"password":{"title":"Connection Password","description":"Password to use against metastore database. The value will be mapped as spark.hadoop.javax.jdo.option.ConnectionPassword sparks property.","type":"string","format":"password"},"driverName":{"title":"Connection Driver Name","description":"Driver class name for JDBC metastore. The value will be mapped as spark.hadoop.javax.jdo.option.ConnectionDriverName sparks property. E.g., org.mariadb.jdbc.Driver","type":"string"},"jdbcDriverClassPath":{"title":"JDBC Driver Class Path","description":"Class path to JDBC driver required for JDBC connection. The value will be mapped as sparks.driver.extraClassPath sparks property.","type":"string"}},"additionalProperties":false},{"title":"Hive Metastore File Path","type":"object","properties":{"metastoreFilePath":{"title":"Hive Metastore File Path","description":"Local path for the local file with metastore data. E.g., /tmp/metastore.db","type":"string"}},"additionalProperties":false}]},"appName":{"title":"Application Name","description":"pySpark App Name.","type":"string","default":"OpenMetadata"},"databaseName":{"title":"Database Name","description":"Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.","type":"string"},"connectionArguments":{"title":"Connection Arguments","description":"Key-Value pairs that will be used to add configs to the SparkSession.","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsDBTExtraction":{"description":"Supports DBT Extraction.","type":"boolean","default":true}},"additionalProperties":false,"required":["metastoreConnection"]}'),h=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"DomoDatabaseConnection","description":"Domo Database Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.DomoDatabaseConnection","definitions":{"domoDatabaseType":{"description":" service type","type":"string","enum":["DomoDatabase"],"default":"DomoDatabase"}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"DomoDatabase","type":"string","enum":["DomoDatabase"]},"clientId":{"title":"Client ID","description":"Client ID for DOMO","type":"string"},"secretToken":{"title":"Secret Token","description":"Secret Token to connect DOMO","type":"string","format":"password"},"accessToken":{"title":"Access Token","description":"Access token to connect to DOMO","type":"string"},"apiHost":{"expose":true,"title":"API Host","description":"API Host to connect to DOMO instance","default":"api.domo.com","type":"string","format":"string"},"instanceDomain":{"title":"Instance Domain","description":"URL of your Domo instance, e.g., https://openmetadata.domo.com","type":"string","format":"uri"},"databaseName":{"title":"Database Name","description":"Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.","type":"string"},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true}},"additionalProperties":false,"required":["clientId","secretToken","instanceDomain"]}'),S=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"DruidConnection","description":"Druid Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.DruidConnection","definitions":{"druidType":{"description":"Service type.","type":"string","enum":["Druid"],"default":"Druid"},"druidScheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["druid"],"default":"druid"}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"Druid","type":"string","enum":["Druid"]},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","default":"druid","type":"string","enum":["druid"]},"username":{"title":"Username","description":"Username to connect to Druid. This user should have privileges to read all the metadata in Druid.","type":"string"},"password":{"title":"Password","description":"Password to connect to Druid.","type":"string","format":"password"},"hostPort":{"title":"Host and Port","description":"Host and port of the Druid service.","type":"string"},"databaseName":{"title":"Database Name","description":"Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.","type":"string"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"supportsQueryComment":{"title":"Supports Query Comment","description":"For Database Services using SQLAlchemy, True to enable running a comment for all queries run from OpenMetadata.","type":"boolean","default":true},"supportsDBTExtraction":{"description":"Supports DBT Extraction.","type":"boolean","default":true},"sampleDataStorageConfig":{"title":"S3 Config for Sample Data","description":"Storage config to store sample data","type":"object","javaType":"org.openmetadata.schema.services.connections.database.SampleDataStorageConfig","properties":{"config":{"oneOf":[{"title":"Sample Data Storage Config","description":"Storage config to store sample data","type":"object","properties":{"bucketName":{"title":"Bucket Name","description":"Bucket Name","type":"string","default":""},"prefix":{"title":"Prefix","description":"Prefix of the data source.","type":"string","default":""},"overwriteData":{"title":"Overwrite Sample Data","description":"When this field enabled a single parquet file will be created to store sample data, otherwise we will create a new file per day","type":"boolean","default":true},"storageConfig":{"oneOf":[{"title":"AWS S3 Storage Config","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string","format":"uri"},"profileName":{"title":"Profile Name","description":"The name of a profile to use with the boto session.","type":"string"},"assumeRoleArn":{"title":"Role Arn for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role","type":"string"},"assumeRoleSessionName":{"title":"Role Session Name for Assume Role","description":"An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role","type":"string","default":"OpenMetadataSession"},"assumeRoleSourceIdentity":{"title":"Source Identity for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role","type":"string"}},"additionalProperties":false,"required":["awsRegion"]},{"title":"OpenMetadata Storage","type":"object","additionalProperties":false}]}}},{"title":"No Sample Data Storage Config","type":"object","additionalProperties":false}]}},"additionalProperties":false}},"additionalProperties":false,"required":["hostPort"]}'),A=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"DynamoDBConnection","description":"DynamoDB Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.DynamoDBConnection","definitions":{"dynamoDBType":{"description":"Service type.","type":"string","enum":["DynamoDB"],"default":"DynamoDB"}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"DynamoDB","type":"string","enum":["DynamoDB"]},"awsConfig":{"title":"AWS Credentials Configuration","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string","format":"uri"},"profileName":{"title":"Profile Name","description":"The name of a profile to use with the boto session.","type":"string"},"assumeRoleArn":{"title":"Role Arn for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role","type":"string"},"assumeRoleSessionName":{"title":"Role Session Name for Assume Role","description":"An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role","type":"string","default":"OpenMetadataSession"},"assumeRoleSourceIdentity":{"title":"Source Identity for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role","type":"string"}},"additionalProperties":false,"required":["awsRegion"]},"databaseName":{"title":"Database Name","description":"Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.","type":"string"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true}},"additionalProperties":false,"required":["awsConfig"]}'),b=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"GlueConnection","description":"Glue Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.GlueConnection","definitions":{"glueType":{"description":"Service type.","type":"string","enum":["Glue"],"default":"Glue"}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"Glue","type":"string","enum":["Glue"]},"awsConfig":{"title":"AWS Credentials Configuration","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string","format":"uri"},"profileName":{"title":"Profile Name","description":"The name of a profile to use with the boto session.","type":"string"},"assumeRoleArn":{"title":"Role Arn for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role","type":"string"},"assumeRoleSessionName":{"title":"Role Session Name for Assume Role","description":"An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role","type":"string","default":"OpenMetadataSession"},"assumeRoleSourceIdentity":{"title":"Source Identity for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role","type":"string"}},"additionalProperties":false,"required":["awsRegion"]},"databaseName":{"title":"Database Name","description":"Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.","type":"string"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsDBTExtraction":{"description":"Supports DBT Extraction.","type":"boolean","default":true}},"additionalProperties":false,"required":["awsConfig"]}'),C=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"GreenplumConnection","description":"Greenplum Database Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.GreenplumConnection","definitions":{"greenplumType":{"description":"Service type.","type":"string","enum":["Greenplum"],"default":"Greenplum"},"greenplumScheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["postgresql+psycopg2"],"default":"postgresql+psycopg2"}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"Greenplum","type":"string","enum":["Greenplum"]},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","default":"postgresql+psycopg2","type":"string","enum":["postgresql+psycopg2"]},"username":{"title":"Username","description":"Username to connect to Greenplum. This user should have privileges to read all the metadata in Greenplum.","type":"string"},"authType":{"title":"Auth Configuration Type","description":"Choose Auth Config Type.","oneOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"Basic Auth","description":"Common Database Connection Config","javaType":"org.openmetadata.schema.services.connections.database.common.basicAuth","type":"object","properties":{"password":{"title":"Password","description":"Password to connect to source.","type":"string","format":"password"}},"additionalProperties":false},{"$schema":"http://json-schema.org/draft-07/schema#","title":"IAM Auth Configuration Source","description":"IAM Auth Database Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.common.IamAuthConfig","properties":{"awsConfig":{"title":"AWS Credentials Configuration","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string","format":"uri"},"profileName":{"title":"Profile Name","description":"The name of a profile to use with the boto session.","type":"string"},"assumeRoleArn":{"title":"Role Arn for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role","type":"string"},"assumeRoleSessionName":{"title":"Role Session Name for Assume Role","description":"An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role","type":"string","default":"OpenMetadataSession"},"assumeRoleSourceIdentity":{"title":"Source Identity for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role","type":"string"}},"additionalProperties":false,"required":["awsRegion"]}},"additionalProperties":false}]},"hostPort":{"title":"Host and Port","description":"Host and port of the source service.","type":"string"},"database":{"title":"Database","description":"Database of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single database. When left blank, OpenMetadata Ingestion attempts to scan all the databases.","type":"string"},"sslMode":{"title":"SSL Mode","description":"SSL Mode to connect to Greenplum database.","enum":["disable","allow","prefer","require","verify-ca","verify-full"],"default":"disable"},"sslConfig":{"title":"SSL Config","description":"Client SSL configuration","javaType":"org.openmetadata.schema.security.ssl.SSLConfig","oneOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"Validate SSL Client Config","description":"OpenMetadata Client configured to validate SSL certificates.","type":"object","javaType":"org.openmetadata.schema.security.ssl.ValidateSSLClientConfig","properties":{"certificatePath":{"title":"Certificate Path","description":"CA certificate path. E.g., /path/to/public.cert. Will be used if Verify SSL is set to `validate`.","type":"string"}},"additionalProperties":false}]},"ingestAllDatabases":{"title":"Ingest All Databases","description":"Ingest data from all databases in Greenplum. You can use databaseFilterPattern on top of this.","type":"boolean","default":false},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsDBTExtraction":{"description":"Supports DBT Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"supportsDatabase":{"title":"Supports Database","description":"The source service supports the database concept in its hierarchy","type":"boolean","default":true},"supportsQueryComment":{"title":"Supports Query Comment","description":"For Database Services using SQLAlchemy, True to enable running a comment for all queries run from OpenMetadata.","type":"boolean","default":true},"sampleDataStorageConfig":{"title":"S3 Config for Sample Data","description":"Storage config to store sample data","type":"object","javaType":"org.openmetadata.schema.services.connections.database.SampleDataStorageConfig","properties":{"config":{"oneOf":[{"title":"Sample Data Storage Config","description":"Storage config to store sample data","type":"object","properties":{"bucketName":{"title":"Bucket Name","description":"Bucket Name","type":"string","default":""},"prefix":{"title":"Prefix","description":"Prefix of the data source.","type":"string","default":""},"overwriteData":{"title":"Overwrite Sample Data","description":"When this field enabled a single parquet file will be created to store sample data, otherwise we will create a new file per day","type":"boolean","default":true},"storageConfig":{"oneOf":[{"title":"AWS S3 Storage Config","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string","format":"uri"},"profileName":{"title":"Profile Name","description":"The name of a profile to use with the boto session.","type":"string"},"assumeRoleArn":{"title":"Role Arn for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role","type":"string"},"assumeRoleSessionName":{"title":"Role Session Name for Assume Role","description":"An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role","type":"string","default":"OpenMetadataSession"},"assumeRoleSourceIdentity":{"title":"Source Identity for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role","type":"string"}},"additionalProperties":false,"required":["awsRegion"]},{"title":"OpenMetadata Storage","type":"object","additionalProperties":false}]}}},{"title":"No Sample Data Storage Config","type":"object","additionalProperties":false}]}},"additionalProperties":false}},"additionalProperties":false,"required":["hostPort","username","database"]}'),v=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"HiveConnection","description":"Hive SQL Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.HiveConnection","definitions":{"hiveType":{"description":"Service type.","type":"string","enum":["Hive"],"default":"Hive"},"hiveScheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["hive","hive+http","hive+https"],"default":"hive"}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"Hive","type":"string","enum":["Hive"]},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","default":"hive","type":"string","enum":["hive","hive+http","hive+https"]},"username":{"title":"Username","description":"Username to connect to Hive. This user should have privileges to read all the metadata in Hive.","type":"string"},"password":{"title":"Password","description":"Password to connect to Hive.","type":"string","format":"password"},"hostPort":{"title":"Host and Port","description":"Host and port of the Hive service.","type":"string"},"auth":{"title":"Authentication Mode","description":"Authentication mode to connect to hive.","type":"string","enum":["NONE","LDAP","KERBEROS","CUSTOM","NOSASL","BASIC","GSSAPI","JWT","PLAIN"],"default":"NONE"},"kerberosServiceName":{"title":"Kerberos Service Name","description":"If authenticating with Kerberos specify the Kerberos service name","type":"string"},"databaseSchema":{"title":"Database Schema","description":"Database Schema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single schema. When left blank, OpenMetadata Ingestion attempts to scan all the schemas.","type":"string"},"databaseName":{"title":"Database Name","description":"Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.","type":"string"},"authOptions":{"title":"URL Authentication Options","description":"Authentication options to pass to Hive connector. These options are based on SQLAlchemy.","type":"string"},"metastoreConnection":{"title":"Hive Metastore Connection Details","description":"Hive Metastore Connection Details","oneOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"PostgresConnection","description":"Postgres Database Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.PostgresConnection","definitions":{"postgresType":{"description":"Service type.","type":"string","enum":["Postgres"],"default":"Postgres"},"postgresScheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["postgresql+psycopg2","pgspider+psycopg2"],"default":"postgresql+psycopg2"}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"Postgres","type":"string","enum":["Postgres"]},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","default":"postgresql+psycopg2","type":"string","enum":["postgresql+psycopg2","pgspider+psycopg2"]},"username":{"title":"Username","description":"Username to connect to Postgres. This user should have privileges to read all the metadata in Postgres.","type":"string"},"authType":{"title":"Auth Configuration Type","description":"Choose Auth Config Type.","oneOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"Basic Auth","description":"Common Database Connection Config","javaType":"org.openmetadata.schema.services.connections.database.common.basicAuth","type":"object","properties":{"password":{"title":"Password","description":"Password to connect to source.","type":"string","format":"password"}},"additionalProperties":false},{"$schema":"http://json-schema.org/draft-07/schema#","title":"IAM Auth Configuration Source","description":"IAM Auth Database Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.common.IamAuthConfig","properties":{"awsConfig":{"title":"AWS Credentials Configuration","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string","format":"uri"},"profileName":{"title":"Profile Name","description":"The name of a profile to use with the boto session.","type":"string"},"assumeRoleArn":{"title":"Role Arn for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role","type":"string"},"assumeRoleSessionName":{"title":"Role Session Name for Assume Role","description":"An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role","type":"string","default":"OpenMetadataSession"},"assumeRoleSourceIdentity":{"title":"Source Identity for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role","type":"string"}},"additionalProperties":false,"required":["awsRegion"]}},"additionalProperties":false}]},"hostPort":{"title":"Host and Port","description":"Host and port of the source service.","type":"string"},"database":{"title":"Database","description":"Database of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single database. When left blank, OpenMetadata Ingestion attempts to scan all the databases.","type":"string"},"ingestAllDatabases":{"title":"Ingest All Databases","description":"Ingest data from all databases in Postgres. You can use databaseFilterPattern on top of this.","type":"boolean","default":false},"sslMode":{"title":"SSL Mode","description":"SSL Mode to connect to postgres database.","enum":["disable","allow","prefer","require","verify-ca","verify-full"],"default":"disable"},"sslConfig":{"title":"SSL Config","description":"Client SSL configuration","javaType":"org.openmetadata.schema.security.ssl.SSLConfig","oneOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"Validate SSL Client Config","description":"OpenMetadata Client configured to validate SSL certificates.","type":"object","javaType":"org.openmetadata.schema.security.ssl.ValidateSSLClientConfig","properties":{"certificatePath":{"title":"Certificate Path","description":"CA certificate path. E.g., /path/to/public.cert. Will be used if Verify SSL is set to `validate`.","type":"string"}},"additionalProperties":false}]},"classificationName":{"title":"Classification Name","description":"Custom OpenMetadata Classification name for Postgres policy tags.","type":"string","default":"PostgresPolicyTags"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsUsageExtraction":{"description":"Supports Usage Extraction.","type":"boolean","default":true},"supportsLineageExtraction":{"description":"Supports Lineage Extraction.","type":"boolean","default":true},"supportsDBTExtraction":{"description":"Supports DBT Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"supportsDatabase":{"title":"Supports Database","description":"The source service supports the database concept in its hierarchy","type":"boolean","default":true},"supportsQueryComment":{"title":"Supports Query Comment","description":"For Database Services using SQLAlchemy, True to enable running a comment for all queries run from OpenMetadata.","type":"boolean","default":true},"sampleDataStorageConfig":{"title":"S3 Config for Sample Data","description":"Storage config to store sample data","type":"object","javaType":"org.openmetadata.schema.services.connections.database.SampleDataStorageConfig","properties":{"config":{"oneOf":[{"title":"Sample Data Storage Config","description":"Storage config to store sample data","type":"object","properties":{"bucketName":{"title":"Bucket Name","description":"Bucket Name","type":"string","default":""},"prefix":{"title":"Prefix","description":"Prefix of the data source.","type":"string","default":""},"overwriteData":{"title":"Overwrite Sample Data","description":"When this field enabled a single parquet file will be created to store sample data, otherwise we will create a new file per day","type":"boolean","default":true},"storageConfig":{"oneOf":[{"title":"AWS S3 Storage Config","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string","format":"uri"},"profileName":{"title":"Profile Name","description":"The name of a profile to use with the boto session.","type":"string"},"assumeRoleArn":{"title":"Role Arn for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role","type":"string"},"assumeRoleSessionName":{"title":"Role Session Name for Assume Role","description":"An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role","type":"string","default":"OpenMetadataSession"},"assumeRoleSourceIdentity":{"title":"Source Identity for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role","type":"string"}},"additionalProperties":false,"required":["awsRegion"]},{"title":"OpenMetadata Storage","type":"object","additionalProperties":false}]}}},{"title":"No Sample Data Storage Config","type":"object","additionalProperties":false}]}},"additionalProperties":false}},"additionalProperties":false,"required":["hostPort","username","database"]},{"$schema":"http://json-schema.org/draft-07/schema#","title":"MysqlConnection","description":"Mysql Database Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.MysqlConnection","definitions":{"mySQLType":{"description":"Service type.","type":"string","enum":["Mysql"],"default":"Mysql"},"mySQLScheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["mysql+pymysql"],"default":"mysql+pymysql"}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"Mysql","type":"string","enum":["Mysql"]},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","default":"mysql+pymysql","type":"string","enum":["mysql+pymysql"]},"username":{"title":"Username","description":"Username to connect to MySQL. This user should have privileges to read all the metadata in Mysql.","type":"string"},"authType":{"title":"Auth Configuration Type","description":"Choose Auth Config Type.","oneOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"Basic Auth","description":"Common Database Connection Config","javaType":"org.openmetadata.schema.services.connections.database.common.basicAuth","type":"object","properties":{"password":{"title":"Password","description":"Password to connect to source.","type":"string","format":"password"}},"additionalProperties":false},{"$schema":"http://json-schema.org/draft-07/schema#","title":"IAM Auth Configuration Source","description":"IAM Auth Database Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.common.IamAuthConfig","properties":{"awsConfig":{"title":"AWS Credentials Configuration","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string","format":"uri"},"profileName":{"title":"Profile Name","description":"The name of a profile to use with the boto session.","type":"string"},"assumeRoleArn":{"title":"Role Arn for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role","type":"string"},"assumeRoleSessionName":{"title":"Role Session Name for Assume Role","description":"An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role","type":"string","default":"OpenMetadataSession"},"assumeRoleSourceIdentity":{"title":"Source Identity for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role","type":"string"}},"additionalProperties":false,"required":["awsRegion"]}},"additionalProperties":false}]},"hostPort":{"title":"Host and Port","description":"Host and port of the MySQL service.","type":"string"},"databaseName":{"title":"Database Name","description":"Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.","type":"string"},"databaseSchema":{"title":"Database Schema","description":"Database Schema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single schema. When left blank, OpenMetadata Ingestion attempts to scan all the schemas.","type":"string"},"sslCA":{"title":"SSL CA","description":"Provide the path to ssl ca file","type":"string"},"sslCert":{"title":"SSL Client Certificate File","description":"Provide the path to ssl client certificate file (ssl_cert)","type":"string"},"sslKey":{"title":"SSL Client Key File","description":"Provide the path to ssl client certificate file (ssl_key)","type":"string"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsDBTExtraction":{"description":"Supports DBT Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"supportsQueryComment":{"title":"Supports Query Comment","description":"For Database Services using SQLAlchemy, True to enable running a comment for all queries run from OpenMetadata.","type":"boolean","default":true},"sampleDataStorageConfig":{"title":"S3 Config for Sample Data","description":"Storage config to store sample data","type":"object","javaType":"org.openmetadata.schema.services.connections.database.SampleDataStorageConfig","properties":{"config":{"oneOf":[{"title":"Sample Data Storage Config","description":"Storage config to store sample data","type":"object","properties":{"bucketName":{"title":"Bucket Name","description":"Bucket Name","type":"string","default":""},"prefix":{"title":"Prefix","description":"Prefix of the data source.","type":"string","default":""},"overwriteData":{"title":"Overwrite Sample Data","description":"When this field enabled a single parquet file will be created to store sample data, otherwise we will create a new file per day","type":"boolean","default":true},"storageConfig":{"oneOf":[{"title":"AWS S3 Storage Config","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string","format":"uri"},"profileName":{"title":"Profile Name","description":"The name of a profile to use with the boto session.","type":"string"},"assumeRoleArn":{"title":"Role Arn for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role","type":"string"},"assumeRoleSessionName":{"title":"Role Session Name for Assume Role","description":"An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role","type":"string","default":"OpenMetadataSession"},"assumeRoleSourceIdentity":{"title":"Source Identity for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role","type":"string"}},"additionalProperties":false,"required":["awsRegion"]},{"title":"OpenMetadata Storage","type":"object","additionalProperties":false}]}}},{"title":"No Sample Data Storage Config","type":"object","additionalProperties":false}]}},"additionalProperties":false}},"additionalProperties":false,"required":["hostPort","username"]},{"title":"None","type":"object","additionalProperties":false}]},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsDBTExtraction":{"description":"Supports DBT Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"sampleDataStorageConfig":{"title":"S3 Config for Sample Data","description":"Storage config to store sample data","type":"object","javaType":"org.openmetadata.schema.services.connections.database.SampleDataStorageConfig","properties":{"config":{"oneOf":[{"title":"Sample Data Storage Config","description":"Storage config to store sample data","type":"object","properties":{"bucketName":{"title":"Bucket Name","description":"Bucket Name","type":"string","default":""},"prefix":{"title":"Prefix","description":"Prefix of the data source.","type":"string","default":""},"overwriteData":{"title":"Overwrite Sample Data","description":"When this field enabled a single parquet file will be created to store sample data, otherwise we will create a new file per day","type":"boolean","default":true},"storageConfig":{"oneOf":[{"title":"AWS S3 Storage Config","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string","format":"uri"},"profileName":{"title":"Profile Name","description":"The name of a profile to use with the boto session.","type":"string"},"assumeRoleArn":{"title":"Role Arn for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role","type":"string"},"assumeRoleSessionName":{"title":"Role Session Name for Assume Role","description":"An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role","type":"string","default":"OpenMetadataSession"},"assumeRoleSourceIdentity":{"title":"Source Identity for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role","type":"string"}},"additionalProperties":false,"required":["awsRegion"]},{"title":"OpenMetadata Storage","type":"object","additionalProperties":false}]}}},{"title":"No Sample Data Storage Config","type":"object","additionalProperties":false}]}},"additionalProperties":false}},"additionalProperties":false,"required":["hostPort"]}'),P=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"ImpalaConnection","description":"Impala SQL Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.ImpalaConnection","definitions":{"impalaType":{"description":"Service type.","type":"string","enum":["Impala"],"default":"Impala"},"impalaScheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["impala","impala4"],"default":"impala"}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"Impala","type":"string","enum":["Impala"]},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","default":"impala","type":"string","enum":["impala","impala4"]},"username":{"title":"Username","description":"Username to connect to Impala. This user should have privileges to read all the metadata in Impala.","type":"string"},"password":{"title":"Password","description":"Password to connect to Impala.","type":"string","format":"password"},"hostPort":{"title":"Host and Port","description":"Host and port of the Impala service.","type":"string"},"authMechanism":{"title":"Authentication Mode","description":"Authentication mode to connect to Impala.","type":"string","enum":["NOSASL","PLAIN","GSSAPI","LDAP","JWT"],"default":"PLAIN"},"kerberosServiceName":{"title":"Kerberos Service Name","description":"If authenticating with Kerberos specify the Kerberos service name","type":"string"},"databaseSchema":{"title":"Database Schema","description":"Database Schema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single schema. When left blank, OpenMetadata Ingestion attempts to scan all the schemas.","type":"string"},"databaseName":{"title":"Database Name","description":"Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.","type":"string"},"useSSL":{"title":"Use SSL","description":"Establish secure connection with Impala","type":"boolean"},"authOptions":{"title":"URL Authentication Options","description":"Authentication options to pass to Impala connector. These options are based on SQLAlchemy.","type":"string"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsDBTExtraction":{"description":"Supports DBT Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"sampleDataStorageConfig":{"title":"S3 Config for Sample Data","description":"Storage config to store sample data","type":"object","javaType":"org.openmetadata.schema.services.connections.database.SampleDataStorageConfig","properties":{"config":{"oneOf":[{"title":"Sample Data Storage Config","description":"Storage config to store sample data","type":"object","properties":{"bucketName":{"title":"Bucket Name","description":"Bucket Name","type":"string","default":""},"prefix":{"title":"Prefix","description":"Prefix of the data source.","type":"string","default":""},"overwriteData":{"title":"Overwrite Sample Data","description":"When this field enabled a single parquet file will be created to store sample data, otherwise we will create a new file per day","type":"boolean","default":true},"storageConfig":{"oneOf":[{"title":"AWS S3 Storage Config","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string","format":"uri"},"profileName":{"title":"Profile Name","description":"The name of a profile to use with the boto session.","type":"string"},"assumeRoleArn":{"title":"Role Arn for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role","type":"string"},"assumeRoleSessionName":{"title":"Role Session Name for Assume Role","description":"An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role","type":"string","default":"OpenMetadataSession"},"assumeRoleSourceIdentity":{"title":"Source Identity for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role","type":"string"}},"additionalProperties":false,"required":["awsRegion"]},{"title":"OpenMetadata Storage","type":"object","additionalProperties":false}]}}},{"title":"No Sample Data Storage Config","type":"object","additionalProperties":false}]}},"additionalProperties":false}},"additionalProperties":false,"required":["hostPort"]}'),R=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"MariaDBConnection","description":"MariaDB Database Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.MariaDBConnection","definitions":{"mariaDBType":{"description":"Service type.","type":"string","enum":["MariaDB"],"default":"MariaDB"},"mariaDBScheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["mysql+pymysql"],"default":"mysql+pymysql"}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"MariaDB","type":"string","enum":["MariaDB"]},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","default":"mysql+pymysql","type":"string","enum":["mysql+pymysql"]},"username":{"title":"Username","description":"Username to connect to MariaDB. This user should have privileges to read all the metadata in MariaDB.","type":"string"},"password":{"title":"Password","description":"Password to connect to MariaDB.","type":"string","format":"password"},"hostPort":{"title":"Host and Port","description":"Host and port of the MariaDB service.","type":"string"},"databaseName":{"title":"Database Name","description":"Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.","type":"string"},"databaseSchema":{"title":"Database Schema","description":"Database Schema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single schema. When left blank, OpenMetadata Ingestion attempts to scan all the schemas.","type":"string"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsDBTExtraction":{"description":"Supports DBT Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"supportsQueryComment":{"title":"Supports Query Comment","description":"For Database Services using SQLAlchemy, True to enable running a comment for all queries run from OpenMetadata.","type":"boolean","default":true},"sampleDataStorageConfig":{"title":"S3 Config for Sample Data","description":"Storage config to store sample data","type":"object","javaType":"org.openmetadata.schema.services.connections.database.SampleDataStorageConfig","properties":{"config":{"oneOf":[{"title":"Sample Data Storage Config","description":"Storage config to store sample data","type":"object","properties":{"bucketName":{"title":"Bucket Name","description":"Bucket Name","type":"string","default":""},"prefix":{"title":"Prefix","description":"Prefix of the data source.","type":"string","default":""},"overwriteData":{"title":"Overwrite Sample Data","description":"When this field enabled a single parquet file will be created to store sample data, otherwise we will create a new file per day","type":"boolean","default":true},"storageConfig":{"oneOf":[{"title":"AWS S3 Storage Config","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string","format":"uri"},"profileName":{"title":"Profile Name","description":"The name of a profile to use with the boto session.","type":"string"},"assumeRoleArn":{"title":"Role Arn for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role","type":"string"},"assumeRoleSessionName":{"title":"Role Session Name for Assume Role","description":"An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role","type":"string","default":"OpenMetadataSession"},"assumeRoleSourceIdentity":{"title":"Source Identity for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role","type":"string"}},"additionalProperties":false,"required":["awsRegion"]},{"title":"OpenMetadata Storage","type":"object","additionalProperties":false}]}}},{"title":"No Sample Data Storage Config","type":"object","additionalProperties":false}]}},"additionalProperties":false}},"additionalProperties":false,"required":["hostPort","username"]}'),T=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"MongoDBConnection","description":"MongoDB Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.MongoDBConnection","definitions":{"mongoDBType":{"description":"Service type.","type":"string","enum":["MongoDB"],"default":"MongoDB"},"MongoConnectionString":{"type":"object","javaType":"org.openmetadata.schema.services.connections.database.mongo.MongoConnectionString","title":"Mongo Connection String","properties":{"connectionURI":{"title":"Connection URI","description":"Connection URI to connect to your MongoDB cluster","type":"string"}}}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"MongoDB","type":"string","enum":["MongoDB"]},"connectionDetails":{"title":"MongoDB Connection Details","description":"MongoDB Connection Details.","oneOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"Mongo Connection Values","description":"Azure Datalake Storage will ingest files in container","type":"object","javaType":"org.openmetadata.schema.services.connections.database.mongo.MongoConnectionValues","definitions":{"mongoDBScheme":{"description":"Mongo connection scheme options.","type":"string","enum":["mongodb","mongodb+srv"],"default":"mongodb"}},"properties":{"scheme":{"title":"Connection Scheme","description":"Mongo connection scheme options.","default":"mongodb","type":"string","enum":["mongodb","mongodb+srv"]},"username":{"title":"Username","description":"Username to connect to MongoDB. This user should have privileges to read all the metadata in MongoDB.","type":"string"},"password":{"title":"Password","description":"Password to connect to MongoDB.","type":"string","format":"password"},"hostPort":{"title":"Host and Port","description":"Host and port of the MongoDB service.","type":"string"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}}},"additionalProperties":false,"required":["hostPort"]},{"type":"object","javaType":"org.openmetadata.schema.services.connections.database.mongo.MongoConnectionString","title":"Mongo Connection String","properties":{"connectionURI":{"title":"Connection URI","description":"Connection URI to connect to your MongoDB cluster","type":"string"}}}]},"databaseName":{"title":"Database Name","description":"Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.","type":"string"},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true}},"additionalProperties":false}'),w=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"MssqlConnection","description":"Mssql Database Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.MssqlConnection","definitions":{"mssqlType":{"description":"Service type.","type":"string","enum":["Mssql"],"default":"Mssql"},"mssqlScheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["mssql+pyodbc","mssql+pytds","mssql+pymssql"],"default":"mssql+pytds"}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"Mssql","type":"string","enum":["Mssql"]},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","default":"mssql+pytds","type":"string","enum":["mssql+pyodbc","mssql+pytds","mssql+pymssql"]},"username":{"title":"Username","description":"Username to connect to MSSQL. This user should have privileges to read all the metadata in MsSQL.","type":"string"},"password":{"title":"Password","description":"Password to connect to MSSQL.","type":"string","format":"password"},"hostPort":{"title":"Host and Port","description":"Host and port of the MSSQL service.","type":"string"},"database":{"title":"Database","description":"Database of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single database. When left blank, OpenMetadata Ingestion attempts to scan all the databases.","type":"string"},"driver":{"title":"Driver","description":"ODBC driver version in case of pyodbc connection.","type":"string","default":"ODBC Driver 18 for SQL Server"},"ingestAllDatabases":{"title":"Ingest All Databases","description":"Ingest data from all databases in Mssql. You can use databaseFilterPattern on top of this.","type":"boolean","default":false},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsDBTExtraction":{"description":"Supports DBT Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"supportsDatabase":{"title":"Supports Database","description":"The source service supports the database concept in its hierarchy","type":"boolean","default":true},"supportsUsageExtraction":{"description":"Supports Usage Extraction.","type":"boolean","default":true},"supportsLineageExtraction":{"description":"Supports Lineage Extraction.","type":"boolean","default":true},"sampleDataStorageConfig":{"title":"S3 Config for Sample Data","description":"Storage config to store sample data","type":"object","javaType":"org.openmetadata.schema.services.connections.database.SampleDataStorageConfig","properties":{"config":{"oneOf":[{"title":"Sample Data Storage Config","description":"Storage config to store sample data","type":"object","properties":{"bucketName":{"title":"Bucket Name","description":"Bucket Name","type":"string","default":""},"prefix":{"title":"Prefix","description":"Prefix of the data source.","type":"string","default":""},"overwriteData":{"title":"Overwrite Sample Data","description":"When this field enabled a single parquet file will be created to store sample data, otherwise we will create a new file per day","type":"boolean","default":true},"storageConfig":{"oneOf":[{"title":"AWS S3 Storage Config","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string","format":"uri"},"profileName":{"title":"Profile Name","description":"The name of a profile to use with the boto session.","type":"string"},"assumeRoleArn":{"title":"Role Arn for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role","type":"string"},"assumeRoleSessionName":{"title":"Role Session Name for Assume Role","description":"An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role","type":"string","default":"OpenMetadataSession"},"assumeRoleSourceIdentity":{"title":"Source Identity for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role","type":"string"}},"additionalProperties":false,"required":["awsRegion"]},{"title":"OpenMetadata Storage","type":"object","additionalProperties":false}]}}},{"title":"No Sample Data Storage Config","type":"object","additionalProperties":false}]}},"additionalProperties":false}},"additionalProperties":false,"required":["database"]}'),D=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"MysqlConnection","description":"Mysql Database Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.MysqlConnection","definitions":{"mySQLType":{"description":"Service type.","type":"string","enum":["Mysql"],"default":"Mysql"},"mySQLScheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["mysql+pymysql"],"default":"mysql+pymysql"}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"Mysql","type":"string","enum":["Mysql"]},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","default":"mysql+pymysql","type":"string","enum":["mysql+pymysql"]},"username":{"title":"Username","description":"Username to connect to MySQL. This user should have privileges to read all the metadata in Mysql.","type":"string"},"authType":{"title":"Auth Configuration Type","description":"Choose Auth Config Type.","oneOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"Basic Auth","description":"Common Database Connection Config","javaType":"org.openmetadata.schema.services.connections.database.common.basicAuth","type":"object","properties":{"password":{"title":"Password","description":"Password to connect to source.","type":"string","format":"password"}},"additionalProperties":false},{"$schema":"http://json-schema.org/draft-07/schema#","title":"IAM Auth Configuration Source","description":"IAM Auth Database Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.common.IamAuthConfig","properties":{"awsConfig":{"title":"AWS Credentials Configuration","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string","format":"uri"},"profileName":{"title":"Profile Name","description":"The name of a profile to use with the boto session.","type":"string"},"assumeRoleArn":{"title":"Role Arn for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role","type":"string"},"assumeRoleSessionName":{"title":"Role Session Name for Assume Role","description":"An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role","type":"string","default":"OpenMetadataSession"},"assumeRoleSourceIdentity":{"title":"Source Identity for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role","type":"string"}},"additionalProperties":false,"required":["awsRegion"]}},"additionalProperties":false}]},"hostPort":{"title":"Host and Port","description":"Host and port of the MySQL service.","type":"string"},"databaseName":{"title":"Database Name","description":"Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.","type":"string"},"databaseSchema":{"title":"Database Schema","description":"Database Schema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single schema. When left blank, OpenMetadata Ingestion attempts to scan all the schemas.","type":"string"},"sslCA":{"title":"SSL CA","description":"Provide the path to ssl ca file","type":"string"},"sslCert":{"title":"SSL Client Certificate File","description":"Provide the path to ssl client certificate file (ssl_cert)","type":"string"},"sslKey":{"title":"SSL Client Key File","description":"Provide the path to ssl client certificate file (ssl_key)","type":"string"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsDBTExtraction":{"description":"Supports DBT Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"supportsQueryComment":{"title":"Supports Query Comment","description":"For Database Services using SQLAlchemy, True to enable running a comment for all queries run from OpenMetadata.","type":"boolean","default":true},"sampleDataStorageConfig":{"title":"S3 Config for Sample Data","description":"Storage config to store sample data","type":"object","javaType":"org.openmetadata.schema.services.connections.database.SampleDataStorageConfig","properties":{"config":{"oneOf":[{"title":"Sample Data Storage Config","description":"Storage config to store sample data","type":"object","properties":{"bucketName":{"title":"Bucket Name","description":"Bucket Name","type":"string","default":""},"prefix":{"title":"Prefix","description":"Prefix of the data source.","type":"string","default":""},"overwriteData":{"title":"Overwrite Sample Data","description":"When this field enabled a single parquet file will be created to store sample data, otherwise we will create a new file per day","type":"boolean","default":true},"storageConfig":{"oneOf":[{"title":"AWS S3 Storage Config","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string","format":"uri"},"profileName":{"title":"Profile Name","description":"The name of a profile to use with the boto session.","type":"string"},"assumeRoleArn":{"title":"Role Arn for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role","type":"string"},"assumeRoleSessionName":{"title":"Role Session Name for Assume Role","description":"An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role","type":"string","default":"OpenMetadataSession"},"assumeRoleSourceIdentity":{"title":"Source Identity for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role","type":"string"}},"additionalProperties":false,"required":["awsRegion"]},{"title":"OpenMetadata Storage","type":"object","additionalProperties":false}]}}},{"title":"No Sample Data Storage Config","type":"object","additionalProperties":false}]}},"additionalProperties":false}},"additionalProperties":false,"required":["hostPort","username"]}'),j=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"OracleConnection","description":"Oracle Database Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.OracleConnection","definitions":{"oracleType":{"description":"Service type.","type":"string","enum":["Oracle"],"default":"Oracle"},"oracleScheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["oracle+cx_oracle"],"default":"oracle+cx_oracle"},"OracleDatabaseSchema":{"title":"Database Schema","type":"object","properties":{"databaseSchema":{"title":"DatabaseSchema","description":"databaseSchema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single databaseSchema. When left blank, OpenMetadata Ingestion attempts to scan all the databaseSchema.","type":"string"}},"required":["databaseSchema"]},"OracleServiceName":{"title":"Oracle Service Name","type":"object","properties":{"oracleServiceName":{"title":"Oracle Service Name","description":"The Oracle Service name is the TNS alias that you give when you remotely connect to your database.","type":"string"}},"required":["oracleServiceName"]},"OracleTNSConnection":{"title":"Oracle TNS Connection","type":"object","properties":{"oracleTNSConnection":{"title":"Oracle TNS Connection String","description":"Pass the full constructed TNS string, e.g., (DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=myhost)(PORT=1530)))(CONNECT_DATA=(SID=MYSERVICENAME))).","type":"string"}},"required":["oracleTNSConnection"]}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"Oracle","type":"string","enum":["Oracle"]},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","default":"oracle+cx_oracle","type":"string","enum":["oracle+cx_oracle"]},"username":{"title":"Username","description":"Username to connect to Oracle. This user should have privileges to read all the metadata in Oracle.","type":"string"},"password":{"title":"Password","description":"Password to connect to Oracle.","type":"string","format":"password"},"hostPort":{"title":"Host and Port","description":"Host and port of the Oracle service.","type":"string"},"oracleConnectionType":{"title":"Oracle Connection Type","type":"object","description":"Connect with oracle by either passing service name or database schema name.","oneOf":[{"title":"Database Schema","type":"object","properties":{"databaseSchema":{"title":"DatabaseSchema","description":"databaseSchema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single databaseSchema. When left blank, OpenMetadata Ingestion attempts to scan all the databaseSchema.","type":"string"}},"required":["databaseSchema"]},{"title":"Oracle Service Name","type":"object","properties":{"oracleServiceName":{"title":"Oracle Service Name","description":"The Oracle Service name is the TNS alias that you give when you remotely connect to your database.","type":"string"}},"required":["oracleServiceName"]},{"title":"Oracle TNS Connection","type":"object","properties":{"oracleTNSConnection":{"title":"Oracle TNS Connection String","description":"Pass the full constructed TNS string, e.g., (DESCRIPTION=(ADDRESS_LIST=(ADDRESS=(PROTOCOL=TCP)(HOST=myhost)(PORT=1530)))(CONNECT_DATA=(SID=MYSERVICENAME))).","type":"string"}},"required":["oracleTNSConnection"]}]},"instantClientDirectory":{"title":"Oracle instant client directory","type":"string","description":"This directory will be used to set the LD_LIBRARY_PATH env variable. It is required if you need to enable thick connection mode. By default, we bring instant client 19 and point to /instantclient.","default":"/instantclient"},"databaseName":{"title":"Database Name","description":"Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.","type":"string"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsUsageExtraction":{"description":"Supports Usage Extraction.","type":"boolean","default":true},"supportsLineageExtraction":{"description":"Supports Lineage Extraction.","type":"boolean","default":true},"supportsDBTExtraction":{"description":"Supports DBT Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"supportsQueryComment":{"title":"Supports Query Comment","description":"For Database Services using SQLAlchemy, True to enable running a comment for all queries run from OpenMetadata.","type":"boolean","default":true},"sampleDataStorageConfig":{"title":"S3 Config for Sample Data","description":"Storage config to store sample data","type":"object","javaType":"org.openmetadata.schema.services.connections.database.SampleDataStorageConfig","properties":{"config":{"oneOf":[{"title":"Sample Data Storage Config","description":"Storage config to store sample data","type":"object","properties":{"bucketName":{"title":"Bucket Name","description":"Bucket Name","type":"string","default":""},"prefix":{"title":"Prefix","description":"Prefix of the data source.","type":"string","default":""},"overwriteData":{"title":"Overwrite Sample Data","description":"When this field enabled a single parquet file will be created to store sample data, otherwise we will create a new file per day","type":"boolean","default":true},"storageConfig":{"oneOf":[{"title":"AWS S3 Storage Config","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string","format":"uri"},"profileName":{"title":"Profile Name","description":"The name of a profile to use with the boto session.","type":"string"},"assumeRoleArn":{"title":"Role Arn for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role","type":"string"},"assumeRoleSessionName":{"title":"Role Session Name for Assume Role","description":"An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role","type":"string","default":"OpenMetadataSession"},"assumeRoleSourceIdentity":{"title":"Source Identity for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role","type":"string"}},"additionalProperties":false,"required":["awsRegion"]},{"title":"OpenMetadata Storage","type":"object","additionalProperties":false}]}}},{"title":"No Sample Data Storage Config","type":"object","additionalProperties":false}]}},"additionalProperties":false}},"additionalProperties":false,"required":["username","oracleConnectionType"]}'),N=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"PinotDBConnection","description":"PinotDB Database Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.PinotDBConnection","definitions":{"pinotDBType":{"description":"Service type.","type":"string","enum":["PinotDB"],"default":"PinotDB"},"pinotDBScheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["pinot","pinot+http","pinot+https"],"default":"pinot"}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"PinotDB","type":"string","enum":["PinotDB"]},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","default":"pinot","type":"string","enum":["pinot","pinot+http","pinot+https"]},"username":{"title":"Username","description":"username to connect  to the PinotDB. This user should have privileges to read all the metadata in PinotDB.","type":"string"},"password":{"title":"Password","description":"password to connect  to the PinotDB.","type":"string","format":"password"},"hostPort":{"title":"Host and Port","description":"Host and port of the PinotDB service.","type":"string"},"pinotControllerHost":{"title":"Pinot Broker Host and Port","description":"Pinot Broker Host and Port of the data source.","type":"string"},"database":{"title":"Database","description":"Database of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single database. When left blank, OpenMetadata Ingestion attempts to scan all the databases.","type":"string"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsDBTExtraction":{"description":"Supports DBT Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"supportsQueryComment":{"title":"Supports Query Comment","description":"For Database Services using SQLAlchemy, True to enable running a comment for all queries run from OpenMetadata.","type":"boolean","default":true},"sampleDataStorageConfig":{"title":"S3 Config for Sample Data","description":"Storage config to store sample data","type":"object","javaType":"org.openmetadata.schema.services.connections.database.SampleDataStorageConfig","properties":{"config":{"oneOf":[{"title":"Sample Data Storage Config","description":"Storage config to store sample data","type":"object","properties":{"bucketName":{"title":"Bucket Name","description":"Bucket Name","type":"string","default":""},"prefix":{"title":"Prefix","description":"Prefix of the data source.","type":"string","default":""},"overwriteData":{"title":"Overwrite Sample Data","description":"When this field enabled a single parquet file will be created to store sample data, otherwise we will create a new file per day","type":"boolean","default":true},"storageConfig":{"oneOf":[{"title":"AWS S3 Storage Config","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string","format":"uri"},"profileName":{"title":"Profile Name","description":"The name of a profile to use with the boto session.","type":"string"},"assumeRoleArn":{"title":"Role Arn for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role","type":"string"},"assumeRoleSessionName":{"title":"Role Session Name for Assume Role","description":"An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role","type":"string","default":"OpenMetadataSession"},"assumeRoleSourceIdentity":{"title":"Source Identity for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role","type":"string"}},"additionalProperties":false,"required":["awsRegion"]},{"title":"OpenMetadata Storage","type":"object","additionalProperties":false}]}}},{"title":"No Sample Data Storage Config","type":"object","additionalProperties":false}]}},"additionalProperties":false}},"additionalProperties":false,"required":["hostPort","pinotControllerHost"]}'),O=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"PostgresConnection","description":"Postgres Database Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.PostgresConnection","definitions":{"postgresType":{"description":"Service type.","type":"string","enum":["Postgres"],"default":"Postgres"},"postgresScheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["postgresql+psycopg2","pgspider+psycopg2"],"default":"postgresql+psycopg2"}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"Postgres","type":"string","enum":["Postgres"]},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","default":"postgresql+psycopg2","type":"string","enum":["postgresql+psycopg2","pgspider+psycopg2"]},"username":{"title":"Username","description":"Username to connect to Postgres. This user should have privileges to read all the metadata in Postgres.","type":"string"},"authType":{"title":"Auth Configuration Type","description":"Choose Auth Config Type.","oneOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"Basic Auth","description":"Common Database Connection Config","javaType":"org.openmetadata.schema.services.connections.database.common.basicAuth","type":"object","properties":{"password":{"title":"Password","description":"Password to connect to source.","type":"string","format":"password"}},"additionalProperties":false},{"$schema":"http://json-schema.org/draft-07/schema#","title":"IAM Auth Configuration Source","description":"IAM Auth Database Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.common.IamAuthConfig","properties":{"awsConfig":{"title":"AWS Credentials Configuration","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string","format":"uri"},"profileName":{"title":"Profile Name","description":"The name of a profile to use with the boto session.","type":"string"},"assumeRoleArn":{"title":"Role Arn for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role","type":"string"},"assumeRoleSessionName":{"title":"Role Session Name for Assume Role","description":"An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role","type":"string","default":"OpenMetadataSession"},"assumeRoleSourceIdentity":{"title":"Source Identity for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role","type":"string"}},"additionalProperties":false,"required":["awsRegion"]}},"additionalProperties":false}]},"hostPort":{"title":"Host and Port","description":"Host and port of the source service.","type":"string"},"database":{"title":"Database","description":"Database of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single database. When left blank, OpenMetadata Ingestion attempts to scan all the databases.","type":"string"},"ingestAllDatabases":{"title":"Ingest All Databases","description":"Ingest data from all databases in Postgres. You can use databaseFilterPattern on top of this.","type":"boolean","default":false},"sslMode":{"title":"SSL Mode","description":"SSL Mode to connect to postgres database.","enum":["disable","allow","prefer","require","verify-ca","verify-full"],"default":"disable"},"sslConfig":{"title":"SSL Config","description":"Client SSL configuration","javaType":"org.openmetadata.schema.security.ssl.SSLConfig","oneOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"Validate SSL Client Config","description":"OpenMetadata Client configured to validate SSL certificates.","type":"object","javaType":"org.openmetadata.schema.security.ssl.ValidateSSLClientConfig","properties":{"certificatePath":{"title":"Certificate Path","description":"CA certificate path. E.g., /path/to/public.cert. Will be used if Verify SSL is set to `validate`.","type":"string"}},"additionalProperties":false}]},"classificationName":{"title":"Classification Name","description":"Custom OpenMetadata Classification name for Postgres policy tags.","type":"string","default":"PostgresPolicyTags"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsUsageExtraction":{"description":"Supports Usage Extraction.","type":"boolean","default":true},"supportsLineageExtraction":{"description":"Supports Lineage Extraction.","type":"boolean","default":true},"supportsDBTExtraction":{"description":"Supports DBT Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"supportsDatabase":{"title":"Supports Database","description":"The source service supports the database concept in its hierarchy","type":"boolean","default":true},"supportsQueryComment":{"title":"Supports Query Comment","description":"For Database Services using SQLAlchemy, True to enable running a comment for all queries run from OpenMetadata.","type":"boolean","default":true},"sampleDataStorageConfig":{"title":"S3 Config for Sample Data","description":"Storage config to store sample data","type":"object","javaType":"org.openmetadata.schema.services.connections.database.SampleDataStorageConfig","properties":{"config":{"oneOf":[{"title":"Sample Data Storage Config","description":"Storage config to store sample data","type":"object","properties":{"bucketName":{"title":"Bucket Name","description":"Bucket Name","type":"string","default":""},"prefix":{"title":"Prefix","description":"Prefix of the data source.","type":"string","default":""},"overwriteData":{"title":"Overwrite Sample Data","description":"When this field enabled a single parquet file will be created to store sample data, otherwise we will create a new file per day","type":"boolean","default":true},"storageConfig":{"oneOf":[{"title":"AWS S3 Storage Config","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string","format":"uri"},"profileName":{"title":"Profile Name","description":"The name of a profile to use with the boto session.","type":"string"},"assumeRoleArn":{"title":"Role Arn for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role","type":"string"},"assumeRoleSessionName":{"title":"Role Session Name for Assume Role","description":"An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role","type":"string","default":"OpenMetadataSession"},"assumeRoleSourceIdentity":{"title":"Source Identity for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role","type":"string"}},"additionalProperties":false,"required":["awsRegion"]},{"title":"OpenMetadata Storage","type":"object","additionalProperties":false}]}}},{"title":"No Sample Data Storage Config","type":"object","additionalProperties":false}]}},"additionalProperties":false}},"additionalProperties":false,"required":["hostPort","username","database"]}'),k=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"SapsybaseiqConnection","description":"Sapsybaseiq Database Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.SapsybaseiqConnection","definitions":{"sapsybaseiqType":{"description":"Service type.","type":"string","enum":["Sapsybaseiq"],"default":"Sapsybaseiq"},"sapsybaseiqScheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["sqlalchemy_sqlany"],"default":"sqlalchemy_sqlany"}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"Sapsybaseiq","type":"string","enum":["Sapsybaseiq"]},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","default":"sqlalchemy_sqlany","type":"string","enum":["sqlalchemy_sqlany"]},"username":{"title":"Username","description":"Username to connect to Sapsybaseiq. This user should have privileges to read all the metadata in Sapsybaseiq.","type":"string"},"password":{"title":"Password","description":"Password to connect to Sapsybaseiq.","type":"string","format":"password"},"hostPort":{"title":"Host and Port","description":"Host and port of the Sapsybaseiq service.","type":"string"},"database":{"title":"Database","description":"Database of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single database. When left blank, OpenMetadata Ingestion attempts to scan all the databases.","type":"string"},"driver":{"title":"Driver","description":"ODBC driver version in case of pyodbc connection.","type":"string","default":"ODBC Driver 18 for SQL Server"},"ingestAllDatabases":{"title":"Ingest All Databases","description":"Ingest data from all databases in Sapsybaseiq. You can use databaseFilterPattern on top of this.","type":"boolean","default":false},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsDBTExtraction":{"description":"Supports DBT Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"supportsDatabase":{"title":"Supports Database","description":"The source service supports the database concept in its hierarchy","type":"boolean","default":true},"supportsUsageExtraction":{"description":"Supports Usage Extraction.","type":"boolean","default":true},"supportsLineageExtraction":{"description":"Supports Lineage Extraction.","type":"boolean","default":true},"sampleDataStorageConfig":{"title":"S3 Config for Sample Data","description":"Storage config to store sample data","type":"object","javaType":"org.openmetadata.schema.services.connections.database.SampleDataStorageConfig","properties":{"config":{"oneOf":[{"title":"Sample Data Storage Config","description":"Storage config to store sample data","type":"object","properties":{"bucketName":{"title":"Bucket Name","description":"Bucket Name","type":"string","default":""},"prefix":{"title":"Prefix","description":"Prefix of the data source.","type":"string","default":""},"overwriteData":{"title":"Overwrite Sample Data","description":"When this field enabled a single parquet file will be created to store sample data, otherwise we will create a new file per day","type":"boolean","default":true},"storageConfig":{"oneOf":[{"title":"AWS S3 Storage Config","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string","format":"uri"},"profileName":{"title":"Profile Name","description":"The name of a profile to use with the boto session.","type":"string"},"assumeRoleArn":{"title":"Role Arn for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role","type":"string"},"assumeRoleSessionName":{"title":"Role Session Name for Assume Role","description":"An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role","type":"string","default":"OpenMetadataSession"},"assumeRoleSourceIdentity":{"title":"Source Identity for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role","type":"string"}},"additionalProperties":false,"required":["awsRegion"]},{"title":"OpenMetadata Storage","type":"object","additionalProperties":false}]}}},{"title":"No Sample Data Storage Config","type":"object","additionalProperties":false}]}},"additionalProperties":false}},"additionalProperties":false,"required":["database"]}'),W=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"PrestoConnection","description":"Presto Database Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.PrestoConnection","definitions":{"prestoType":{"description":"Service type.","type":"string","enum":["Presto"],"default":"Presto"},"prestoScheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["presto"],"default":"presto"}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"Presto","type":"string","enum":["Presto"]},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","default":"presto","type":"string","enum":["presto"]},"username":{"title":"Username","description":"Username to connect to Presto. This user should have privileges to read all the metadata in Postgres.","type":"string"},"password":{"title":"Password","description":"Password to connect to Presto.","type":"string","format":"password"},"hostPort":{"title":"Host and Port","description":"Host and port of the Presto service.","type":"string"},"databaseSchema":{"title":"Database Schema","description":"Database Schema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single schema. When left blank, OpenMetadata Ingestion attempts to scan all the schemas.","type":"string"},"catalog":{"title":"Catalog","description":"Presto catalog","type":"string"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsDBTExtraction":{"description":"Supports DBT Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"supportsDatabase":{"title":"Supports Database","description":"The source service supports the database concept in its hierarchy","type":"boolean","default":true},"supportsQueryComment":{"title":"Supports Query Comment","description":"For Database Services using SQLAlchemy, True to enable running a comment for all queries run from OpenMetadata.","type":"boolean","default":true},"sampleDataStorageConfig":{"title":"S3 Config for Sample Data","description":"Storage config to store sample data","type":"object","javaType":"org.openmetadata.schema.services.connections.database.SampleDataStorageConfig","properties":{"config":{"oneOf":[{"title":"Sample Data Storage Config","description":"Storage config to store sample data","type":"object","properties":{"bucketName":{"title":"Bucket Name","description":"Bucket Name","type":"string","default":""},"prefix":{"title":"Prefix","description":"Prefix of the data source.","type":"string","default":""},"overwriteData":{"title":"Overwrite Sample Data","description":"When this field enabled a single parquet file will be created to store sample data, otherwise we will create a new file per day","type":"boolean","default":true},"storageConfig":{"oneOf":[{"title":"AWS S3 Storage Config","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string","format":"uri"},"profileName":{"title":"Profile Name","description":"The name of a profile to use with the boto session.","type":"string"},"assumeRoleArn":{"title":"Role Arn for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role","type":"string"},"assumeRoleSessionName":{"title":"Role Session Name for Assume Role","description":"An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role","type":"string","default":"OpenMetadataSession"},"assumeRoleSourceIdentity":{"title":"Source Identity for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role","type":"string"}},"additionalProperties":false,"required":["awsRegion"]},{"title":"OpenMetadata Storage","type":"object","additionalProperties":false}]}}},{"title":"No Sample Data Storage Config","type":"object","additionalProperties":false}]}},"additionalProperties":false}},"additionalProperties":false,"required":["hostPort","username"]}'),M=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"RedshiftConnection","description":"Redshift  Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.RedshiftConnection","definitions":{"redshiftType":{"description":"Service type.","type":"string","enum":["Redshift"],"default":"Redshift"},"redshiftScheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["redshift+psycopg2"],"default":"redshift+psycopg2"}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"Redshift","type":"string","enum":["Redshift"]},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","default":"redshift+psycopg2","type":"string","enum":["redshift+psycopg2"]},"username":{"title":"Username","description":"Username to connect to Redshift. This user should have privileges to read all the metadata in Redshift.","type":"string"},"password":{"title":"Password","description":"Password to connect to Redshift.","type":"string","format":"password"},"hostPort":{"title":"Host and Port","description":"Host and port of the Redshift service.","type":"string"},"database":{"title":"Database","description":"Initial Redshift database to connect to. If you want to ingest all databases, set ingestAllDatabases to true.","type":"string"},"ingestAllDatabases":{"title":"Ingest All Databases","description":"Ingest data from all databases in Redshift. You can use databaseFilterPattern on top of this.","type":"boolean","default":false},"sslMode":{"title":"SSL Mode","description":"SSL Mode to connect to redshift database.","enum":["disable","allow","prefer","require","verify-ca","verify-full"],"default":"disable"},"sslConfig":{"title":"SSL Config","description":"Client SSL configuration","javaType":"org.openmetadata.schema.security.ssl.SSLConfig","oneOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"Validate SSL Client Config","description":"OpenMetadata Client configured to validate SSL certificates.","type":"object","javaType":"org.openmetadata.schema.security.ssl.ValidateSSLClientConfig","properties":{"certificatePath":{"title":"Certificate Path","description":"CA certificate path. E.g., /path/to/public.cert. Will be used if Verify SSL is set to `validate`.","type":"string"}},"additionalProperties":false}]},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsUsageExtraction":{"description":"Supports Usage Extraction.","type":"boolean","default":true},"supportsLineageExtraction":{"description":"Supports Lineage Extraction.","type":"boolean","default":true},"supportsDBTExtraction":{"description":"Supports DBT Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"supportsDatabase":{"title":"Supports Database","description":"The source service supports the database concept in its hierarchy","type":"boolean","default":true},"supportsQueryComment":{"title":"Supports Query Comment","description":"For Database Services using SQLAlchemy, True to enable running a comment for all queries run from OpenMetadata.","type":"boolean","default":true},"sampleDataStorageConfig":{"title":"S3 Config for Sample Data","description":"Storage config to store sample data","type":"object","javaType":"org.openmetadata.schema.services.connections.database.SampleDataStorageConfig","properties":{"config":{"oneOf":[{"title":"Sample Data Storage Config","description":"Storage config to store sample data","type":"object","properties":{"bucketName":{"title":"Bucket Name","description":"Bucket Name","type":"string","default":""},"prefix":{"title":"Prefix","description":"Prefix of the data source.","type":"string","default":""},"overwriteData":{"title":"Overwrite Sample Data","description":"When this field enabled a single parquet file will be created to store sample data, otherwise we will create a new file per day","type":"boolean","default":true},"storageConfig":{"oneOf":[{"title":"AWS S3 Storage Config","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string","format":"uri"},"profileName":{"title":"Profile Name","description":"The name of a profile to use with the boto session.","type":"string"},"assumeRoleArn":{"title":"Role Arn for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role","type":"string"},"assumeRoleSessionName":{"title":"Role Session Name for Assume Role","description":"An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role","type":"string","default":"OpenMetadataSession"},"assumeRoleSourceIdentity":{"title":"Source Identity for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role","type":"string"}},"additionalProperties":false,"required":["awsRegion"]},{"title":"OpenMetadata Storage","type":"object","additionalProperties":false}]}}},{"title":"No Sample Data Storage Config","type":"object","additionalProperties":false}]}},"additionalProperties":false}},"additionalProperties":false,"required":["hostPort","username","database"]}'),L=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"SalesforceConnection","description":"Salesforce Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.SalesforceConnection","definitions":{"salesforceType":{"description":"Service type.","type":"string","enum":["Salesforce"],"default":"Salesforce"}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"Salesforce","type":"string","enum":["Salesforce"]},"username":{"title":"Username","description":"Username to connect to the Salesforce. This user should have privileges to read all the metadata in Redshift.","type":"string"},"password":{"title":"Password","description":"Password to connect to the Salesforce.","type":"string","format":"password"},"securityToken":{"title":"Security Token","description":"Salesforce Security Token.","type":"string","format":"password"},"sobjectName":{"title":"Object Name","description":"Salesforce Object Name.","type":"string"},"databaseName":{"title":"Database Name","description":"Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.","type":"string"},"salesforceApiVersion":{"title":"Salesforce API Version","description":"API version of the Salesforce instance","type":"string","default":"42.0"},"salesforceDomain":{"title":"Salesforce Domain","description":"Domain of Salesforce instance","type":"string","default":"login"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true}},"additionalProperties":false,"required":["username"]}'),q=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"SapHanaConnection","description":"Sap Hana Database Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.SapHanaConnection","definitions":{"sapHanaType":{"description":"Service type.","type":"string","enum":["SapHana"],"default":"SapHana"},"sapHanaScheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["hana"],"default":"hana"},"sqlConnection":{"title":"SQL Connection","description":"Options to connect to SAP Hana by passing the database information","type":"object","properties":{"hostPort":{"title":"Host and Port","description":"Host and port of the Hana service.","type":"string"},"username":{"title":"Username","description":"Username to connect to Hana. This user should have privileges to read all the metadata.","type":"string"},"password":{"title":"Password","description":"Password to connect to Hana.","type":"string","format":"password"},"databaseSchema":{"title":"Database Schema","description":"Database Schema of the data source. This is an optional parameter, if you would like to restrict the metadata reading to a single schema. When left blank, OpenMetadata Ingestion attempts to scan all the schemas.","type":"string"},"database":{"title":"Database","description":"Database of the data source.","type":"string"}},"additionalProperties":false,"required":["username","password","hostPort"]},"hdbUserStoreConnection":{"title":"HDB User Store Connection","description":"Use HDB User Store to avoid entering connection-related information manually. This store needs to be present on the client running the ingestion.","type":"object","properties":{"userKey":{"title":"User Key","description":"HDB Store User Key generated from the command `hdbuserstore SET <KEY> <host:port> <USERNAME> <PASSWORD>`","type":"string"}},"additionalProperties":false}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"SapHana","type":"string","enum":["SapHana"]},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","default":"hana","type":"string","enum":["hana"]},"connection":{"mask":true,"title":"SAP Hana Connection","description":"Choose between Database connection or HDB User Store connection.","oneOf":[{"title":"SQL Connection","description":"Options to connect to SAP Hana by passing the database information","type":"object","properties":{"hostPort":{"title":"Host and Port","description":"Host and port of the Hana service.","type":"string"},"username":{"title":"Username","description":"Username to connect to Hana. This user should have privileges to read all the metadata.","type":"string"},"password":{"title":"Password","description":"Password to connect to Hana.","type":"string","format":"password"},"databaseSchema":{"title":"Database Schema","description":"Database Schema of the data source. This is an optional parameter, if you would like to restrict the metadata reading to a single schema. When left blank, OpenMetadata Ingestion attempts to scan all the schemas.","type":"string"},"database":{"title":"Database","description":"Database of the data source.","type":"string"}},"additionalProperties":false,"required":["username","password","hostPort"]},{"title":"HDB User Store Connection","description":"Use HDB User Store to avoid entering connection-related information manually. This store needs to be present on the client running the ingestion.","type":"object","properties":{"userKey":{"title":"User Key","description":"HDB Store User Key generated from the command `hdbuserstore SET <KEY> <host:port> <USERNAME> <PASSWORD>`","type":"string"}},"additionalProperties":false}]},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsDBTExtraction":{"description":"Supports DBT Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"supportsQueryComment":{"title":"Supports Query Comment","description":"For Database Services using SQLAlchemy, True to enable running a comment for all queries run from OpenMetadata.","type":"boolean","default":true},"sampleDataStorageConfig":{"title":"S3 Config for Sample Data","description":"Storage config to store sample data","type":"object","javaType":"org.openmetadata.schema.services.connections.database.SampleDataStorageConfig","properties":{"config":{"oneOf":[{"title":"Sample Data Storage Config","description":"Storage config to store sample data","type":"object","properties":{"bucketName":{"title":"Bucket Name","description":"Bucket Name","type":"string","default":""},"prefix":{"title":"Prefix","description":"Prefix of the data source.","type":"string","default":""},"overwriteData":{"title":"Overwrite Sample Data","description":"When this field enabled a single parquet file will be created to store sample data, otherwise we will create a new file per day","type":"boolean","default":true},"storageConfig":{"oneOf":[{"title":"AWS S3 Storage Config","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string","format":"uri"},"profileName":{"title":"Profile Name","description":"The name of a profile to use with the boto session.","type":"string"},"assumeRoleArn":{"title":"Role Arn for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role","type":"string"},"assumeRoleSessionName":{"title":"Role Session Name for Assume Role","description":"An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role","type":"string","default":"OpenMetadataSession"},"assumeRoleSourceIdentity":{"title":"Source Identity for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role","type":"string"}},"additionalProperties":false,"required":["awsRegion"]},{"title":"OpenMetadata Storage","type":"object","additionalProperties":false}]}}},{"title":"No Sample Data Storage Config","type":"object","additionalProperties":false}]}},"additionalProperties":false}},"additionalProperties":false,"required":["connection"]}'),I=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"SingleStoreConnection","description":"SingleStore Database Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.SingleStoreConnection","definitions":{"singleStoreType":{"description":"Service type.","type":"string","enum":["SingleStore"],"default":"SingleStore"},"singleStoreScheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["mysql+pymysql"],"default":"mysql+pymysql"}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"SingleStore","type":"string","enum":["SingleStore"]},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","default":"mysql+pymysql","type":"string","enum":["mysql+pymysql"]},"username":{"title":"Username","description":"Username to connect to SingleStore. This user should have privileges to read all the metadata in MySQL.","type":"string"},"password":{"title":"Password","description":"Password to connect to SingleStore.","type":"string","format":"password"},"hostPort":{"title":"Host and Port","description":"Host and port of the SingleStore service.","type":"string"},"databaseName":{"title":"Database Name","description":"Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.","type":"string"},"databaseSchema":{"title":"Database Schema","description":"Database Schema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single schema. When left blank, OpenMetadata Ingestion attempts to scan all the schemas.","type":"string"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsDBTExtraction":{"description":"Supports DBT Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"supportsQueryComment":{"title":"Supports Query Comment","description":"For Database Services using SQLAlchemy, True to enable running a comment for all queries run from OpenMetadata.","type":"boolean","default":true},"sampleDataStorageConfig":{"title":"S3 Config for Sample Data","description":"Storage config to store sample data","type":"object","javaType":"org.openmetadata.schema.services.connections.database.SampleDataStorageConfig","properties":{"config":{"oneOf":[{"title":"Sample Data Storage Config","description":"Storage config to store sample data","type":"object","properties":{"bucketName":{"title":"Bucket Name","description":"Bucket Name","type":"string","default":""},"prefix":{"title":"Prefix","description":"Prefix of the data source.","type":"string","default":""},"overwriteData":{"title":"Overwrite Sample Data","description":"When this field enabled a single parquet file will be created to store sample data, otherwise we will create a new file per day","type":"boolean","default":true},"storageConfig":{"oneOf":[{"title":"AWS S3 Storage Config","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string","format":"uri"},"profileName":{"title":"Profile Name","description":"The name of a profile to use with the boto session.","type":"string"},"assumeRoleArn":{"title":"Role Arn for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role","type":"string"},"assumeRoleSessionName":{"title":"Role Session Name for Assume Role","description":"An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role","type":"string","default":"OpenMetadataSession"},"assumeRoleSourceIdentity":{"title":"Source Identity for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role","type":"string"}},"additionalProperties":false,"required":["awsRegion"]},{"title":"OpenMetadata Storage","type":"object","additionalProperties":false}]}}},{"title":"No Sample Data Storage Config","type":"object","additionalProperties":false}]}},"additionalProperties":false}},"additionalProperties":false,"required":["hostPort","username"]}'),E=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"SnowflakeConnection","description":"Snowflake Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.SnowflakeConnection","definitions":{"snowflakeType":{"description":"Service type.","type":"string","enum":["Snowflake"],"default":"Snowflake"},"snowflakeScheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["snowflake"],"default":"snowflake"}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"Snowflake","type":"string","enum":["Snowflake"]},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","default":"snowflake","type":"string","enum":["snowflake"]},"username":{"title":"Username","description":"Username to connect to Snowflake. This user should have privileges to read all the metadata in Snowflake.","type":"string"},"password":{"title":"Password","description":"Password to connect to Snowflake.","type":"string","format":"password"},"account":{"title":"Account","description":"If the Snowflake URL is https://xyz1234.us-east-1.gcp.snowflakecomputing.com, then the account is xyz1234.us-east-1.gcp","type":"string"},"role":{"title":"Role","description":"Snowflake Role.","type":"string"},"database":{"title":"Database","description":"Database of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single database. When left blank, OpenMetadata Ingestion attempts to scan all the databases.","type":"string"},"warehouse":{"title":"Warehouse","description":"Snowflake warehouse.","type":"string"},"queryTag":{"title":"Query Tag","description":"Session query tag used to monitor usage on snowflake. To use a query tag snowflake user should have enough privileges to alter the session.","type":"string"},"privateKey":{"title":"Private Key","description":"Connection to Snowflake instance via Private Key","type":"string","format":"password"},"snowflakePrivatekeyPassphrase":{"title":"Snowflake Passphrase Key","description":"Snowflake Passphrase Key used with Private Key","type":"string","format":"password"},"includeTransientTables":{"title":"Include Transient Tables","description":"Optional configuration for ingestion of TRANSIENT tables, By default, it will skip the TRANSIENT tables.","type":"boolean","default":false},"clientSessionKeepAlive":{"title":"Client Session Keep Alive","description":"Optional configuration for ingestion to keep the client session active in case the ingestion process runs for longer durations.","type":"boolean","default":false},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsUsageExtraction":{"description":"Supports Usage Extraction.","type":"boolean","default":true},"supportsLineageExtraction":{"description":"Supports Lineage Extraction.","type":"boolean","default":true},"supportsDBTExtraction":{"description":"Supports DBT Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"supportsDatabase":{"title":"Supports Database","description":"The source service supports the database concept in its hierarchy","type":"boolean","default":true},"supportsQueryComment":{"title":"Supports Query Comment","description":"For Database Services using SQLAlchemy, True to enable running a comment for all queries run from OpenMetadata.","type":"boolean","default":true},"sampleDataStorageConfig":{"title":"S3 Config for Sample Data","description":"Storage config to store sample data","type":"object","javaType":"org.openmetadata.schema.services.connections.database.SampleDataStorageConfig","properties":{"config":{"oneOf":[{"title":"Sample Data Storage Config","description":"Storage config to store sample data","type":"object","properties":{"bucketName":{"title":"Bucket Name","description":"Bucket Name","type":"string","default":""},"prefix":{"title":"Prefix","description":"Prefix of the data source.","type":"string","default":""},"overwriteData":{"title":"Overwrite Sample Data","description":"When this field enabled a single parquet file will be created to store sample data, otherwise we will create a new file per day","type":"boolean","default":true},"storageConfig":{"oneOf":[{"title":"AWS S3 Storage Config","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string","format":"uri"},"profileName":{"title":"Profile Name","description":"The name of a profile to use with the boto session.","type":"string"},"assumeRoleArn":{"title":"Role Arn for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role","type":"string"},"assumeRoleSessionName":{"title":"Role Session Name for Assume Role","description":"An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role","type":"string","default":"OpenMetadataSession"},"assumeRoleSourceIdentity":{"title":"Source Identity for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role","type":"string"}},"additionalProperties":false,"required":["awsRegion"]},{"title":"OpenMetadata Storage","type":"object","additionalProperties":false}]}}},{"title":"No Sample Data Storage Config","type":"object","additionalProperties":false}]}},"additionalProperties":false}},"additionalProperties":false,"required":["username","account","warehouse"]}'),x=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"SQLiteConnection","description":"SQLite Database Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.SQLiteConnection","definitions":{"SQLiteType":{"description":"Service type.","type":"string","enum":["SQLite"],"default":"SQLite"},"SQLiteScheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["sqlite+pysqlite"],"default":"sqlite+pysqlite"}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"SQLite","type":"string","enum":["SQLite"]},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","default":"sqlite+pysqlite","type":"string","enum":["sqlite+pysqlite"]},"username":{"title":"Username","description":"Username to connect to SQLite. Blank for in-memory database.","type":"string"},"password":{"title":"Password","description":"Password to connect to SQLite. Blank for in-memory database.","type":"string","format":"password"},"hostPort":{"title":"Host and Port","description":"Host and port of the SQLite service. Blank for in-memory database.","type":"string"},"database":{"title":"Database","description":"Database of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single database. When left blank, OpenMetadata Ingestion attempts to scan all the databases.","type":"string"},"databaseMode":{"title":"Database Mode","description":"How to run the SQLite database. :memory: by default.","type":"string","default":":memory:"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsDBTExtraction":{"description":"Supports DBT Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"supportsQueryComment":{"title":"Supports Query Comment","description":"For Database Services using SQLAlchemy, True to enable running a comment for all queries run from OpenMetadata.","type":"boolean","default":true},"sampleDataStorageConfig":{"title":"S3 Config for Sample Data","description":"Storage config to store sample data","type":"object","javaType":"org.openmetadata.schema.services.connections.database.SampleDataStorageConfig","properties":{"config":{"oneOf":[{"title":"Sample Data Storage Config","description":"Storage config to store sample data","type":"object","properties":{"bucketName":{"title":"Bucket Name","description":"Bucket Name","type":"string","default":""},"prefix":{"title":"Prefix","description":"Prefix of the data source.","type":"string","default":""},"overwriteData":{"title":"Overwrite Sample Data","description":"When this field enabled a single parquet file will be created to store sample data, otherwise we will create a new file per day","type":"boolean","default":true},"storageConfig":{"oneOf":[{"title":"AWS S3 Storage Config","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string","format":"uri"},"profileName":{"title":"Profile Name","description":"The name of a profile to use with the boto session.","type":"string"},"assumeRoleArn":{"title":"Role Arn for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role","type":"string"},"assumeRoleSessionName":{"title":"Role Session Name for Assume Role","description":"An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role","type":"string","default":"OpenMetadataSession"},"assumeRoleSourceIdentity":{"title":"Source Identity for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role","type":"string"}},"additionalProperties":false,"required":["awsRegion"]},{"title":"OpenMetadata Storage","type":"object","additionalProperties":false}]}}},{"title":"No Sample Data Storage Config","type":"object","additionalProperties":false}]}},"additionalProperties":false}},"additionalProperties":false}'),U=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"TrinoConnection","description":"Trino Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.TrinoConnection","definitions":{"trinoType":{"description":"Service type.","type":"string","enum":["Trino"],"default":"Trino"},"trinoScheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["trino"],"default":"trino"}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"Trino","type":"string","enum":["Trino"]},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","default":"trino","type":"string","enum":["trino"]},"username":{"title":"Username","description":"Username to connect to Trino. This user should have privileges to read all the metadata in Trino.","type":"string"},"authType":{"title":"Auth Configuration Type","description":"Choose Auth Config Type.","oneOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"Basic Auth","description":"Common Database Connection Config","javaType":"org.openmetadata.schema.services.connections.database.common.basicAuth","type":"object","properties":{"password":{"title":"Password","description":"Password to connect to source.","type":"string","format":"password"}},"additionalProperties":false},{"$schema":"http://json-schema.org/draft-07/schema#","title":"JWT Auth","description":"Common Database Connection Config","javaType":"org.openmetadata.schema.services.connections.database.common.jwtAuth","type":"object","properties":{"jwt":{"title":"JWT","description":"JWT to connect to source.","type":"string","format":"password"}},"additionalProperties":false}]},"hostPort":{"title":"Host and Port","description":"Host and port of the Trino service.","type":"string"},"catalog":{"title":"Catalog","description":"Catalog of the data source.","type":"string"},"databaseSchema":{"title":"databaseSchema","description":"databaseSchema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single databaseSchema. When left blank, OpenMetadata Ingestion attempts to scan all the databaseSchema.","type":"string"},"proxies":{"title":"Proxies","description":"Proxies for the connection to Trino data source","type":"object","additionalProperties":{"type":"string"}},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsUsageExtraction":{"title":"Supports Usage Extraction","description":"Supports Usage Extraction.","type":"boolean","default":true},"supportsLineageExtraction":{"title":"Supports Lineage Extraction","description":"Supports Lineage Extraction.","type":"boolean","default":true},"supportsDBTExtraction":{"description":"Supports DBT Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"supportsDatabase":{"title":"Supports Database","description":"The source service supports the database concept in its hierarchy","type":"boolean","default":true},"supportsQueryComment":{"title":"Supports Query Comment","description":"For Database Services using SQLAlchemy, True to enable running a comment for all queries run from OpenMetadata.","type":"boolean","default":true},"sampleDataStorageConfig":{"title":"S3 Config for Sample Data","description":"Storage config to store sample data","type":"object","javaType":"org.openmetadata.schema.services.connections.database.SampleDataStorageConfig","properties":{"config":{"oneOf":[{"title":"Sample Data Storage Config","description":"Storage config to store sample data","type":"object","properties":{"bucketName":{"title":"Bucket Name","description":"Bucket Name","type":"string","default":""},"prefix":{"title":"Prefix","description":"Prefix of the data source.","type":"string","default":""},"overwriteData":{"title":"Overwrite Sample Data","description":"When this field enabled a single parquet file will be created to store sample data, otherwise we will create a new file per day","type":"boolean","default":true},"storageConfig":{"oneOf":[{"title":"AWS S3 Storage Config","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string","format":"uri"},"profileName":{"title":"Profile Name","description":"The name of a profile to use with the boto session.","type":"string"},"assumeRoleArn":{"title":"Role Arn for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role","type":"string"},"assumeRoleSessionName":{"title":"Role Session Name for Assume Role","description":"An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role","type":"string","default":"OpenMetadataSession"},"assumeRoleSourceIdentity":{"title":"Source Identity for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role","type":"string"}},"additionalProperties":false,"required":["awsRegion"]},{"title":"OpenMetadata Storage","type":"object","additionalProperties":false}]}}},{"title":"No Sample Data Storage Config","type":"object","additionalProperties":false}]}},"additionalProperties":false}},"additionalProperties":false,"required":["hostPort","username"]}'),K=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"VerticaConnection","description":"Vertica Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.VerticaConnection","definitions":{"verticaType":{"description":"Service type.","type":"string","enum":["Vertica"],"default":"Vertica"},"verticaScheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["vertica+vertica_python"],"default":"vertica+vertica_python"}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"Vertica","type":"string","enum":["Vertica"]},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","default":"vertica+vertica_python","type":"string","enum":["vertica+vertica_python"]},"username":{"title":"Username","description":"Username to connect to Vertica. This user should have privileges to read all the metadata in Vertica.","type":"string"},"password":{"title":"Password","description":"Password to connect to Vertica.","type":"string","format":"password"},"hostPort":{"title":"Host and Port","description":"Host and port of the Vertica service.","type":"string"},"database":{"title":"Database","description":"Database of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single database. When left blank, OpenMetadata Ingestion attempts to scan all the databases.","type":"string"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsUsageExtraction":{"description":"Supports Usage Extraction.","type":"boolean","default":true},"supportsLineageExtraction":{"description":"Supports Lineage Extraction.","type":"boolean","default":true},"supportsDBTExtraction":{"description":"Supports DBT Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"supportsDatabase":{"title":"Supports Database","description":"The source service supports the database concept in its hierarchy","type":"boolean","default":true},"supportsQueryComment":{"title":"Supports Query Comment","description":"For Database Services using SQLAlchemy, True to enable running a comment for all queries run from OpenMetadata.","type":"boolean","default":true},"sampleDataStorageConfig":{"title":"S3 Config for Sample Data","description":"Storage config to store sample data","type":"object","javaType":"org.openmetadata.schema.services.connections.database.SampleDataStorageConfig","properties":{"config":{"oneOf":[{"title":"Sample Data Storage Config","description":"Storage config to store sample data","type":"object","properties":{"bucketName":{"title":"Bucket Name","description":"Bucket Name","type":"string","default":""},"prefix":{"title":"Prefix","description":"Prefix of the data source.","type":"string","default":""},"overwriteData":{"title":"Overwrite Sample Data","description":"When this field enabled a single parquet file will be created to store sample data, otherwise we will create a new file per day","type":"boolean","default":true},"storageConfig":{"oneOf":[{"title":"AWS S3 Storage Config","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string","format":"uri"},"profileName":{"title":"Profile Name","description":"The name of a profile to use with the boto session.","type":"string"},"assumeRoleArn":{"title":"Role Arn for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role","type":"string"},"assumeRoleSessionName":{"title":"Role Session Name for Assume Role","description":"An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role","type":"string","default":"OpenMetadataSession"},"assumeRoleSourceIdentity":{"title":"Source Identity for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role","type":"string"}},"additionalProperties":false,"required":["awsRegion"]},{"title":"OpenMetadata Storage","type":"object","additionalProperties":false}]}}},{"title":"No Sample Data Storage Config","type":"object","additionalProperties":false}]}},"additionalProperties":false}},"additionalProperties":false,"required":["hostPort","username"]}'),B=function(e){var t={},i=(0,o.pi)({},a.Xy);switch(e){case n.yr.Athena:t=r;break;case n.yr.AzureSQL:t=c;break;case n.yr.BigQuery:t=p;break;case n.yr.Clickhouse:t=l;break;case n.yr.Databricks:t=m;break;case n.yr.Datalake:t=f;break;case n.yr.Db2:t=y;break;case n.yr.DeltaLake:t=g;break;case n.yr.Druid:t=S;break;case n.yr.DynamoDB:t=A;break;case n.yr.Glue:t=b;break;case n.yr.Hive:t=v;break;case n.yr.Impala:t=P;break;case n.yr.MariaDB:t=R;break;case n.yr.Mssql:t=w;break;case n.yr.Mysql:t=D;break;case n.yr.Oracle:t=j;break;case n.yr.Postgres:t=O;break;case n.yr.Presto:t=W;break;case n.yr.Redshift:t=M;break;case n.yr.Salesforce:t=L;break;case n.yr.SingleStore:t=I;break;case n.yr.Snowflake:t=E;break;case n.yr.SQLite:t=x;break;case n.yr.Trino:t=U;break;case n.yr.Vertica:t=K;break;case n.yr.CustomDatabase:t=u;break;case n.yr.DomoDatabase:t=h;break;case n.yr.SapHana:t=q;break;case n.yr.MongoDB:t=T;break;case n.yr.Couchbase:t=d;break;case n.yr.PinotDB:t=N;break;case n.yr.Greenplum:t=C;break;case n.yr.Sapsybaseiq:t=k;break;default:t={}}return(0,s.cloneDeep)({schema:t,uiSchema:i})}},73954:function(e,t,i){i.d(t,{J:function(){return l}});var o=i(70655),s=i(96486),a=i(55846),n=i(2798),r=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"AmundsenConnection","description":"Amundsen Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.metadata.AmundsenConnection","definitions":{"amundsenType":{"description":"Amundsen service type","type":"string","enum":["Amundsen"],"default":"Amundsen"}},"properties":{"type":{"description":"Service Type","default":"Amundsen","type":"string","enum":["Amundsen"]},"username":{"description":"username to connect to the Amundsen Neo4j Connection.","type":"string"},"password":{"description":"password to connect to the Amundsen Neo4j Connection.","type":"string","format":"password"},"hostPort":{"expose":true,"title":"Host and Port","description":"Host and port of the Amundsen Neo4j Connection. This expect a URI format like: bolt://localhost:7687.","type":"string","format":"uri"},"maxConnectionLifeTime":{"description":"Maximum connection lifetime for the Amundsen Neo4j Connection.","type":"integer","default":50},"validateSSL":{"description":"Enable SSL validation for the Amundsen Neo4j Connection.","type":"boolean","default":false},"encrypted":{"description":"Enable encryption for the Amundsen Neo4j Connection.","type":"boolean","default":false},"supportsMetadataExtraction":{"description":"Supports Metadata Extraction.","type":"boolean","default":true}},"required":["username","password","hostPort"],"additionalProperties":false}'),c=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"AtlasConnection","description":"Atlas Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.metadata.AtlasConnection","definitions":{"atlasType":{"description":"Service type.","type":"string","enum":["Atlas"],"default":"Atlas"}},"properties":{"type":{"description":"Service Type","default":"Atlas","type":"string","enum":["Atlas"]},"username":{"description":"username to connect  to the Atlas. This user should have privileges to read all the metadata in Atlas.","type":"string"},"password":{"description":"password to connect  to the Atlas.","type":"string","format":"password"},"hostPort":{"description":"Host and port of the Atlas service.","title":"Host and Port","type":"string","format":"uri","expose":true},"databaseServiceName":{"description":"service type of the data source.","type":"array","items":{"type":"string"}},"messagingServiceName":{"description":"service type of the messaging source","type":"array","items":{"type":"string"}},"entity_type":{"title":"Entity Type","description":"Name of the Entity Type available in Atlas.","type":"string"},"connectionOptions":{"javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"description":"Supports Metadata Extraction.","type":"boolean","default":true}},"required":["entity_type","username","password"],"additionalProperties":false}'),p=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"OpenMetadataConnection","description":"OpenMetadata Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.metadata.OpenMetadataConnection","definitions":{"openmetadataType":{"description":"OpenMetadata service type","type":"string","enum":["OpenMetadata"],"default":"OpenMetadata"},"extraHeaders":{"description":"Additional headers to be sent to the API endpoint.","type":"object","additionalProperties":{"type":"string"}},"authProvider":{"javaType":"org.openmetadata.schema.services.connections.metadata.AuthProvider","description":"OpenMetadata Server Authentication Provider. Make sure configure same auth providers as the one configured on OpenMetadata server.","type":"string","enum":["no-auth","basic","azure","google","okta","auth0","aws-cognito","custom-oidc","ldap","saml","openmetadata"],"default":"basic"}},"properties":{"clusterName":{"description":"Cluster name to differentiate OpenMetadata Server instance","type":"string","default":"openmetadata"},"type":{"description":"Service Type","default":"OpenMetadata","type":"string","enum":["OpenMetadata"]},"hostPort":{"description":"OpenMetadata Server Config. Must include API end point ex: http://localhost:8585/api","type":"string","default":"http://localhost:8585/api"},"authProvider":{"javaType":"org.openmetadata.schema.services.connections.metadata.AuthProvider","description":"OpenMetadata Server Authentication Provider. Make sure configure same auth providers as the one configured on OpenMetadata server.","type":"string","enum":["no-auth","basic","azure","google","okta","auth0","aws-cognito","custom-oidc","ldap","saml","openmetadata"],"default":"basic"},"verifySSL":{"default":"no-ssl","title":"Verify SSL","description":"Client SSL verification. Make sure to configure the SSLConfig if enabled.","javaType":"org.openmetadata.schema.security.ssl.VerifySSL","type":"string","enum":["no-ssl","ignore","validate"]},"sslConfig":{"title":"SSL Config","description":"Client SSL configuration","javaType":"org.openmetadata.schema.security.ssl.SSLConfig","oneOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"Validate SSL Client Config","description":"OpenMetadata Client configured to validate SSL certificates.","type":"object","javaType":"org.openmetadata.schema.security.ssl.ValidateSSLClientConfig","properties":{"certificatePath":{"title":"Certificate Path","description":"CA certificate path. E.g., /path/to/public.cert. Will be used if Verify SSL is set to `validate`.","type":"string"}},"additionalProperties":false}]},"securityConfig":{"mask":true,"description":"OpenMetadata Client security configuration.","oneOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"GoogleSSOClientConfig","description":"Google SSO client security configs.","type":"object","javaType":"org.openmetadata.schema.security.client.GoogleSSOClientConfig","properties":{"secretKey":{"description":"Google SSO client secret key path or contents.","type":"string","format":"password"},"audience":{"description":"Google SSO audience URL","type":"string","default":"https://www.googleapis.com/oauth2/v4/token"}},"additionalProperties":false,"required":["secretKey"]},{"$schema":"http://json-schema.org/draft-07/schema#","title":"OktaSSOClientConfig","description":"Okta SSO client security configs.","type":"object","javaType":"org.openmetadata.schema.security.client.OktaSSOClientConfig","properties":{"clientId":{"description":"Okta Client ID.","type":"string"},"orgURL":{"description":"Okta org url.","type":"string"},"privateKey":{"description":"Okta Private Key.","type":"string","format":"password"},"email":{"description":"Okta Service account Email.","type":"string"},"scopes":{"type":"array","description":"Okta client scopes.","items":{"type":"string"}}},"additionalProperties":false,"required":["clientId","orgURL","privateKey","email"]},{"$schema":"http://json-schema.org/draft-07/schema#","title":"Auth0SSOClientConfig","description":"Auth0 SSO client security configs.","type":"object","javaType":"org.openmetadata.schema.security.client.Auth0SSOClientConfig","properties":{"clientId":{"description":"Auth0 Client ID.","type":"string"},"secretKey":{"description":"Auth0 Client Secret Key.","type":"string","format":"password"},"domain":{"description":"Auth0 Domain.","type":"string"}},"additionalProperties":false,"required":["clientId","secretKey","domain"]},{"$schema":"http://json-schema.org/draft-07/schema#","title":"AzureSSOClientConfig","description":"Azure SSO Client security config to connect to OpenMetadata.","type":"object","javaType":"org.openmetadata.schema.security.client.AzureSSOClientConfig","properties":{"clientSecret":{"description":"Azure SSO client secret key","type":"string","format":"password"},"authority":{"description":"Azure SSO Authority","type":"string"},"clientId":{"description":"Azure Client ID.","type":"string"},"scopes":{"description":"Azure Client ID.","type":"array","items":{"type":"string"}}},"additionalProperties":false,"required":["clientSecret","clientId","authority","scopes"]},{"$schema":"http://json-schema.org/draft-07/schema#","title":"CustomOIDCSSOClientConfig","description":"Custom OIDC SSO client security configs.","type":"object","javaType":"org.openmetadata.schema.security.client.CustomOIDCSSOClientConfig","properties":{"clientId":{"description":"Custom OIDC Client ID.","type":"string"},"secretKey":{"description":"Custom OIDC Client Secret Key.","type":"string","format":"password"},"tokenEndpoint":{"description":"Custom OIDC token endpoint.","type":"string"}},"additionalProperties":false,"required":["clientId","secretKey","tokenEndpoint"]},{"$schema":"http://json-schema.org/draft-07/schema#","title":"openMetadataJWTClientConfig","description":"openMetadataJWTClientConfig security configs.","type":"object","javaType":"org.openmetadata.schema.security.client.OpenMetadataJWTClientConfig","properties":{"jwtToken":{"description":"OpenMetadata generated JWT token.","type":"string","format":"password"}},"additionalProperties":false,"required":["jwtToken"]}]},"secretsManagerProvider":{"default":"noop","$schema":"http://json-schema.org/draft-07/schema#","title":"Secrets Manager Provider","description":"OpenMetadata Secrets Manager Provider. Make sure to configure the same secrets manager providers as the ones configured on the OpenMetadata server.","type":"string","javaType":"org.openmetadata.schema.security.secrets.SecretsManagerProvider","enum":["noop","managed-aws","aws","managed-aws-ssm","aws-ssm","in-memory"],"additionalProperties":false},"secretsManagerLoader":{"default":"noop","$schema":"http://json-schema.org/draft-07/schema#","title":"Secrets Manager Client Loader","description":"OpenMetadata Secrets Manager Client Loader. Lets the client know how the Secrets Manager Credentials should be loaded from the environment.","type":"string","javaType":"org.openmetadata.schema.security.secrets.SecretsManagerClientLoader","enum":["noop","airflow","env"],"additionalProperties":false},"apiVersion":{"description":"OpenMetadata server API version to use.","type":"string","default":"v1"},"includeTopics":{"description":"Include Topics for Indexing","type":"boolean","default":true},"includeTables":{"description":"Include Tables for Indexing","type":"boolean","default":true},"includeDashboards":{"description":"Include Dashboards for Indexing","type":"boolean","default":true},"includePipelines":{"description":"Include Pipelines for Indexing","type":"boolean","default":true},"includeMlModels":{"description":"Include MlModels for Indexing","type":"boolean","default":true},"includeUsers":{"description":"Include Users for Indexing","type":"boolean","default":true},"includeTeams":{"description":"Include Teams for Indexing","type":"boolean","default":true},"includeGlossaryTerms":{"description":"Include Glossary Terms for Indexing","type":"boolean","default":true},"includeTags":{"description":"Include Tags for Indexing","type":"boolean","default":true},"includePolicy":{"description":"Include Tags for Policy","type":"boolean","default":true},"includeMessagingServices":{"description":"Include Messaging Services for Indexing","type":"boolean","default":true},"enableVersionValidation":{"description":"Validate Openmetadata Server & Client Version.","type":"boolean","default":true},"includeDatabaseServices":{"description":"Include Database Services for Indexing","type":"boolean","default":true},"includePipelineServices":{"description":"Include Pipeline Services for Indexing","type":"boolean","default":true},"limitRecords":{"description":"Limit the number of records for Indexing.","type":"integer","default":"1000"},"forceEntityOverwriting":{"description":"Force the overwriting of any entity during the ingestion.","type":"boolean","default":false},"storeServiceConnection":{"description":"If set to true, when creating a service during the ingestion we will store its Service Connection. Otherwise, the ingestion will create a bare service without connection details.","type":"boolean","default":true},"elasticsSearch":{"description":"Configuration for Sink Component in the OpenMetadata Ingestion Framework.","type":"object","properties":{"type":{"description":"Type of sink component ex: metadata","type":"string"},"config":{"description":"key/value pairs to pass to workflow component.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}}},"additionalProperties":false,"required":["type"]},"supportsDataInsightExtraction":{"description":"Support Metadata To Elastic Search","type":"boolean","default":true},"supportsElasticSearchReindexingExtraction":{"description":"Support Elastic Search Reindexing","type":"boolean","default":true},"extraHeaders":{"title":"Extra Headers","description":"Additional headers to be sent to the API endpoint.","type":"object","additionalProperties":{"type":"string"}}},"additionalProperties":false,"required":["hostPort"]}'),l=function(e){var t={},i=(0,o.pi)({},a.Xy);switch(e){case n.G5.Atlas:t=c;break;case n.G5.Amundsen:t=r;break;case n.G5.OpenMetadata:t=p}return(0,s.cloneDeep)({schema:t,uiSchema:i})}},26813:function(e,t,i){i.d(t,{$:function(){return d}});var o=i(70655),s=i(96486),a=i(55846),n=i(32997),r=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"CustomMlModelConnection","description":"Custom MlModel Service connection to build a source that is not supported by OpenMetadata yet.","type":"object","javaType":"org.openmetadata.schema.services.connections.mlmodel.CustomMlModelConnection","definitions":{"customMlModelType":{"title":"Service Type","description":"Custom Ml model service type","type":"string","enum":["CustomMlModel"],"default":"CustomMlModel"}},"properties":{"type":{"title":"Service Type","description":"Custom Ml model service type","default":"CustomMlModel","type":"string","enum":["CustomMlModel"]},"sourcePythonClass":{"title":"Source Python Class Name","description":"Source Python Class Name to instantiated by the ingestion workflow","type":"string"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}}},"additionalProperties":false,"required":["type"]}'),c=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"MlflowConnection","description":"MlFlow Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.mlmodel.MlflowConnection","definitions":{"mlflowType":{"description":"Service type.","type":"string","enum":["Mlflow"],"default":"Mlflow"}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"Mlflow","type":"string","enum":["Mlflow"]},"trackingUri":{"title":"Tracking URI","description":"Mlflow Experiment tracking URI. E.g., http://localhost:5000","type":"string"},"registryUri":{"title":"Registry URI","description":"Mlflow Model registry backend. E.g., mysql+pymysql://mlflow:password@localhost:3307/experiments","type":"string"},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true}},"additionalProperties":false,"required":["trackingUri","registryUri"]}'),p=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"SageMakerConnection","description":"SageMaker Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.mlmodel.SageMakerConnection","definitions":{"sageMakerType":{"description":"Service type.","type":"string","enum":["SageMaker"],"default":"SageMaker"}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"SageMaker","type":"string","enum":["SageMaker"]},"awsConfig":{"title":"AWS Credentials Configuration","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string","format":"uri"},"profileName":{"title":"Profile Name","description":"The name of a profile to use with the boto session.","type":"string"},"assumeRoleArn":{"title":"Role Arn for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role","type":"string"},"assumeRoleSessionName":{"title":"Role Session Name for Assume Role","description":"An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role","type":"string","default":"OpenMetadataSession"},"assumeRoleSourceIdentity":{"title":"Source Identity for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role","type":"string"}},"additionalProperties":false,"required":["awsRegion"]},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true}},"additionalProperties":false,"required":["awsConfig"]}'),l=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"SklearnConnection","description":"Sklearn Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.mlmodel.SklearnConnection","definitions":{"sklearnType":{"description":"Service type.","type":"string","enum":["Sklearn"],"default":"Sklearn"}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"Sklearn","type":"string","enum":["Sklearn"]},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true}},"additionalProperties":false}'),d=function(e){var t={},i=(0,o.pi)({},a.Xy);switch(e){case n.uK.Mlflow:t=c;break;case n.uK.Sklearn:t=l;break;case n.uK.CustomMlModel:t=r;break;case n.uK.SageMaker:t=p}return(0,s.cloneDeep)({schema:t,uiSchema:i})}},27800:function(e,t,i){i.d(t,{o:function(){return h}});var o=i(70655),s=i(96486),a=i(55846),n=i(9113),r=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"AirbyteConnection","description":"Airbyte Metadata Database Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.pipeline.AirbyteConnection","definitions":{"AirbyteType":{"description":"Service type.","type":"string","enum":["Airbyte"],"default":"Airbyte"}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"Airbyte","type":"string","enum":["Airbyte"]},"hostPort":{"expose":true,"description":"Pipeline Service Management/UI URL.","type":"string","format":"uri"},"username":{"title":"Username","description":"Username to connect to Airbyte.","type":"string"},"password":{"title":"Password","description":"Password to connect to Airbyte.","type":"string","format":"password"},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true}},"additionalProperties":false,"required":["hostPort"]}'),c=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"AirflowConnection","description":"Airflow Metadata Database Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.pipeline.AirflowConnection","definitions":{"AirflowType":{"description":"Service type.","type":"string","enum":["Airflow"],"default":"Airflow"}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"Airflow","type":"string","enum":["Airflow"]},"hostPort":{"expose":true,"title":"Host And Port","description":"Pipeline Service Management/UI URI.","type":"string","format":"uri"},"numberOfStatus":{"description":"Pipeline Service Number Of Status","type":"integer","default":"10"},"connection":{"title":"Metadata Database Connection","description":"Underlying database connection. See https://airflow.apache.org/docs/apache-airflow/stable/howto/set-up-database.html for supported backends.","oneOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"BackendConnection","description":"Lineage Backend Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.pipeline.BackendConnection","definitions":{"BackendType":{"description":"Service type.","type":"string","enum":["Backend"],"default":"Backend"}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"Backend","type":"string","enum":["Backend"]}},"additionalProperties":false},{"$schema":"http://json-schema.org/draft-07/schema#","title":"MysqlConnection","description":"Mysql Database Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.MysqlConnection","definitions":{"mySQLType":{"description":"Service type.","type":"string","enum":["Mysql"],"default":"Mysql"},"mySQLScheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["mysql+pymysql"],"default":"mysql+pymysql"}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"Mysql","type":"string","enum":["Mysql"]},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","default":"mysql+pymysql","type":"string","enum":["mysql+pymysql"]},"username":{"title":"Username","description":"Username to connect to MySQL. This user should have privileges to read all the metadata in Mysql.","type":"string"},"authType":{"title":"Auth Configuration Type","description":"Choose Auth Config Type.","oneOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"Basic Auth","description":"Common Database Connection Config","javaType":"org.openmetadata.schema.services.connections.database.common.basicAuth","type":"object","properties":{"password":{"title":"Password","description":"Password to connect to source.","type":"string","format":"password"}},"additionalProperties":false},{"$schema":"http://json-schema.org/draft-07/schema#","title":"IAM Auth Configuration Source","description":"IAM Auth Database Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.common.IamAuthConfig","properties":{"awsConfig":{"title":"AWS Credentials Configuration","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string","format":"uri"},"profileName":{"title":"Profile Name","description":"The name of a profile to use with the boto session.","type":"string"},"assumeRoleArn":{"title":"Role Arn for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role","type":"string"},"assumeRoleSessionName":{"title":"Role Session Name for Assume Role","description":"An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role","type":"string","default":"OpenMetadataSession"},"assumeRoleSourceIdentity":{"title":"Source Identity for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role","type":"string"}},"additionalProperties":false,"required":["awsRegion"]}},"additionalProperties":false}]},"hostPort":{"title":"Host and Port","description":"Host and port of the MySQL service.","type":"string"},"databaseName":{"title":"Database Name","description":"Optional name to give to the database in OpenMetadata. If left blank, we will use default as the database name.","type":"string"},"databaseSchema":{"title":"Database Schema","description":"Database Schema of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single schema. When left blank, OpenMetadata Ingestion attempts to scan all the schemas.","type":"string"},"sslCA":{"title":"SSL CA","description":"Provide the path to ssl ca file","type":"string"},"sslCert":{"title":"SSL Client Certificate File","description":"Provide the path to ssl client certificate file (ssl_cert)","type":"string"},"sslKey":{"title":"SSL Client Key File","description":"Provide the path to ssl client certificate file (ssl_key)","type":"string"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsDBTExtraction":{"description":"Supports DBT Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"supportsQueryComment":{"title":"Supports Query Comment","description":"For Database Services using SQLAlchemy, True to enable running a comment for all queries run from OpenMetadata.","type":"boolean","default":true},"sampleDataStorageConfig":{"title":"S3 Config for Sample Data","description":"Storage config to store sample data","type":"object","javaType":"org.openmetadata.schema.services.connections.database.SampleDataStorageConfig","properties":{"config":{"oneOf":[{"title":"Sample Data Storage Config","description":"Storage config to store sample data","type":"object","properties":{"bucketName":{"title":"Bucket Name","description":"Bucket Name","type":"string","default":""},"prefix":{"title":"Prefix","description":"Prefix of the data source.","type":"string","default":""},"overwriteData":{"title":"Overwrite Sample Data","description":"When this field enabled a single parquet file will be created to store sample data, otherwise we will create a new file per day","type":"boolean","default":true},"storageConfig":{"oneOf":[{"title":"AWS S3 Storage Config","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string","format":"uri"},"profileName":{"title":"Profile Name","description":"The name of a profile to use with the boto session.","type":"string"},"assumeRoleArn":{"title":"Role Arn for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role","type":"string"},"assumeRoleSessionName":{"title":"Role Session Name for Assume Role","description":"An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role","type":"string","default":"OpenMetadataSession"},"assumeRoleSourceIdentity":{"title":"Source Identity for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role","type":"string"}},"additionalProperties":false,"required":["awsRegion"]},{"title":"OpenMetadata Storage","type":"object","additionalProperties":false}]}}},{"title":"No Sample Data Storage Config","type":"object","additionalProperties":false}]}},"additionalProperties":false}},"additionalProperties":false,"required":["hostPort","username"]},{"$schema":"http://json-schema.org/draft-07/schema#","title":"PostgresConnection","description":"Postgres Database Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.PostgresConnection","definitions":{"postgresType":{"description":"Service type.","type":"string","enum":["Postgres"],"default":"Postgres"},"postgresScheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["postgresql+psycopg2","pgspider+psycopg2"],"default":"postgresql+psycopg2"}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"Postgres","type":"string","enum":["Postgres"]},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","default":"postgresql+psycopg2","type":"string","enum":["postgresql+psycopg2","pgspider+psycopg2"]},"username":{"title":"Username","description":"Username to connect to Postgres. This user should have privileges to read all the metadata in Postgres.","type":"string"},"authType":{"title":"Auth Configuration Type","description":"Choose Auth Config Type.","oneOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"Basic Auth","description":"Common Database Connection Config","javaType":"org.openmetadata.schema.services.connections.database.common.basicAuth","type":"object","properties":{"password":{"title":"Password","description":"Password to connect to source.","type":"string","format":"password"}},"additionalProperties":false},{"$schema":"http://json-schema.org/draft-07/schema#","title":"IAM Auth Configuration Source","description":"IAM Auth Database Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.common.IamAuthConfig","properties":{"awsConfig":{"title":"AWS Credentials Configuration","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string","format":"uri"},"profileName":{"title":"Profile Name","description":"The name of a profile to use with the boto session.","type":"string"},"assumeRoleArn":{"title":"Role Arn for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role","type":"string"},"assumeRoleSessionName":{"title":"Role Session Name for Assume Role","description":"An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role","type":"string","default":"OpenMetadataSession"},"assumeRoleSourceIdentity":{"title":"Source Identity for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role","type":"string"}},"additionalProperties":false,"required":["awsRegion"]}},"additionalProperties":false}]},"hostPort":{"title":"Host and Port","description":"Host and port of the source service.","type":"string"},"database":{"title":"Database","description":"Database of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single database. When left blank, OpenMetadata Ingestion attempts to scan all the databases.","type":"string"},"ingestAllDatabases":{"title":"Ingest All Databases","description":"Ingest data from all databases in Postgres. You can use databaseFilterPattern on top of this.","type":"boolean","default":false},"sslMode":{"title":"SSL Mode","description":"SSL Mode to connect to postgres database.","enum":["disable","allow","prefer","require","verify-ca","verify-full"],"default":"disable"},"sslConfig":{"title":"SSL Config","description":"Client SSL configuration","javaType":"org.openmetadata.schema.security.ssl.SSLConfig","oneOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"Validate SSL Client Config","description":"OpenMetadata Client configured to validate SSL certificates.","type":"object","javaType":"org.openmetadata.schema.security.ssl.ValidateSSLClientConfig","properties":{"certificatePath":{"title":"Certificate Path","description":"CA certificate path. E.g., /path/to/public.cert. Will be used if Verify SSL is set to `validate`.","type":"string"}},"additionalProperties":false}]},"classificationName":{"title":"Classification Name","description":"Custom OpenMetadata Classification name for Postgres policy tags.","type":"string","default":"PostgresPolicyTags"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsUsageExtraction":{"description":"Supports Usage Extraction.","type":"boolean","default":true},"supportsLineageExtraction":{"description":"Supports Lineage Extraction.","type":"boolean","default":true},"supportsDBTExtraction":{"description":"Supports DBT Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"supportsDatabase":{"title":"Supports Database","description":"The source service supports the database concept in its hierarchy","type":"boolean","default":true},"supportsQueryComment":{"title":"Supports Query Comment","description":"For Database Services using SQLAlchemy, True to enable running a comment for all queries run from OpenMetadata.","type":"boolean","default":true},"sampleDataStorageConfig":{"title":"S3 Config for Sample Data","description":"Storage config to store sample data","type":"object","javaType":"org.openmetadata.schema.services.connections.database.SampleDataStorageConfig","properties":{"config":{"oneOf":[{"title":"Sample Data Storage Config","description":"Storage config to store sample data","type":"object","properties":{"bucketName":{"title":"Bucket Name","description":"Bucket Name","type":"string","default":""},"prefix":{"title":"Prefix","description":"Prefix of the data source.","type":"string","default":""},"overwriteData":{"title":"Overwrite Sample Data","description":"When this field enabled a single parquet file will be created to store sample data, otherwise we will create a new file per day","type":"boolean","default":true},"storageConfig":{"oneOf":[{"title":"AWS S3 Storage Config","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string","format":"uri"},"profileName":{"title":"Profile Name","description":"The name of a profile to use with the boto session.","type":"string"},"assumeRoleArn":{"title":"Role Arn for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role","type":"string"},"assumeRoleSessionName":{"title":"Role Session Name for Assume Role","description":"An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role","type":"string","default":"OpenMetadataSession"},"assumeRoleSourceIdentity":{"title":"Source Identity for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role","type":"string"}},"additionalProperties":false,"required":["awsRegion"]},{"title":"OpenMetadata Storage","type":"object","additionalProperties":false}]}}},{"title":"No Sample Data Storage Config","type":"object","additionalProperties":false}]}},"additionalProperties":false}},"additionalProperties":false,"required":["hostPort","username","database"]},{"$schema":"http://json-schema.org/draft-07/schema#","title":"MssqlConnection","description":"Mssql Database Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.MssqlConnection","definitions":{"mssqlType":{"description":"Service type.","type":"string","enum":["Mssql"],"default":"Mssql"},"mssqlScheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["mssql+pyodbc","mssql+pytds","mssql+pymssql"],"default":"mssql+pytds"}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"Mssql","type":"string","enum":["Mssql"]},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","default":"mssql+pytds","type":"string","enum":["mssql+pyodbc","mssql+pytds","mssql+pymssql"]},"username":{"title":"Username","description":"Username to connect to MSSQL. This user should have privileges to read all the metadata in MsSQL.","type":"string"},"password":{"title":"Password","description":"Password to connect to MSSQL.","type":"string","format":"password"},"hostPort":{"title":"Host and Port","description":"Host and port of the MSSQL service.","type":"string"},"database":{"title":"Database","description":"Database of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single database. When left blank, OpenMetadata Ingestion attempts to scan all the databases.","type":"string"},"driver":{"title":"Driver","description":"ODBC driver version in case of pyodbc connection.","type":"string","default":"ODBC Driver 18 for SQL Server"},"ingestAllDatabases":{"title":"Ingest All Databases","description":"Ingest data from all databases in Mssql. You can use databaseFilterPattern on top of this.","type":"boolean","default":false},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsDBTExtraction":{"description":"Supports DBT Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"supportsDatabase":{"title":"Supports Database","description":"The source service supports the database concept in its hierarchy","type":"boolean","default":true},"supportsUsageExtraction":{"description":"Supports Usage Extraction.","type":"boolean","default":true},"supportsLineageExtraction":{"description":"Supports Lineage Extraction.","type":"boolean","default":true},"sampleDataStorageConfig":{"title":"S3 Config for Sample Data","description":"Storage config to store sample data","type":"object","javaType":"org.openmetadata.schema.services.connections.database.SampleDataStorageConfig","properties":{"config":{"oneOf":[{"title":"Sample Data Storage Config","description":"Storage config to store sample data","type":"object","properties":{"bucketName":{"title":"Bucket Name","description":"Bucket Name","type":"string","default":""},"prefix":{"title":"Prefix","description":"Prefix of the data source.","type":"string","default":""},"overwriteData":{"title":"Overwrite Sample Data","description":"When this field enabled a single parquet file will be created to store sample data, otherwise we will create a new file per day","type":"boolean","default":true},"storageConfig":{"oneOf":[{"title":"AWS S3 Storage Config","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string","format":"uri"},"profileName":{"title":"Profile Name","description":"The name of a profile to use with the boto session.","type":"string"},"assumeRoleArn":{"title":"Role Arn for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role","type":"string"},"assumeRoleSessionName":{"title":"Role Session Name for Assume Role","description":"An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role","type":"string","default":"OpenMetadataSession"},"assumeRoleSourceIdentity":{"title":"Source Identity for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role","type":"string"}},"additionalProperties":false,"required":["awsRegion"]},{"title":"OpenMetadata Storage","type":"object","additionalProperties":false}]}}},{"title":"No Sample Data Storage Config","type":"object","additionalProperties":false}]}},"additionalProperties":false}},"additionalProperties":false,"required":["database"]},{"$schema":"http://json-schema.org/draft-07/schema#","title":"SQLiteConnection","description":"SQLite Database Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.SQLiteConnection","definitions":{"SQLiteType":{"description":"Service type.","type":"string","enum":["SQLite"],"default":"SQLite"},"SQLiteScheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["sqlite+pysqlite"],"default":"sqlite+pysqlite"}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"SQLite","type":"string","enum":["SQLite"]},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","default":"sqlite+pysqlite","type":"string","enum":["sqlite+pysqlite"]},"username":{"title":"Username","description":"Username to connect to SQLite. Blank for in-memory database.","type":"string"},"password":{"title":"Password","description":"Password to connect to SQLite. Blank for in-memory database.","type":"string","format":"password"},"hostPort":{"title":"Host and Port","description":"Host and port of the SQLite service. Blank for in-memory database.","type":"string"},"database":{"title":"Database","description":"Database of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single database. When left blank, OpenMetadata Ingestion attempts to scan all the databases.","type":"string"},"databaseMode":{"title":"Database Mode","description":"How to run the SQLite database. :memory: by default.","type":"string","default":":memory:"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsDBTExtraction":{"description":"Supports DBT Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"supportsQueryComment":{"title":"Supports Query Comment","description":"For Database Services using SQLAlchemy, True to enable running a comment for all queries run from OpenMetadata.","type":"boolean","default":true},"sampleDataStorageConfig":{"title":"S3 Config for Sample Data","description":"Storage config to store sample data","type":"object","javaType":"org.openmetadata.schema.services.connections.database.SampleDataStorageConfig","properties":{"config":{"oneOf":[{"title":"Sample Data Storage Config","description":"Storage config to store sample data","type":"object","properties":{"bucketName":{"title":"Bucket Name","description":"Bucket Name","type":"string","default":""},"prefix":{"title":"Prefix","description":"Prefix of the data source.","type":"string","default":""},"overwriteData":{"title":"Overwrite Sample Data","description":"When this field enabled a single parquet file will be created to store sample data, otherwise we will create a new file per day","type":"boolean","default":true},"storageConfig":{"oneOf":[{"title":"AWS S3 Storage Config","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string","format":"uri"},"profileName":{"title":"Profile Name","description":"The name of a profile to use with the boto session.","type":"string"},"assumeRoleArn":{"title":"Role Arn for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role","type":"string"},"assumeRoleSessionName":{"title":"Role Session Name for Assume Role","description":"An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role","type":"string","default":"OpenMetadataSession"},"assumeRoleSourceIdentity":{"title":"Source Identity for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role","type":"string"}},"additionalProperties":false,"required":["awsRegion"]},{"title":"OpenMetadata Storage","type":"object","additionalProperties":false}]}}},{"title":"No Sample Data Storage Config","type":"object","additionalProperties":false}]}},"additionalProperties":false}},"additionalProperties":false},{"$schema":"http://json-schema.org/draft-07/schema#","title":"SapsybaseiqConnection","description":"Sapsybaseiq Database Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.database.SapsybaseiqConnection","definitions":{"sapsybaseiqType":{"description":"Service type.","type":"string","enum":["Sapsybaseiq"],"default":"Sapsybaseiq"},"sapsybaseiqScheme":{"description":"SQLAlchemy driver scheme options.","type":"string","enum":["sqlalchemy_sqlany"],"default":"sqlalchemy_sqlany"}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"Sapsybaseiq","type":"string","enum":["Sapsybaseiq"]},"scheme":{"title":"Connection Scheme","description":"SQLAlchemy driver scheme options.","default":"sqlalchemy_sqlany","type":"string","enum":["sqlalchemy_sqlany"]},"username":{"title":"Username","description":"Username to connect to Sapsybaseiq. This user should have privileges to read all the metadata in Sapsybaseiq.","type":"string"},"password":{"title":"Password","description":"Password to connect to Sapsybaseiq.","type":"string","format":"password"},"hostPort":{"title":"Host and Port","description":"Host and port of the Sapsybaseiq service.","type":"string"},"database":{"title":"Database","description":"Database of the data source. This is optional parameter, if you would like to restrict the metadata reading to a single database. When left blank, OpenMetadata Ingestion attempts to scan all the databases.","type":"string"},"driver":{"title":"Driver","description":"ODBC driver version in case of pyodbc connection.","type":"string","default":"ODBC Driver 18 for SQL Server"},"ingestAllDatabases":{"title":"Ingest All Databases","description":"Ingest data from all databases in Sapsybaseiq. You can use databaseFilterPattern on top of this.","type":"boolean","default":false},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true},"supportsDBTExtraction":{"description":"Supports DBT Extraction.","type":"boolean","default":true},"supportsProfiler":{"title":"Supports Profiler","description":"Supports Profiler","type":"boolean","default":true},"supportsDatabase":{"title":"Supports Database","description":"The source service supports the database concept in its hierarchy","type":"boolean","default":true},"supportsUsageExtraction":{"description":"Supports Usage Extraction.","type":"boolean","default":true},"supportsLineageExtraction":{"description":"Supports Lineage Extraction.","type":"boolean","default":true},"sampleDataStorageConfig":{"title":"S3 Config for Sample Data","description":"Storage config to store sample data","type":"object","javaType":"org.openmetadata.schema.services.connections.database.SampleDataStorageConfig","properties":{"config":{"oneOf":[{"title":"Sample Data Storage Config","description":"Storage config to store sample data","type":"object","properties":{"bucketName":{"title":"Bucket Name","description":"Bucket Name","type":"string","default":""},"prefix":{"title":"Prefix","description":"Prefix of the data source.","type":"string","default":""},"overwriteData":{"title":"Overwrite Sample Data","description":"When this field enabled a single parquet file will be created to store sample data, otherwise we will create a new file per day","type":"boolean","default":true},"storageConfig":{"oneOf":[{"title":"AWS S3 Storage Config","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string","format":"uri"},"profileName":{"title":"Profile Name","description":"The name of a profile to use with the boto session.","type":"string"},"assumeRoleArn":{"title":"Role Arn for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role","type":"string"},"assumeRoleSessionName":{"title":"Role Session Name for Assume Role","description":"An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role","type":"string","default":"OpenMetadataSession"},"assumeRoleSourceIdentity":{"title":"Source Identity for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role","type":"string"}},"additionalProperties":false,"required":["awsRegion"]},{"title":"OpenMetadata Storage","type":"object","additionalProperties":false}]}}},{"title":"No Sample Data Storage Config","type":"object","additionalProperties":false}]}},"additionalProperties":false}},"additionalProperties":false,"required":["database"]}]},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true}},"additionalProperties":false,"required":["hostPort","connection"]}'),p=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"CustomPipelineConnection","description":"Custom Pipeline Service connection to build a source that is not supported by OpenMetadata yet.","type":"object","javaType":"org.openmetadata.schema.services.connections.pipeline.CustomPipelineConnection","definitions":{"customPipelineType":{"title":"Service Type","description":"Custom pipeline service type","type":"string","enum":["CustomPipeline"],"default":"CustomPipeline"}},"properties":{"type":{"title":"Service Type","description":"Custom pipeline service type","default":"CustomPipeline","type":"string","enum":["CustomPipeline"]},"sourcePythonClass":{"title":"Source Python Class Name","description":"Source Python Class Name to instantiated by the ingestion workflow","type":"string"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}}},"additionalProperties":false,"required":["type"]}'),l=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"DagsterConnection","description":"Dagster Metadata Database Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.pipeline.DagsterConnection","definitions":{"DagsterType":{"description":"Service type.","type":"string","enum":["Dagster"],"default":"Dagster"}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"Dagster","type":"string","enum":["Dagster"]},"host":{"title":"Host","description":"URL to the Dagster instance","type":"string","format":"uri"},"token":{"title":"Token","description":"To Connect to Dagster Cloud","type":"string","format":"password"},"timeout":{"title":"Time Out","description":"Connection Time Limit Between OM and Dagster Graphql API in second","type":"integer","default":"1000"},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true}},"additionalProperties":false,"required":["host"]}'),d=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"DatabricksPipelineConnection","description":"Databricks Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.pipeline.DatabricksPipelineConnection","definitions":{"databricksType":{"description":"Service type.","type":"string","enum":["DatabricksPipeline"],"default":"DatabricksPipeline"}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"DatabricksPipeline","type":"string","enum":["DatabricksPipeline"]},"hostPort":{"title":"Host and Port","description":"Host and port of the Databricks service.","type":"string"},"token":{"title":"Token","description":"Generated Token to connect to Databricks.","type":"string","format":"password"},"httpPath":{"title":"Http Path","description":"Databricks compute resources URL.","type":"string"},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true}},"additionalProperties":false,"required":["hostPort","token"]}'),u=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"DomoPipelineConnection","description":"Domo Pipeline Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.pipeline.DomoPipelineConnection","definitions":{"DomoPipelineType":{"description":"Service type.","type":"string","enum":["DomoPipeline"],"default":"DomoPipeline"}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"DomoPipeline","type":"string","enum":["DomoPipeline"]},"clientId":{"title":"Client ID","description":"Client ID for DOMO","type":"string"},"secretToken":{"title":"Secret Token","description":"Secret token to connect to DOMO","type":"string","format":"password"},"accessToken":{"title":"Access Token","description":"Access token to connect to DOMO","type":"string"},"apiHost":{"expose":true,"title":"API Host","description":"API Host to connect to DOMO instance","default":"api.domo.com","type":"string","format":"string"},"instanceDomain":{"title":"Instance Domain","description":"URL of your Domo instance, e.g., https://openmetadata.domo.com","type":"string","format":"uri"},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true}},"additionalProperties":false,"required":["clientId","secretToken","instanceDomain"]}'),m=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"FivetranConnection","description":"Fivetran Metadata Database Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.pipeline.FivetranConnection","definitions":{"FivetranType":{"description":"Service type.","type":"string","enum":["Fivetran"],"default":"Fivetran"}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"Fivetran","type":"string","enum":["Fivetran"]},"apiKey":{"title":"Fivetran API Key","description":"Fivetran API Secret.","type":"string"},"hostPort":{"expose":true,"title":"Host And Port","description":"Pipeline Service Management/UI URI.","type":"string","format":"uri","default":"https://api.fivetran.com"},"apiSecret":{"title":"Fivetran API Secret","description":"Fivetran API Secret.","type":"string","format":"password"},"limit":{"title":"Fivetran API Limit","description":"Fivetran API Limit For Pagination.","type":"integer","default":1000},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true}},"additionalProperties":false,"required":["apiKey","apiSecret"]}'),f=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"GluePipelineConnection","description":"Glue Pipeline Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.pipeline.GluePipelineConnection","definitions":{"glueType":{"description":"Service type.","type":"string","enum":["GluePipeline"],"default":"GluePipeline"}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"GluePipeline","type":"string","enum":["GluePipeline"]},"awsConfig":{"title":"AWS Credentials Configuration","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string","format":"uri"},"profileName":{"title":"Profile Name","description":"The name of a profile to use with the boto session.","type":"string"},"assumeRoleArn":{"title":"Role Arn for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role","type":"string"},"assumeRoleSessionName":{"title":"Role Session Name for Assume Role","description":"An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role","type":"string","default":"OpenMetadataSession"},"assumeRoleSourceIdentity":{"title":"Source Identity for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role","type":"string"}},"additionalProperties":false,"required":["awsRegion"]},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true}},"additionalProperties":false,"required":["awsConfig"]}'),y=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"NifiConnection","description":"Nifi Metadata Pipeline Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.pipeline.NifiConnection","definitions":{"NifiType":{"description":"Service type.","type":"string","enum":["Nifi"],"default":"Nifi"},"basicAuthentication":{"title":"Username/Password Authentication","description":"username/password auth","type":"object","properties":{"username":{"title":"Username","description":"Nifi user to authenticate to the API.","type":"string"},"password":{"title":"Password","description":"Nifi password to authenticate to the API.","type":"string","format":"password"},"verifySSL":{"title":"Verify SSL","description":"Boolean marking if we need to verify the SSL certs for Nifi. False by default.","type":"boolean","default":false}},"additionalProperties":false},"clientCertificateAuthentication":{"title":"Client Certificate Authentication","description":"client certificate auth","type":"object","properties":{"certificateAuthorityPath":{"title":"Certificat Authority Path","description":"Path to the root CA certificate","type":"string"},"clientCertificatePath":{"title":"Client Certificat","description":"Path to the client certificate","type":"string"},"clientkeyPath":{"title":"Client Key","description":"Path to the client key","type":"string"}},"additionalProperties":false}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"Nifi","type":"string","enum":["Nifi"]},"hostPort":{"expose":true,"title":"Host And Port","description":"Pipeline Service Management/UI URI.","type":"string","format":"uri"},"nifiConfig":{"title":"Nifi Credentials Configuration","description":"We support username/password or client certificate authentication","oneOf":[{"title":"Username/Password Authentication","description":"username/password auth","type":"object","properties":{"username":{"title":"Username","description":"Nifi user to authenticate to the API.","type":"string"},"password":{"title":"Password","description":"Nifi password to authenticate to the API.","type":"string","format":"password"},"verifySSL":{"title":"Verify SSL","description":"Boolean marking if we need to verify the SSL certs for Nifi. False by default.","type":"boolean","default":false}},"additionalProperties":false},{"title":"Client Certificate Authentication","description":"client certificate auth","type":"object","properties":{"certificateAuthorityPath":{"title":"Certificat Authority Path","description":"Path to the root CA certificate","type":"string"},"clientCertificatePath":{"title":"Client Certificat","description":"Path to the client certificate","type":"string"},"clientkeyPath":{"title":"Client Key","description":"Path to the client key","type":"string"}},"additionalProperties":false}]},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true}},"additionalProperties":false,"required":["hostPort","nifiConfig"]}'),g=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"SplineConnection","description":"Spline Metadata Database Connection Config","type":"object","javaType":"org.openmetadata.schema.services.connections.pipeline.SplineConnection","definitions":{"SplineType":{"description":"Service type.","type":"string","enum":["Spline"],"default":"Spline"}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"Spline","type":"string","enum":["Spline"]},"hostPort":{"title":"Spline REST Server Host & Port","expose":true,"description":"Spline REST Server Host & Port.","type":"string","format":"uri"},"uiHostPort":{"title":"Spline UI Host & Port","expose":true,"description":"Spline UI Host & Port.","type":"string","format":"uri"},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true}},"additionalProperties":false,"required":["hostPort"]}'),h=function(e){var t={},i=(0,o.pi)({},a.Xy);switch(e){case n.M3.Airbyte:t=r;break;case n.M3.Airflow:t=c;break;case n.M3.GluePipeline:t=f;break;case n.M3.Fivetran:t=m;break;case n.M3.Dagster:t=l;break;case n.M3.Nifi:t=y;break;case n.M3.DomoPipeline:t=u;break;case n.M3.CustomPipeline:t=p;break;case n.M3.DatabricksPipeline:t=d;break;case n.M3.Spline:t=g}return(0,s.cloneDeep)({schema:t,uiSchema:i})}},50162:function(e,t,i){i.d(t,{C:function(){return l}});var o=i(70655),s=i(96486),a=i(55846),n=i(30045),r=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"CustomSearchConnection","description":"Custom Search Service connection to build a source that is not supported by OpenMetadata yet.","type":"object","javaType":"org.openmetadata.schema.services.connections.search.CustomSearchConnection","definitions":{"customSearchType":{"title":"Service Type","description":"Custom search service type","type":"string","enum":["CustomSearch"],"default":"CustomSearch"}},"properties":{"type":{"title":"Service Type","description":"Custom search service type","default":"CustomSearch","type":"string","enum":["CustomSearch"]},"sourcePythonClass":{"title":"Source Python Class Name","description":"Source Python Class Name to instantiated by the ingestion workflow","type":"string"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}}},"additionalProperties":false,"required":["type"]}'),c=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"ElasticSearch Connection","description":"ElasticSearch Connection.","type":"object","javaType":"org.openmetadata.schema.services.connections.search.ElasticSearchConnection","definitions":{"elasticSearchType":{"description":"ElasticSearch service type","type":"string","enum":["ElasticSearch"],"default":"ElasticSearch"}},"properties":{"type":{"title":"ElasticSearch Type","description":"ElasticSearch Type","default":"ElasticSearch","type":"string","enum":["ElasticSearch"]},"hostPort":{"title":"Host and Port","description":"Host and port of the ElasticSearch service.","type":"string","format":"uri"},"authType":{"title":"Auth Configuration Type","description":"Choose Auth Config Type.","oneOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"Basic Authentication","description":"Basic Auth Configuration for ElasticSearch","javaType":"org.openmetadata.schema.services.connections.search.elasticSearch.ESBasicAuth","type":"object","properties":{"username":{"title":"Username","description":"Elastic Search Username for Login","type":"string"},"password":{"title":"Password","description":"Elastic Search Password for Login","type":"string","format":"password"}},"additionalProperties":false},{"$schema":"http://json-schema.org/draft-07/schema#","title":"API Key Authentication","description":"API Key Authentication for ElasticSearch","javaType":"org.openmetadata.schema.services.connections.search.elasticSearch.ESAPIAuth","type":"object","properties":{"apiKey":{"title":"API Key","description":"Elastic Search API Key for API Authentication","type":"string","format":"password"},"apiKeyId":{"title":"API Key ID","description":"Elastic Search API Key ID for API Authentication","type":"string"}},"additionalProperties":false}]},"sslConfig":{"title":"SSL Config","$schema":"http://json-schema.org/draft-07/schema#","description":"SSL Config","javaType":"org.openmetadata.schema.services.common.SSLConfig","type":"object","properties":{"certificates":{"type":"object","title":"SSL Certificates","description":"SSL Certificates","oneOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"SSL Certificates By Path","description":"SSL Certificates By Path","javaType":"org.openmetadata.schema.services.common.SSLCertPaths","type":"object","properties":{"caCertPath":{"title":"CA Certificate Path","description":"CA Certificate Path","type":"string"},"clientCertPath":{"title":"Client Certificate Path","description":"Client Certificate Path","type":"string"},"privateKeyPath":{"title":"Private Key Path","description":"Private Key Path","type":"string"}},"additionalProperties":false},{"$schema":"http://json-schema.org/draft-07/schema#","title":"SSL Certificates By Values","description":"SSL Certificates By Values","javaType":"org.openmetadata.schema.services.common.SSLCertValues","type":"object","properties":{"caCertValue":{"title":"CA Certificate Value","description":"CA Certificate Value","type":"string","format":"password"},"clientCertValue":{"title":"Client Certificate Value","description":"Client Certificate Value","type":"string","format":"password"},"privateKeyValue":{"title":"Private Key Value","description":"Private Key Value","type":"string","format":"password"},"stagingDir":{"title":"Staging Directory Path","description":"Staging Directory Path","type":"string","default":"/tmp/openmetadata-certs"}},"additionalProperties":false}]}},"additionalProperties":false},"connectionTimeoutSecs":{"title":"Connection Timeout in Seconds","description":"Connection Timeout in Seconds","type":"integer","default":30},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true}},"additionalProperties":false}'),p=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"OpenSearch Connection","description":"OpenSearch Connection.","type":"object","javaType":"org.openmetadata.schema.services.connections.search.OpenSearchConnection","definitions":{"openSearchType":{"description":"OpenSearch service type","type":"string","enum":["OpenSearch"],"default":"OpenSearch"}},"properties":{"type":{"title":"Service Type","description":"Service Type","default":"OpenSearch","type":"string","enum":["OpenSearch"]},"hostPort":{"title":"Host and Port","description":"Host and port of the OpenSearch service.","type":"string"},"scheme":{"description":"Http/Https connection scheme","type":"string"},"username":{"description":"OpenSearch Username for Login","type":"string"},"password":{"description":"OpenSearch Password for Login","type":"string"},"truststorePath":{"description":"Truststore Path","type":"string"},"truststorePassword":{"description":"Truststore Password","type":"string"},"connectionTimeoutSecs":{"description":"Connection Timeout in Seconds","type":"integer","default":5},"socketTimeoutSecs":{"description":"Socket Timeout in Seconds","type":"integer","default":60},"keepAliveTimeoutSecs":{"description":"Keep Alive Timeout in Seconds","type":"integer"},"connectionOptions":{"title":"Connection Options","javaType":"org.openmetadata.schema.services.connections.database.ConnectionOptions","description":"Additional connection options to build the URL that can be sent to service during the connection.","type":"object","additionalProperties":{"type":"string"}},"connectionArguments":{"title":"Connection Arguments","javaType":"org.openmetadata.schema.services.connections.database.ConnectionArguments","description":"Additional connection arguments such as security or protocol configs that can be sent to service during connection.","type":"object","additionalProperties":{".{1,}":{"type":"string"}}},"supportsMetadataExtraction":{"title":"Supports Metadata Extraction","description":"Supports Metadata Extraction.","type":"boolean","default":true}},"additionalProperties":false,"required":["hostPort"]}'),l=function(e){var t={},i=(0,o.pi)({},a.Xy);switch(e){case n.VW.ElasticSearch:t=c;break;case n.VW.OpenSearch:t=p;break;case n.VW.CustomSearch:t=r}return(0,s.cloneDeep)({schema:t,uiSchema:i})}}}]);