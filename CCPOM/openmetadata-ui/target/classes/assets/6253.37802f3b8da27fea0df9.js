"use strict";(self.webpackChunkopen_metadata=self.webpackChunkopen_metadata||[]).push([[6253],{71927:function(e,t,i){var a=i(8081),n=i.n(a),r=i(23645),o=i.n(r)()(n());o.push([e.id,'/*\n *  Copyright 2023 Collate.\n *  Licensed under the Apache License, Version 2.0 (the "License");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *  http://www.apache.org/licenses/LICENSE-2.0\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an "AS IS" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n.stepper-container .ant-steps-item-content {\n  width: 120px;\n}\n',""]),t.Z=o},76579:function(e,t,i){var a=i(8081),n=i.n(a),r=i(23645),o=i.n(r)()(n());o.push([e.id,'/*\n *  Copyright 2023 Collate.\n *  Licensed under the Apache License, Version 2.0 (the "License");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *  http://www.apache.org/licenses/LICENSE-2.0\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an "AS IS" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n.advanced-properties-collapse .ant-collapse-item .ant-collapse-content {\n  background-color: inherit;\n  border-top: none;\n}\n.advanced-properties-collapse .ant-collapse-item .ant-collapse-content > .ant-collapse-content-box {\n  padding-left: 20px;\n}\n.advanced-properties-collapse .ant-collapse-item .ant-collapse-header > .ant-collapse-header-text {\n  font-size: 16px;\n}\n',""]),t.Z=o},3765:function(e,t,i){var a=i(8081),n=i.n(a),r=i(23645),o=i.n(r)()(n());o.push([e.id,'/*\n *  Copyright 2023 Collate.\n *  Licensed under the Apache License, Version 2.0 (the "License");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *  http://www.apache.org/licenses/LICENSE-2.0\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an "AS IS" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n/*\n *  Copyright 2022 Collate.\n *  Licensed under the Apache License, Version 2.0 (the "License");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *  http://www.apache.org/licenses/LICENSE-2.0\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an "AS IS" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n/* navbar+tab_height+padding = 64+46+12  */\n.service-doc-panel {\n  background: #fff;\n  padding-bottom: 8px;\n}\n.service-doc-panel .toastui-editor-contents h1:first-child {\n  padding-top: 8px !important;\n}\n.service-doc-panel .toastui-editor-contents > * {\n  padding: 5px 35px !important;\n}\n',""]),t.Z=o},7067:function(e,t,i){i.d(t,{Z:function(){return ie}});var a=i(70655),n=i(56256),r=i(49409),o=i(4107),s=i(96486),l=i(67294),d=i(68432),c=i(67336),p=i(27202),u=i(19650),f=i(71577),g=i(94184),m=i.n(g),h=i(21801),y=i(68805),b=i(25074),S=i(2669),P=i(71230),C=i(15746),v=i(34041),T=i(23031),D=function(e){var t;return l.createElement(P.Z,null,l.createElement(C.Z,{span:24},l.createElement(n.Z,null,(0,s.startCase)(e.name))),l.createElement(C.Z,{span:24},l.createElement(v.Z,{className:"m-t-xss w-full",disabled:e.disabled,id:e.idSchema.$id,mode:"tags",open:!1,placeholder:(0,T.t)("message.filter-pattern-placeholder"),value:null!==(t=e.formData)&&void 0!==t?t:[],onChange:function(t){return e.onChange(t)},onFocus:function(){var t,i,a=e.idSchema.$id;/FilterPattern/.test(a)&&(a=a.split("/").slice(0,2).join("/")),null===(i=null===(t=e.formContext)||void 0===t?void 0:t.handleFocus)||void 0===i||i.call(t,a)}})))},w=i(55846),I=i(31968),x=i(55726),M=i(79690),A=i(89204),E=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"DashboardServiceMetadataPipeline","type":"object","description":"DashboardService Metadata Pipeline Configuration.","definitions":{"dashboardMetadataConfigType":{"description":"Dashboard Source Config Metadata Pipeline type","type":"string","enum":["DashboardMetadata"],"default":"DashboardMetadata"}},"properties":{"type":{"description":"Pipeline type","$ref":"#/definitions/dashboardMetadataConfigType","default":"DashboardMetadata"},"dashboardFilterPattern":{"description":"Regex to exclude or include dashboards that matches the pattern.","$ref":"#/properties/chartFilterPattern","title":"Dashboard Filter Pattern"},"chartFilterPattern":{"description":"Regex exclude or include charts that matches the pattern.","title":"Chart Filter Pattern","type":"object","javaType":"org.openmetadata.schema.metadataIngestion.FilterPattern","properties":{"includes":{"description":"List of strings/regex patterns to match and include only database entities that match.","type":"array","items":{"type":"string"},"default":[]},"excludes":{"description":"List of strings/regex patterns to match and exclude only database entities that match.","type":"array","items":{"type":"string"},"default":[]}},"additionalProperties":false},"dataModelFilterPattern":{"description":"Regex exclude or include data models that matches the pattern.","$ref":"#/properties/chartFilterPattern","title":"Data Model Filter Pattern"},"projectFilterPattern":{"description":"Regex to exclude or include projects that matches the pattern.","$ref":"#/properties/chartFilterPattern","title":"Project Filter Pattern"},"dbServiceNames":{"title":"Database Service Names List","description":"List of Database Service Names for creation of lineage","type":"array","items":{"type":"string"}},"includeOwners":{"title":"Include Current Owners","description":"Enabling a flag will replace the current owner with a new owner from the source during metadata ingestion, if the current owner is null. It is recommended to keep the flag enabled to obtain the owner information during the first metadata ingestion.","type":"boolean","default":false},"markDeletedDashboards":{"description":"Optional configuration to soft delete dashboards in OpenMetadata if the source dashboards are deleted. Also, if the dashboard is deleted, all the associated entities like lineage, etc., with that dashboard will be deleted","type":"boolean","default":true,"title":"Mark Deleted Dashboards"},"markDeletedDataModels":{"description":"Optional configuration to soft delete data models in OpenMetadata if the source data models are deleted. Also, if the data models is deleted, all the associated entities like lineage, etc., with that data models will be deleted","type":"boolean","default":true,"title":"Mark Deleted Data Models"},"includeTags":{"description":"Optional configuration to toggle the tags ingestion.","type":"boolean","default":true,"title":"Include Tags"},"includeDataModels":{"description":"Optional configuration to toggle the ingestion of data models.","type":"boolean","default":true,"title":"Include Data Models"}},"additionalProperties":false}'),N=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"DatabaseServiceMetadataPipeline","description":"DatabaseService Metadata Pipeline Configuration.","type":"object","javaType":"org.openmetadata.schema.metadataIngestion.DatabaseServiceMetadataPipeline","definitions":{"databaseMetadataConfigType":{"description":"Database Source Config Metadata Pipeline type","type":"string","enum":["DatabaseMetadata"],"default":"DatabaseMetadata"}},"properties":{"type":{"description":"Pipeline type","$ref":"#/definitions/databaseMetadataConfigType","default":"DatabaseMetadata"},"markDeletedTables":{"description":"This is an optional configuration for enabling soft deletion of tables. When this option is enabled, only tables that have been deleted from the source will be soft deleted, and this will apply solely to the schema that is currently being ingested via the pipeline. Any related entities such as test suites or lineage information that were associated with those tables will also be deleted.","type":"boolean","default":true,"title":"Mark Deleted Tables"},"markDeletedStoredProcedures":{"description":"Optional configuration to soft delete stored procedures in OpenMetadata if the source stored procedures are deleted. Also, if the stored procedures is deleted, all the associated entities like lineage, etc., with that stored procedures will be deleted","type":"boolean","default":true,"title":"Mark Deleted Stored Procedures"},"includeTables":{"description":"Optional configuration to turn off fetching metadata for tables.","type":"boolean","default":true,"title":"Include Tables"},"includeViews":{"description":"Optional configuration to turn off fetching metadata for views.","type":"boolean","default":true,"title":"Include Views"},"includeTags":{"description":"Optional configuration to toggle the tags ingestion.","type":"boolean","default":true,"title":"Include Tags"},"includeStoredProcedures":{"description":"Optional configuration to toggle the Stored Procedures ingestion.","type":"boolean","default":true,"title":"Include Stored Procedures"},"queryLogDuration":{"description":"Configuration to tune how far we want to look back in query logs to process Stored Procedures results.","type":"integer","default":1,"title":"Query Log Duration"},"queryParsingTimeoutLimit":{"description":"Configuration to set the timeout for parsing the query in seconds.","type":"integer","default":300,"title":"Query Parsing Timeout Limit"},"useFqnForFiltering":{"description":"Regex will be applied on fully qualified name (e.g service_name.db_name.schema_name.table_name) instead of raw name (e.g. table_name)","type":"boolean","default":false,"title":"Use FQN For Filtering"},"schemaFilterPattern":{"description":"Regex to only fetch tables or databases that matches the pattern.","$ref":"#/properties/tableFilterPattern","title":"Schema Filter Pattern"},"tableFilterPattern":{"description":"Regex exclude tables or databases that matches the pattern.","title":"Table Filter Pattern","type":"object","javaType":"org.openmetadata.schema.metadataIngestion.FilterPattern","properties":{"includes":{"description":"List of strings/regex patterns to match and include only database entities that match.","type":"array","items":{"type":"string"},"default":[]},"excludes":{"description":"List of strings/regex patterns to match and exclude only database entities that match.","type":"array","items":{"type":"string"},"default":[]}},"additionalProperties":false},"databaseFilterPattern":{"description":"Regex to only fetch databases that matches the pattern.","$ref":"#/properties/tableFilterPattern","title":"Database Filter Pattern"}},"additionalProperties":false}'),L=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"DatabaseServiceProfilerPipeline","description":"DatabaseService Profiler Pipeline Configuration.","type":"object","definitions":{"profilerConfigType":{"description":"Profiler Source Config Pipeline type","type":"string","enum":["Profiler"],"default":"Profiler"}},"properties":{"type":{"description":"Pipeline type","$ref":"#/definitions/profilerConfigType","default":"Profiler"},"schemaFilterPattern":{"description":"Regex to only fetch tables or databases that matches the pattern.","$ref":"#/properties/tableFilterPattern","title":"Schema Filter Pattern"},"tableFilterPattern":{"description":"Regex exclude tables or databases that matches the pattern.","title":"Table Filter Pattern","type":"object","javaType":"org.openmetadata.schema.metadataIngestion.FilterPattern","properties":{"includes":{"description":"List of strings/regex patterns to match and include only database entities that match.","type":"array","items":{"type":"string"},"default":[]},"excludes":{"description":"List of strings/regex patterns to match and exclude only database entities that match.","type":"array","items":{"type":"string"},"default":[]}},"additionalProperties":false},"databaseFilterPattern":{"description":"Regex to only fetch databases that matches the pattern.","$ref":"#/properties/tableFilterPattern","title":"Database Filter Pattern"},"includeViews":{"description":"Optional configuration to turn off fetching metadata for views.","type":"boolean","default":true,"title":"Include Views"},"processPiiSensitive":{"description":"Optional configuration to automatically tag columns that might contain sensitive information","type":"boolean","default":false,"title":"Auto Tag PII"},"confidence":{"description":"Set the Confidence value for which you want the column to be marked","type":"number","default":80,"title":"Confidence"},"profileSample":{"description":"Percentage of data or no. of rows we want to execute the profiler and tests on","type":"number","default":null,"title":"Profile Sample"},"profileSampleType":{"title":"Profile Sample Type","description":"Type of Profile Sample (percentage or rows)","type":"string","enum":["PERCENTAGE","ROWS"],"default":"PERCENTAGE"},"generateSampleData":{"description":"Option to turn on/off generating sample data.","type":"boolean","default":true,"title":"Generate Sample Data"},"sampleDataCount":{"description":"Number of row of sample data to be generated","type":"integer","default":50,"title":"Sample Data Rows Count"},"threadCount":{"description":"Number of threads to use during metric computations","type":"number","default":5,"title":"Thread Count"},"timeoutSeconds":{"description":"Profiler Timeout in Seconds","type":"integer","default":43200,"title":"Timeout (in sec.)"}},"additionalProperties":false}'),j=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"DatabaseServiceQueryLineagePipeline","description":"DatabaseService Query Lineage Pipeline Configuration.","type":"object","definitions":{"databaseLineageConfigType":{"description":"Database Source Config Usage Pipeline type","type":"string","enum":["DatabaseLineage"],"default":"DatabaseLineage"}},"properties":{"type":{"description":"Pipeline type","$ref":"#/definitions/databaseLineageConfigType","default":"DatabaseLineage"},"queryLogDuration":{"description":"Configuration to tune how far we want to look back in query logs to process lineage data.","type":"integer","default":1,"title":"Query Log Duration"},"queryLogFilePath":{"description":"Configuration to set the file path for query logs","type":"string","title":"Query Log File Path"},"resultLimit":{"description":"Configuration to set the limit for query logs","type":"integer","default":1000,"title":"Result Limit"},"parsingTimeoutLimit":{"description":"Configuration to set the timeout for parsing the query in seconds.","type":"integer","default":300,"title":"Parsing Timeout Limit"},"filterCondition":{"description":"Configuration the condition to filter the query history.","type":"string","title":"Filter Condition"},"schemaFilterPattern":{"description":"Regex to only fetch tables or databases that matches the pattern.","$ref":"#/properties/tableFilterPattern","title":"Schema Filter Pattern"},"tableFilterPattern":{"description":"Regex exclude tables or databases that matches the pattern.","title":"Table Filter Pattern","type":"object","javaType":"org.openmetadata.schema.metadataIngestion.FilterPattern","properties":{"includes":{"description":"List of strings/regex patterns to match and include only database entities that match.","type":"array","items":{"type":"string"},"default":[]},"excludes":{"description":"List of strings/regex patterns to match and exclude only database entities that match.","type":"array","items":{"type":"string"},"default":[]}},"additionalProperties":false},"databaseFilterPattern":{"description":"Regex to only fetch databases that matches the pattern.","$ref":"#/properties/tableFilterPattern","title":"Database Filter Pattern"}},"additionalProperties":false}'),R=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"DatabaseServiceQueryUsagePipeline","description":"DatabaseService Query Usage Pipeline Configuration.","type":"object","definitions":{"databaseUsageConfigType":{"description":"Database Source Config Usage Pipeline type","type":"string","enum":["DatabaseUsage"],"default":"DatabaseUsage"}},"properties":{"type":{"description":"Pipeline type","$ref":"#/definitions/databaseUsageConfigType","default":"DatabaseUsage"},"queryLogDuration":{"description":"Configuration to tune how far we want to look back in query logs to process usage data.","type":"integer","default":1,"title":"Query Log Duration"},"stageFileLocation":{"description":"Temporary file name to store the query logs before processing. Absolute file path required.","type":"string","default":"/tmp/query_log","title":"Stage File Location"},"filterCondition":{"description":"Configuration the condition to filter the query history.","type":"string","title":"Filter Condition"},"resultLimit":{"description":"Configuration to set the limit for query logs","type":"integer","default":1000,"title":"Result Limit"},"queryLogFilePath":{"description":"Configuration to set the file path for query logs","type":"string","title":"Query Log File Path"}},"additionalProperties":false}'),F=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"DataInsightPipeline","description":"Data Insight Pipeline Configuration.","type":"object","definitions":{"dataInsightConfigType":{"description":"Pipeline Source Config Metadata Pipeline type","type":"string","enum":["dataInsight"],"default":"dataInsight"}},"properties":{"type":{"description":"Pipeline type","$ref":"#/definitions/dataInsightConfigType","default":"dataInsight"}},"required":["type"],"additionalProperties":false}'),k=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"dbtPipeline","description":"DBT Pipeline Configuration.","type":"object","definitions":{"dbtConfigType":{"description":"DBT Config Pipeline type","type":"string","enum":["DBT"],"default":"DBT"}},"properties":{"type":{"description":"Pipeline type","default":"DBT","type":"string","enum":["DBT"]},"dbtConfigSource":{"mask":true,"title":"DBT Configuration Source","description":"Available sources to fetch DBT catalog and manifest files.","oneOf":[{"$schema":"http://json-schema.org/draft-07/schema#","title":"DBT Cloud Config","description":"dbt Cloud configuration.","javaType":"org.openmetadata.schema.metadataIngestion.dbtconfig.DbtCloudConfig","type":"object","properties":{"dbtCloudAuthToken":{"title":"dbt Cloud Authentication Token","description":"dbt cloud account authentication token","type":"string","format":"password"},"dbtCloudAccountId":{"title":"dbt Cloud Account Id","description":"dbt cloud account Id","type":"string"},"dbtCloudProjectId":{"title":"dbt Cloud Project Id","description":"In case of multiple projects in a dbt cloud account, specify the project\'s id from which you want to extract the dbt run artifacts","type":"string"},"dbtCloudJobId":{"title":"dbt Cloud Job Id","description":"dbt cloud job id.","type":"string"},"dbtCloudUrl":{"title":"dbt Cloud URL","description":"URL to connect to your dbt cloud instance. E.g., https://cloud.getdbt.com or https://emea.dbt.com/","type":"string","format":"uri","default":"https://cloud.getdbt.com"}},"additionalProperties":false,"required":["dbtCloudAuthToken","dbtCloudAccountId","dbtCloudUrl"]},{"$schema":"http://json-schema.org/draft-07/schema#","title":"DBT Local Config","description":"DBT Catalog, Manifest and Run Results file path config.","javaType":"org.openmetadata.schema.metadataIngestion.dbtconfig.DbtLocalConfig","type":"object","properties":{"dbtCatalogFilePath":{"title":"DBT Catalog File Path","description":"DBT catalog file path to extract dbt models with their column schemas.","type":"string"},"dbtManifestFilePath":{"title":"DBT Manifest File Path","description":"DBT manifest file path to extract dbt models and associate with tables.","type":"string"},"dbtRunResultsFilePath":{"title":"DBT Run Results File Path","description":"DBT run results file path to extract the test results information.","type":"string"}},"additionalProperties":false,"required":["dbtManifestFilePath"]},{"$schema":"http://json-schema.org/draft-07/schema#","title":"DBT HTTP Config","description":"DBT Catalog, Manifest and Run Results HTTP path configuration.","javaType":"org.openmetadata.schema.metadataIngestion.dbtconfig.DbtHttpConfig","type":"object","properties":{"dbtCatalogHttpPath":{"title":"DBT Catalog HTTP File Path","description":"DBT catalog http file path to extract dbt models with their column schemas.","type":"string"},"dbtManifestHttpPath":{"title":"DBT Manifest HTTP File Path","description":"DBT manifest http file path to extract dbt models and associate with tables.","type":"string"},"dbtRunResultsHttpPath":{"title":"DBT Run Results HTTP File Path","description":"DBT run results http file path to extract the test results information.","type":"string"}},"additionalProperties":false,"required":["dbtManifestHttpPath"]},{"$schema":"http://json-schema.org/draft-07/schema#","title":"DBT S3 Config","description":"DBT Catalog, Manifest and Run Results files in S3 bucket. We will search for catalog.json, manifest.json and run_results.json.","javaType":"org.openmetadata.schema.metadataIngestion.dbtconfig.DbtS3Config","type":"object","properties":{"dbtSecurityConfig":{"title":"DBT S3 Security Config","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string","format":"uri"},"profileName":{"title":"Profile Name","description":"The name of a profile to use with the boto session.","type":"string"},"assumeRoleArn":{"title":"Role Arn for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role","type":"string"},"assumeRoleSessionName":{"title":"Role Session Name for Assume Role","description":"An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role","type":"string","default":"OpenMetadataSession"},"assumeRoleSourceIdentity":{"title":"Source Identity for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role","type":"string"}},"additionalProperties":false,"required":["awsRegion"]},"dbtPrefixConfig":{"title":"DBT Prefix Config","description":"Details of the bucket where the dbt files are stored","type":"object","properties":{"dbtBucketName":{"title":"DBT Bucket Name","description":"Name of the bucket where the dbt files are stored","type":"string"},"dbtObjectPrefix":{"title":"DBT Object Prefix","description":"Path of the folder where the dbt files are stored","type":"string"}},"additionalProperties":false}}},{"$schema":"http://json-schema.org/draft-07/schema#","title":"DBT GCS Config","type":"object","description":"DBT Catalog, Manifest and Run Results files in GCS storage. We will search for catalog.json, manifest.json and run_results.json.","javaType":"org.openmetadata.schema.metadataIngestion.dbtconfig.DbtGCSConfig","properties":{"dbtSecurityConfig":{"title":"DBT GCS Security Config","$schema":"http://json-schema.org/draft-07/schema#","description":"GCP credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.GCPCredentials","definitions":{"gcpCredentialsPath":{"title":"GCP Credentials Path","description":"Pass the path of file containing the GCP credentials info","type":"string"},"GCPImpersonateServiceAccountValues":{"title":"GCP impersonate service account values","description":"Pass the values to impersonate a service account of Google Cloud","type":"object","properties":{"impersonateServiceAccount":{"title":"Target Service Account Email","description":"The impersonated service account email","type":"string"},"lifetime":{"title":"Lifetime","description":"Number of seconds the delegated credential should be valid","type":"integer","default":3600}}}},"properties":{"gcpConfig":{"title":"GCP Credentials Configuration","description":"We support two ways of authenticating to GCP i.e via GCP Credentials Values or GCP Credentials Path","oneOf":[{"$schema":"http://json-schema.org/draft-07/schema#","type":"object","javaType":"org.openmetadata.schema.security.credentials.GCPValues","title":"GCP Credentials Values","description":"Pass the raw credential values provided by GCP","definitions":{"singleProjectId":{"title":"Single Project ID","type":"string"},"multipleProjectId":{"title":"Multiple Project ID","type":"array","items":{"type":"string"}}},"properties":{"type":{"title":"Credentials Type","description":"Google Cloud Platform account type.","type":"string"},"projectId":{"title":"Project ID","description":"Project ID","oneOf":[{"title":"Single Project ID","type":"string"},{"title":"Multiple Project ID","type":"array","items":{"type":"string"}}]},"privateKeyId":{"title":"Private Key ID","description":"Google Cloud private key id.","type":"string"},"privateKey":{"title":"Private Key","description":"Google Cloud private key.","type":"string","format":"password"},"clientEmail":{"title":"Client Email","description":"Google Cloud email.","type":"string"},"clientId":{"title":"Client ID","description":"Google Cloud Client ID.","type":"string"},"authUri":{"title":"Authentication URI","description":"Google Cloud auth uri.","type":"string","format":"uri","default":"https://accounts.google.com/o/oauth2/auth"},"tokenUri":{"title":"Token URI","description":"Google Cloud token uri.","type":"string","format":"uri","default":"https://oauth2.googleapis.com/token"},"authProviderX509CertUrl":{"title":"Authentication Provider x509 Certificate URL","description":"Google Cloud auth provider certificate.","type":"string","format":"uri","default":"https://www.googleapis.com/oauth2/v1/certs"},"clientX509CertUrl":{"title":"Client x509 Certificate URL","description":"Google Cloud client certificate uri.","type":"string","format":"uri"}},"additionalProperties":false},{"title":"GCP Credentials Path","description":"Pass the path of file containing the GCP credentials info","type":"string"}]},"gcpImpersonateServiceAccount":{"title":"GCP Impersonate Service Account Configuration","description":"we enable the authenticated service account to impersonate another service account","type":"object","properties":{"impersonateServiceAccount":{"title":"Target Service Account Email","description":"The impersonated service account email","type":"string"},"lifetime":{"title":"Lifetime","description":"Number of seconds the delegated credential should be valid","type":"integer","default":3600}}}},"additionalProperties":false,"required":["gcpConfig"]},"dbtPrefixConfig":{"title":"DBT Prefix Config","description":"Details of the bucket where the dbt files are stored","type":"object","properties":{"dbtBucketName":{"title":"DBT Bucket Name","description":"Name of the bucket where the dbt files are stored","type":"string"},"dbtObjectPrefix":{"title":"DBT Object Prefix","description":"Path of the folder where the dbt files are stored","type":"string"}},"additionalProperties":false}}},{"$schema":"http://json-schema.org/draft-07/schema#","title":"DBT Azure Config","type":"object","description":"DBT Catalog, Manifest and Run Results files in Azure bucket. We will search for catalog.json, manifest.json and run_results.json.","javaType":"org.openmetadata.schema.metadataIngestion.dbtconfig.DbtAzureConfig","properties":{"dbtSecurityConfig":{"title":"DBT Azure Security Config","$schema":"http://json-schema.org/draft-07/schema#","description":"Azure Datalake Credentials","type":"object","javaType":"org.openmetadata.schema.security.credentials.AzureCredentials","properties":{"clientId":{"title":"Client ID","description":"Your Service Principal App ID (Client ID)","type":"string"},"clientSecret":{"title":"Client Secret","description":"Your Service Principal Password (Client Secret)","type":"string","format":"password"},"tenantId":{"title":"Tenant ID","description":"Tenant ID of your Azure Subscription","type":"string"},"accountName":{"title":"Account Name","description":"Account Name of your storage account","type":"string"}},"additionalProperties":false,"required":["clientId","clientSecret","tenantId","accountName"]},"dbtPrefixConfig":{"title":"DBT Prefix Config","description":"Details of the bucket where the dbt files are stored","type":"object","properties":{"dbtBucketName":{"title":"DBT Bucket Name","description":"Name of the bucket where the dbt files are stored","type":"string"},"dbtObjectPrefix":{"title":"DBT Object Prefix","description":"Path of the folder where the dbt files are stored","type":"string"}},"additionalProperties":false}}}]},"dbtUpdateDescriptions":{"description":"Optional configuration to update the description from DBT or not","type":"boolean","default":false},"includeTags":{"description":"Optional configuration to toggle the tags ingestion.","type":"boolean","default":true},"dbtClassificationName":{"title":"dbt Classification Name","description":"Custom OpenMetadata Classification name for dbt tags.","type":"string","default":"dbtTags"},"schemaFilterPattern":{"description":"Regex to only fetch tables or databases that matches the pattern.","title":"Schema Filter Pattern","type":"object","javaType":"org.openmetadata.schema.metadataIngestion.FilterPattern","properties":{"includes":{"description":"List of strings/regex patterns to match and include only database entities that match.","type":"array","items":{"type":"string"},"default":[]},"excludes":{"description":"List of strings/regex patterns to match and exclude only database entities that match.","type":"array","items":{"type":"string"},"default":[]}},"additionalProperties":false},"tableFilterPattern":{"description":"Regex exclude tables or databases that matches the pattern.","title":"Table Filter Pattern","type":"object","javaType":"org.openmetadata.schema.metadataIngestion.FilterPattern","properties":{"includes":{"description":"List of strings/regex patterns to match and include only database entities that match.","type":"array","items":{"type":"string"},"default":[]},"excludes":{"description":"List of strings/regex patterns to match and exclude only database entities that match.","type":"array","items":{"type":"string"},"default":[]}},"additionalProperties":false},"parsingTimeoutLimit":{"description":"Configuration to set the timeout for parsing the query in seconds.","type":"integer","default":300,"title":"Parsing Timeout Limit (in sec.)"},"databaseFilterPattern":{"description":"Regex to only fetch databases that matches the pattern.","title":"Database Filter Pattern","type":"object","javaType":"org.openmetadata.schema.metadataIngestion.FilterPattern","properties":{"includes":{"description":"List of strings/regex patterns to match and include only database entities that match.","type":"array","items":{"type":"string"},"default":[]},"excludes":{"description":"List of strings/regex patterns to match and exclude only database entities that match.","type":"array","items":{"type":"string"},"default":[]}},"additionalProperties":false}},"additionalProperties":false}'),O=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"MessagingServiceMetadataPipeline","description":"MessagingService Metadata Pipeline Configuration.","type":"object","definitions":{"messagingMetadataConfigType":{"description":"Messaging Source Config Metadata Pipeline type","type":"string","enum":["MessagingMetadata"],"default":"MessagingMetadata"}},"properties":{"type":{"description":"Pipeline type","$ref":"#/definitions/messagingMetadataConfigType","default":"MessagingMetadata"},"topicFilterPattern":{"description":"Regex to only fetch topics that matches the pattern.","title":"Topic Filter Pattern","type":"object","javaType":"org.openmetadata.schema.metadataIngestion.FilterPattern","properties":{"includes":{"description":"List of strings/regex patterns to match and include only database entities that match.","type":"array","items":{"type":"string"},"default":[]},"excludes":{"description":"List of strings/regex patterns to match and exclude only database entities that match.","type":"array","items":{"type":"string"},"default":[]}},"additionalProperties":false},"generateSampleData":{"description":"Option to turn on/off generating sample data during metadata extraction.","type":"boolean","default":false,"title":"Generate Sample Data"},"markDeletedTopics":{"description":"Optional configuration to soft delete topics in OpenMetadata if the source topics are deleted. Also, if the topic is deleted, all the associated entities like sample data, lineage, etc., with that topic will be deleted","type":"boolean","default":true,"title":"Mark Deleted Topics"}},"additionalProperties":false}'),Z=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"MetadataToElasticSearchPipeline","description":"Data Insight Pipeline Configuration.","type":"object","definitions":{"metadataToESConfigType":{"description":"Pipeline Source Config Metadata Pipeline type","type":"string","enum":["MetadataToElasticSearch"],"default":"MetadataToElasticSearch"}},"properties":{"type":{"description":"Pipeline type","$ref":"#/definitions/metadataToESConfigType","default":"MetadataToElasticSearch"},"regionName":{"title":"AWS Region Name","description":"Region name. Required when using AWS Credentials.","type":"string","default":null},"caCerts":{"title":"CA Certificates","description":"Certificate path to be added in configuration. The path should be local in the Ingestion Container.","type":"string","default":null},"timeout":{"description":"Connection Timeout","type":"integer","default":30},"useSSL":{"title":"Use SSL","description":"Indicates whether to use SSL when connecting to ElasticSearch. By default, we will ignore SSL settings.","type":"boolean","default":false},"verifyCerts":{"title":"Validate Certificates","description":"Indicates whether to verify certificates when using SSL connection to ElasticSearch. Ignored by default. Is set to true, make sure to send the certificates in the property `CA Certificates`.","type":"boolean","default":false},"useAwsCredentials":{"title":"Use AWS Credentials","description":"Indicates whether to use aws credentials when connecting to OpenSearch in AWS.","type":"boolean","default":false},"searchIndexMappingLanguage":{"description":"Recreate Indexes with updated Language","javaType":"org.openmetadata.schema.type.IndexMappingLanguage","type":"string","enum":["EN","JP","ZH"],"default":"EN"},"batchSize":{"title":"Batch Size","description":"Maximum number of events entities in a batch (Default 1000).","type":"integer","default":1000},"recreateIndex":{"title":"Recreate Indexes","type":"boolean","default":true}},"required":["type"],"additionalProperties":false}'),$=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"MlModelServiceMetadataPipeline","description":"MlModelService Metadata Pipeline Configuration.","type":"object","definitions":{"mlModelMetadataConfigType":{"description":"MlModel Source Config Metadata Pipeline type","type":"string","enum":["MlModelMetadata"],"default":"MlModelMetadata"}},"properties":{"type":{"description":"Pipeline type","$ref":"#/definitions/mlModelMetadataConfigType","default":"MlModelMetadata"},"mlModelFilterPattern":{"description":"Regex to only fetch MlModels with names matching the pattern.","title":"ML Model Filter Pattern","type":"object","javaType":"org.openmetadata.schema.metadataIngestion.FilterPattern","properties":{"includes":{"description":"List of strings/regex patterns to match and include only database entities that match.","type":"array","items":{"type":"string"},"default":[]},"excludes":{"description":"List of strings/regex patterns to match and exclude only database entities that match.","type":"array","items":{"type":"string"},"default":[]}},"additionalProperties":false},"markDeletedMlModels":{"description":"Optional configuration to soft delete MlModels in OpenMetadata if the source MlModels are deleted. Also, if the MlModel is deleted, all the associated entities like lineage, etc., with that MlModels will be deleted","type":"boolean","default":true,"title":"Mark Deleted ML Models"}},"additionalProperties":false}'),B=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"PipelineServiceMetadataPipeline","description":"PipelineService Metadata Pipeline Configuration.","type":"object","definitions":{"pipelineMetadataConfigType":{"description":"Pipeline Source Config Metadata Pipeline type","type":"string","enum":["PipelineMetadata"],"default":"PipelineMetadata"}},"properties":{"type":{"description":"Pipeline type","$ref":"#/definitions/pipelineMetadataConfigType","default":"PipelineMetadata"},"includeLineage":{"description":"Optional configuration to turn off fetching lineage from pipelines.","type":"boolean","default":true,"title":"Include Lineage"},"includeOwners":{"description":"Set the \'Include Owners\' toggle to control whether to include owners to the ingested entity if the owner email matches with a user stored in the OM server as part of metadata ingestion. If the ingested entity already exists and has an owner, the owner will not be overwritten.","type":"boolean","default":true,"title":"Include Owners"},"pipelineFilterPattern":{"description":"Regex exclude pipelines.","title":"Pipeline Filter Pattern","type":"object","javaType":"org.openmetadata.schema.metadataIngestion.FilterPattern","properties":{"includes":{"description":"List of strings/regex patterns to match and include only database entities that match.","type":"array","items":{"type":"string"},"default":[]},"excludes":{"description":"List of strings/regex patterns to match and exclude only database entities that match.","type":"array","items":{"type":"string"},"default":[]}},"additionalProperties":false},"dbServiceNames":{"title":"Database Service Names List","description":"List of Database Service Names for creation of lineage","type":"array","items":{"type":"string"}},"markDeletedPipelines":{"description":"Optional configuration to soft delete Pipelines in OpenMetadata if the source Pipelines are deleted. Also, if the Pipeline is deleted, all the associated entities like lineage, etc., with that Pipeline will be deleted","type":"boolean","default":true,"title":"Mark Deleted Pipeline"},"includeTags":{"description":"Optional configuration to toggle the tags ingestion.","type":"boolean","default":true,"title":"Include Tags"}},"additionalProperties":false}'),G=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"SearchServiceMetadataPipeline","description":"SearchService Metadata Pipeline Configuration.","type":"object","definitions":{"searchMetadataConfigType":{"description":"Search Source Config Metadata Pipeline type","type":"string","enum":["SearchMetadata"],"default":"SearchMetadata"}},"properties":{"type":{"description":"Pipeline type","$ref":"#/definitions/searchMetadataConfigType","default":"SearchMetadata"},"searchIndexFilterPattern":{"title":"Search Index Filter Pattern","description":"Regex to only fetch search indexes that matches the pattern.","type":"object","javaType":"org.openmetadata.schema.metadataIngestion.FilterPattern","properties":{"includes":{"description":"List of strings/regex patterns to match and include only database entities that match.","type":"array","items":{"type":"string"},"default":[]},"excludes":{"description":"List of strings/regex patterns to match and exclude only database entities that match.","type":"array","items":{"type":"string"},"default":[]}},"additionalProperties":false},"markDeletedSearchIndexes":{"title":"Mark Deleted Search Index","description":"Optional configuration to soft delete search indexes in OpenMetadata if the source search indexes are deleted. Also, if the search index is deleted, all the associated entities like lineage, etc., with that search index will be deleted","type":"boolean","default":true},"includeSampleData":{"title":"Include Sample Data","description":"Optional configuration to turn off fetching sample data for search index.","type":"boolean","default":true},"sampleSize":{"title":"Sample Size","description":"No. of records of sample data we want to ingest.","default":10,"type":"integer"}},"additionalProperties":false}'),q=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"StorageServiceMetadataPipeline","description":"StorageService Metadata Pipeline Configuration.","type":"object","definitions":{"storageMetadataConfigType":{"description":"Object Store Source Config Metadata Pipeline type","type":"string","enum":["StorageMetadata"],"default":"StorageMetadata"},"noMetadataConfigurationSource":{"title":"No Global Manifest","description":"No manifest file available. Ingestion would look for bucket-level metadata file instead","type":"object","additionalProperties":false}},"properties":{"type":{"description":"Pipeline type","$ref":"#/definitions/storageMetadataConfigType","default":"StorageMetadata"},"containerFilterPattern":{"description":"Regex to only fetch containers that matches the pattern.","type":"object","javaType":"org.openmetadata.schema.metadataIngestion.FilterPattern","properties":{"includes":{"description":"List of strings/regex patterns to match and include only database entities that match.","type":"array","items":{"type":"string"},"default":[]},"excludes":{"description":"List of strings/regex patterns to match and exclude only database entities that match.","type":"array","items":{"type":"string"},"default":[]}},"additionalProperties":false},"storageMetadataConfigSource":{"mask":true,"title":"Storage Metadata Configuration Source","oneOf":[{"$ref":"#/definitions/noMetadataConfigurationSource"},{"$schema":"http://json-schema.org/draft-07/schema#","title":"Storage Metadata Local Config","description":"Storage Metadata Manifest file path config.","javaType":"org.openmetadata.schema.metadataIngestion.storage.StorageMetadataLocalConfig","type":"object","properties":{"manifestFilePath":{"title":"Storage Metadata Manifest File Path","description":"Storage Metadata manifest file path to extract locations to ingest from.","type":"string"}},"additionalProperties":false,"required":["manifestFilePath"]},{"$schema":"http://json-schema.org/draft-07/schema#","title":"Storage Metadata Http Config","description":"Storage Metadata Manifest file HTTP path config.","javaType":"org.openmetadata.schema.metadataIngestion.storage.StorageMetadataHttpConfig","type":"object","properties":{"manifestHttpPath":{"title":"Storage Metadata Manifest HTTP Path","description":"Storage Metadata manifest http file path to extract locations to ingest from.","type":"string"}},"additionalProperties":false,"required":["manifestHttpPath"]},{"$schema":"http://json-schema.org/draft-07/schema#","title":"Storage Metadata S3 Config","description":"Storage Metadata Manifest file S3 path config.","javaType":"org.openmetadata.schema.metadataIngestion.storage.StorageMetadataS3Config","type":"object","properties":{"securityConfig":{"title":"S3 Security Config","$schema":"http://json-schema.org/draft-07/schema#","description":"AWS credentials configs.","type":"object","javaType":"org.openmetadata.schema.security.credentials.AWSCredentials","properties":{"awsAccessKeyId":{"title":"AWS Access Key ID","description":"AWS Access key ID.","type":"string"},"awsSecretAccessKey":{"title":"AWS Secret Access Key","description":"AWS Secret Access Key.","type":"string","format":"password"},"awsRegion":{"title":"AWS Region","description":"AWS Region","type":"string"},"awsSessionToken":{"title":"AWS Session Token","description":"AWS Session Token.","type":"string"},"endPointURL":{"title":"Endpoint URL","description":"EndPoint URL for the AWS","type":"string","format":"uri"},"profileName":{"title":"Profile Name","description":"The name of a profile to use with the boto session.","type":"string"},"assumeRoleArn":{"title":"Role Arn for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Required Field in case of Assume Role","type":"string"},"assumeRoleSessionName":{"title":"Role Session Name for Assume Role","description":"An identifier for the assumed role session. Use the role session name to uniquely identify a session when the same role is assumed by different principals or for different reasons. Required Field in case of Assume Role","type":"string","default":"OpenMetadataSession"},"assumeRoleSourceIdentity":{"title":"Source Identity for Assume Role","description":"The Amazon Resource Name (ARN) of the role to assume. Optional Field in case of Assume Role","type":"string"}},"additionalProperties":false,"required":["awsRegion"]},"prefixConfig":{"title":"Storage Metadata Prefix Config","$schema":"http://json-schema.org/draft-07/schema#","description":"Details of the bucket where the storage metadata manifest file is stored","javaType":"org.openmetadata.schema.metadataIngestion.storage.StorageMetadataBucketDetails","type":"object","properties":{"containerName":{"title":"Storage Metadata Container Name","description":"Name of the top level container where the storage metadata file is stored","type":"string"},"objectPrefix":{"title":"Storage Metadata Object Prefix","description":"Path of the folder where the storage metadata file is stored. If the file is at the root, you can keep it empty.","type":"string"}},"additionalProperties":false,"required":["containerName"]}},"additionalProperties":false,"required":["prefixConfig"]},{"$schema":"http://json-schema.org/draft-07/schema#","title":"Storage Metadata ADLS Config","description":"Storage Metadata Manifest file ADLS path config.","javaType":"org.openmetadata.schema.metadataIngestion.storage.StorageMetadataADLSConfig","type":"object","properties":{"securityConfig":{"title":"S3 Security Config","$schema":"http://json-schema.org/draft-07/schema#","description":"Azure Datalake Credentials","type":"object","javaType":"org.openmetadata.schema.security.credentials.AzureCredentials","properties":{"clientId":{"title":"Client ID","description":"Your Service Principal App ID (Client ID)","type":"string"},"clientSecret":{"title":"Client Secret","description":"Your Service Principal Password (Client Secret)","type":"string","format":"password"},"tenantId":{"title":"Tenant ID","description":"Tenant ID of your Azure Subscription","type":"string"},"accountName":{"title":"Account Name","description":"Account Name of your storage account","type":"string"}},"additionalProperties":false,"required":["clientId","clientSecret","tenantId","accountName"]},"prefixConfig":{"title":"Storage Metadata Prefix Config","$ref":"#/properties/storageMetadataConfigSource/oneOf/3/properties/prefixConfig"}},"additionalProperties":false,"required":["prefixConfig"]}]}},"additionalProperties":false}'),U=JSON.parse('{"$schema":"http://json-schema.org/draft-07/schema#","title":"TestSuitePipeline","description":"TestSuite Pipeline Configuration.","type":"object","definitions":{"testSuiteConfigType":{"description":"Pipeline Source Config Metadata Pipeline type","type":"string","enum":["TestSuite"],"default":"TestSuite"}},"properties":{"type":{"description":"Pipeline type","$ref":"#/definitions/testSuiteConfigType","default":"TestSuite"},"entityFullyQualifiedName":{"description":"Fully qualified name of the entity to be tested.","type":"string","minLength":1,"maxLength":3072},"profileSample":{"description":"Percentage of data or no. of rows we want to execute the profiler and tests on","type":"number","default":null,"title":"Profile Sample"},"profileSampleType":{"title":"Profile Sample Type","description":"Type of Profile Sample (percentage or rows)","type":"string","enum":["PERCENTAGE","ROWS"],"default":"PERCENTAGE"}},"required":["type","entityFullyQualifiedName"],"additionalProperties":false}'),H=function(e){var t=e.pipeLineType,i=e.className,n=e.okText,r=e.cancelText,o=e.serviceCategory,g=e.workflowData,P=e.operationType,C=e.onCancel,v=e.onFocus,T=e.onSubmit,H=e.onChange,W=(0,a.CR)((0,l.useState)(g),2),z=W[0],V=W[1],J=(0,d.$)().t,_=(0,l.useMemo)((function(){return function(e,t){var i,n={};switch(e){case x.Hz.Metadata:n=(0,a.pi)({},function(e){switch(e){case A.u.DATABASE_SERVICES:return N;case A.u.DASHBOARD_SERVICES:return E;case A.u.MESSAGING_SERVICES:return O;case A.u.ML_MODEL_SERVICES:return $;case A.u.PIPELINE_SERVICES:return B;case A.u.STORAGE_SERVICES:return q;case A.u.SEARCH_SERVICES:return G;default:return{}}}(t));break;case x.Hz.Profiler:n=(0,a.pi)({},L);break;case x.Hz.Usage:n=(0,a.pi)({},R);break;case x.Hz.Lineage:n=(0,a.pi)({},j);break;case x.Hz.Dbt:n=(0,a.pi)({},k);break;case x.Hz.TestSuite:n=(0,a.pi)({},U);break;case x.Hz.ElasticSearchReindex:n=(0,a.pi)({},Z);break;case x.Hz.DataInsight:n=(0,a.pi)({},F);break;default:n={}}var r=n;return(0,a.pi)((0,a.pi)({},r),{properties:(0,a.pi)((0,a.pi)({},r.properties),{name:{description:"Name of the workflow",type:"string"},enableDebugLog:{title:"Enable Debug Log",type:"boolean",default:!1}}),required:(0,a.ev)((0,a.ev)([],(0,a.CR)(null!==(i=r.required)&&void 0!==i?i:[])),["name"])})}(t,o)}),[t,o]),K=t===x.Hz.ElasticSearchReindex,Y=t===x.Hz.Dbt,Q=(0,l.useMemo)((function(){var e=(0,a.pi)({},w.Up);return K&&(e=(0,a.pi)((0,a.pi)({},e),w.Dr)),P===I.Y.EDIT&&(e=(0,a.pi)((0,a.pi)({},e),w.ul)),e}),[t,P]),X={BooleanField:h.Z,ArrayField:D};return l.createElement(c.ZP,{focusOnFirstError:!0,noHtml5Validate:!0,className:m()("rjsf no-header",i),fields:X,formContext:{handleFocus:v},formData:z,idSeparator:"/",schema:_,showErrorList:!1,templates:{DescriptionFieldTemplate:y.Z,FieldErrorTemplate:b.u,ObjectFieldTemplate:S.O},transformErrors:M.O5,uiSchema:Q,validator:p.Z,onChange:function(e){var t;if(e.formData){V(e.formData);var i=(0,a.pi)({},e.formData);K&&(i=(0,a.pi)({},(0,s.omit)(i,["useSSL","verifyCerts","timeout","caCerts","useAwsCredentials","regionName"]))),Y&&(i=(0,a.pi)((0,a.pi)({},i),{dbtConfigSource:(0,a.pi)({},(0,s.omitBy)(null!==(t=i.dbtConfigSource)&&void 0!==t?t:{},s.isUndefined))})),null==H||H(i)}},onFocus:v,onSubmit:function(e){var t;if(e.formData){var i=(0,a.pi)({},e.formData);K&&(i=(0,a.pi)({},(0,s.omit)(i,["useSSL","verifyCerts","timeout","caCerts","useAwsCredentials","regionName"]))),Y&&(i=(0,a.pi)((0,a.pi)({},i),{dbtConfigSource:(0,a.pi)({},(0,s.omitBy)(null!==(t=i.dbtConfigSource)&&void 0!==t?t:{},s.isUndefined))})),T(i)}}},l.createElement("div",{className:"d-flex w-full justify-end"},l.createElement(u.Z,null,l.createElement(f.Z,{type:"link",onClick:C},null!=r?r:J("label.cancel")),l.createElement(f.Z,{"data-testid":"submit-btn",htmlType:"submit",type:"primary"},null!=n?n:J("label.submit")))))},W=i(78666),z=i(61105),V=i(93895),J=i(75838),_=i(95137),K=i(59842),Y=i(56091),Q=i(12439),X=i(79508),ee=i(92130),te=function(e){var t=e.disabledCronChange,i=e.includePeriodOptions,a=e.onBack,n=e.onChange,o=e.onDeploy,s=e.scheduleInterval,c=e.status,p=e.submitButtonLabel,u=e.children,g=(0,d.$)().t;return l.createElement(r.Z,{"data-testid":"schedule-intervel-container",layout:"vertical",onFinish:o},l.createElement(ee.Z,{disabledCronChange:t,includePeriodOptions:i,value:s,onChange:n}),u,l.createElement(C.Z,{className:"d-flex justify-end mt-4",span:24},l.createElement(f.Z,{className:"m-r-xs","data-testid":"back-button",type:"link",onClick:a},l.createElement("span",null,g("label.back"))),"success"===c?l.createElement(f.Z,{disabled:!0,className:"w-16 opacity-100 p-x-md p-y-xxs",type:"primary"},l.createElement(X.Z,null)):l.createElement(f.Z,{className:"font-medium p-x-md p-y-xxs h-auto rounded-6","data-testid":"deploy-button",htmlType:"submit",loading:c===z.Vu.WAITING,type:"primary"},p)))},ie=function(e){var t,i,c=e.activeIngestionStep,p=e.data,u=e.handleCancelClick,f=e.handleViewServiceClick,g=e.heading,m=e.ingestionAction,h=void 0===m?"":m,y=e.ingestionProgress,b=void 0===y?0:y,S=e.isIngestionCreated,P=void 0!==S&&S,C=e.isIngestionDeployed,v=void 0!==C&&C,T=e.onAddIngestionSave,D=e.onIngestionDeploy,w=e.onSuccessSave,M=e.onUpdateIngestion,A=e.pipelineType,E=e.serviceCategory,N=e.serviceData,L=e.setActiveIngestionStep,j=e.showDeployButton,R=e.showSuccessScreen,F=void 0===R||R,k=e.status,O=e.onFocus,Z=(0,d.$)().t,$=(0,_.Eu)().currentUser,B=(0,a.CR)((0,l.useState)((function(){var e,t;return(0,a.pi)((0,a.pi)({},null!==(e=null==p?void 0:p.sourceConfig.config)&&void 0!==e?e:{}),{name:null!==(t=null==p?void 0:p.name)&&void 0!==t?t:(0,J.SK)(N.name,A),enableDebugLog:(null==p?void 0:p.loggerLevel)===x.B$.Debug})})),2),G=B[0],q=B[1],U=(0,a.CR)((0,l.useState)((function(){var e;return null!==(e=null==p?void 0:p.airflowConfig.scheduleInterval)&&void 0!==e?e:(0,V.Fu)(A)})),2),X=U[0],ee=U[1],ie=(0,l.useMemo)((function(){var e,t;return{ingestionName:null!==(e=null==p?void 0:p.name)&&void 0!==e?e:(0,J.SK)(N.name,A),retries:null!==(t=null==p?void 0:p.airflowConfig.retries)&&void 0!==t?t:0}}),[p,A,N]),ae=ie.ingestionName,ne=ie.retries,re=(0,l.useMemo)((function(){return A===x.Hz.DataInsight||A===x.Hz.ElasticSearchReindex}),[A]),oe=(0,l.useMemo)((function(){return re?Z("label.view-entity",{entity:Z("label.pipeline-detail-plural")}):void 0}),[re]),se=(0,a.CR)((0,l.useState)(z.Vu.INITIAL),2),le=se[0],de=se[1],ce=(0,a.CR)((0,l.useState)(!1),2),pe=ce[0],ue=ce[1],fe=function(e){L(e)};return l.createElement("div",{"data-testid":"add-ingestion-container"},l.createElement(n.Z.Title,{className:"font-normal",level:5},g),l.createElement(Y.Z,{activeStep:c,excludeSteps:[],steps:W.V1}),l.createElement("div",{className:"p-t-lg"},1===c&&l.createElement(H,{okText:Z("label.next"),operationType:k,pipeLineType:A,serviceCategory:E,workflowData:G,onCancel:u,onChange:function(e){return q(e)},onFocus:O,onSubmit:function(e){q(e),fe(2)}}),2===c&&l.createElement(te,{disabledCronChange:A===x.Hz.DataInsight,includePeriodOptions:A===x.Hz.DataInsight?["day"]:void 0,scheduleInterval:X,status:le,submitButtonLabel:(0,s.isUndefined)(p)?Z("label.add-deploy"):Z("label.submit"),onBack:function(){L(1)},onChange:function(e){return ee(e)},onDeploy:function(e){k===I.Y.ADD?function(e){var t,i=null!=G?G:{},n=i.name,r=void 0===n?"":n,o=i.enableDebugLog,l=(0,a._T)(i,["name","enableDebugLog"]),d=(0,s.trim)(r);de(z.Vu.WAITING);var c=new Date(Date.now());c.setUTCHours(0,0,0,0),c.setDate(c.getDate()-1);var p={airflowConfig:{scheduleInterval:(0,s.isEmpty)(X)?void 0:X,startDate:c,retries:e.retries},loggerLevel:o?x.B$.Debug:x.B$.Info,name:d,displayName:d,owner:{id:null!==(t=null==$?void 0:$.id)&&void 0!==t?t:"",type:"user"},pipelineType:A,service:{id:N.id,type:E.slice(0,-1)},sourceConfig:{config:(0,a.pi)({},l)}};T&&(ue(!0),T(p).then((function(){F?fe(3):null==w||w()})).catch((function(){})).finally((function(){setTimeout((function(){return de(z.Vu.INITIAL)}),500),ue(!1)})))}(e):function(e){var t;if(p){var i=(0,a.pi)((0,a.pi)({},p),{airflowConfig:(0,a.pi)((0,a.pi)({},p.airflowConfig),{scheduleInterval:(0,s.isEmpty)(X)?void 0:X,retries:e.retries}),loggerLevel:(null==G?void 0:G.enableDebugLog)?x.B$.Debug:x.B$.Info,sourceConfig:{config:(0,a.pi)({},null!==(t=(0,s.omit)(G,["name","enableDebugLog"]))&&void 0!==t?t:{})}});M&&(de(z.Vu.WAITING),ue(!0),M(i,p,p.id,p.name).then((function(){de(z.Vu.SUCCESS),F?fe(3):null==w||w()})).finally((function(){setTimeout((function(){return de(z.Vu.INITIAL)}),500),setTimeout((function(){return ue(!1)}),500)})))}}(e)}},l.createElement(r.Z.Item,{className:"m-t-xs",colon:!1,initialValue:ne,label:Z("label.number-of-retries"),name:"retries"},l.createElement(o.Z,{min:0,type:"number",onFocus:function(){return O("root/retries")}}))),c>2&&f&&l.createElement(K.Z,{handleDeployClick:function(){ue(!0),null==D||D().finally((function(){setTimeout((function(){return ue(!1)}),500)}))},handleViewServiceClick:f,name:ae,showDeployButton:j,showIngestionButton:!1,state:k,successMessage:(t=Z(j?"message.action-has-been-done-but-failed-to-deploy":"message.action-has-been-done-but-deploy-successfully",{action:Z("label.updated-lowercase")}),i=Z(j?"message.action-has-been-done-but-failed-to-deploy":"message.action-has-been-done-but-deploy-successfully",{action:Z("label.created-lowercase")}),l.createElement("span",null,l.createElement("span",{className:"font-medium"},'"'+ae+'"'),l.createElement("span",null,k===I.Y.ADD?i:t))),viewServiceText:oe}),l.createElement(Q.Z,{action:h,ingestionName:ae,isDeployed:v,isIngestionCreated:P,progress:b,visible:pe})))}},56091:function(e,t,i){i.d(t,{Z:function(){return C}});var a=i(75899),n=i(94184),r=i.n(n),o=i(67294),s=i(93379),l=i.n(s),d=i(7795),c=i.n(d),p=i(90569),u=i.n(p),f=i(3565),g=i.n(f),m=i(19216),h=i.n(m),y=i(44589),b=i.n(y),S=i(71927),P={};P.styleTagTransform=b(),P.setAttributes=g(),P.insert=u().bind(null,"head"),P.domAPI=c(),P.insertStyleElement=h(),l()(S.Z,P),S.Z&&S.Z.locals&&S.Z.locals;var C=function(e){var t=e.steps,i=e.activeStep,n=e.excludeSteps,s=void 0===n?[]:n,l=(0,o.useMemo)((function(){return t.filter((function(e){return!s.includes(e.step)})).map((function(e){return{icon:o.createElement("span",{className:r()("ingestion-rounder self-center",{active:e.step===i},{completed:e.step<i}),"data-testid":"step-icon-"+e.step}),key:e.name,title:e.name}}))}),[t,i,s]);return o.createElement("div",{className:"stepper-container p-x-24","data-testid":"stepper-container"},o.createElement(a.Z,{current:i,items:l,labelPlacement:"vertical",size:"small"}))}},21801:function(e,t,i){var a=i(49409),n=i(12028),r=i(96486),o=i(67294);t.Z=function(e){return o.createElement(a.Z.Item,{className:"m-t-md",colon:!1,label:(0,r.startCase)(e.name),labelAlign:"left",labelCol:{span:8}},o.createElement(n.Z,{checked:e.formData,id:e.idSchema.$id,onChange:function(t){return e.onChange(t)},onClick:function(){var t,i;return null===(i=null===(t=e.formContext)||void 0===t?void 0:t.handleFocus)||void 0===i?void 0:i.call(t,e.idSchema.$id)}}))}},68805:function(e,t){t.Z=function(){return null}},25074:function(e,t,i){i.d(t,{u:function(){return o}});var a=i(70655),n=i(96486),r=i(67294),o=function(e){var t,i=(0,a.ev)([],(0,a.CR)(new Set(null!==(t=e.errors)&&void 0!==t?t:[])));return(0,n.isEmpty)(i)?null:r.createElement("div",null,r.createElement("ul",null,i.map((function(t){return r.createElement("li",{className:"ant-form-item-explain-error",key:e.schema.$id+"-"+e.idSchema.$id},t)}))))}},2669:function(e,t,i){i.d(t,{O:function(){return A}});var a=i(70655),n=i(49101),r=i(27279),o=i(19650),s=i(71577),l=i(94184),d=i.n(l),c=i(96486),p=i(67294),u=i(68432),f=i(55846),g=i(93379),m=i.n(g),h=i(7795),y=i.n(h),b=i(90569),S=i.n(b),P=i(3565),C=i.n(P),v=i(19216),T=i.n(v),D=i(44589),w=i.n(D),I=i(76579),x={};x.styleTagTransform=w(),x.setAttributes=C(),x.insert=S().bind(null,"head"),x.domAPI=y(),x.insertStyleElement=T(),m()(I.Z,x),I.Z&&I.Z.locals&&I.Z.locals;var M=r.Z.Panel,A=function(e){var t=(0,u.$)().t,i=e.formContext,l=e.idSchema,g=e.title,m=e.onAddClick,h=e.schema,y=e.properties.reduce((function(e,t){var i=f.S0.includes(t.name),n=(0,a.ev)([],(0,a.CR)(e.advancedProperties)),r=(0,a.ev)([],(0,a.CR)(e.normalProperties));return i?n=(0,a.ev)((0,a.ev)([],(0,a.CR)(n)),[t]):r=(0,a.ev)((0,a.ev)([],(0,a.CR)(r)),[t]),(0,a.pi)((0,a.pi)({},e),{advancedProperties:n,normalProperties:r})}),{advancedProperties:[],normalProperties:[]}),b=y.advancedProperties,S=y.normalProperties;return p.createElement(p.Fragment,null,p.createElement(o.Z,{className:"w-full justify-between"},p.createElement("label",{className:d()("control-label",{"font-medium text-base-color text-md":!h.additionalProperties}),id:l.$id+"__title"},g),h.additionalProperties&&p.createElement(s.Z,{"data-testid":"add-item-"+g,icon:p.createElement(n.Z,{style:{color:"white",fontSize:"12px"}}),id:""+l.$id,size:"small",type:"primary",onClick:function(){m(h)()},onFocus:function(){(0,c.isUndefined)(i.handleFocus)||i.handleFocus(l.$id)}})),S.map((function(e,t){return p.createElement("div",{className:d()("property-wrapper",{"additional-fields":h.additionalProperties}),key:e.content.key+"-"+t},e.content)})),!(0,c.isEmpty)(b)&&p.createElement(p.Fragment,null,p.createElement(r.Z,{className:"advanced-properties-collapse",expandIconPosition:"end"},p.createElement(M,{header:g+" "+t("label.advanced-config"),key:"1"},b.map((function(e,t){return p.createElement("div",{className:d()("property-wrapper",{"additional-fields":h.additionalProperties}),key:e.content.key+"-"+t},e.content)}))))))}},12439:function(e,t,i){var a=i(56256),n=i(83663),r=i(94184),o=i.n(r),s=i(67294),l=i(62761),d=i(38212);t.Z=function(e){var t=e.className,i=e.ingestionName,r=e.action,c=e.progress,p=e.isIngestionCreated,u=e.isDeployed,f=e.visible,g=function(e){return e?l.WZ:l.p8};return s.createElement(n.Z,{centered:!0,destroyOnClose:!0,className:o()("h-40",t),closable:!1,"data-testid":"deploy-modal",footer:null,maskClosable:!1,open:f},s.createElement("div",{className:"p-y-lg d-flex flex-col","data-testid":"body-text"},s.createElement("div",{className:o()("ingestion-content relative",t)},s.createElement(s.Fragment,null,s.createElement(a.Z.Text,{className:o()("ingestion-deploy-line"),style:{background:"linear-gradient(to right, "+l.WZ+" "+c+"%, "+l.p8+" "+c+"%)"}}),s.createElement("div",{className:"ingestion-wrappe absolute",style:{left:"16%"}},s.createElement(a.Z.Text,{className:o()("ingestion-deploy-rounder self-center"),style:{background:g(p)}},s.createElement(a.Z.Text,{className:"flex-center h-full"},s.createElement(d.ZP,{alt:"",icon:d.PJ.CREATE_INGESTION})))),s.createElement("div",{className:"ingestion-wrapper absolute",style:{left:"72%"}},s.createElement(a.Z.Text,{className:o()("ingestion-deploy-rounder self-center"),style:{background:g(u)}},s.createElement(a.Z.Text,{className:"flex-center h-full"},s.createElement(d.ZP,{alt:"",icon:d.PJ.DEPLOY_INGESTION})))))),s.createElement(a.Z.Text,{className:"text-center mt-24"},r,s.createElement(a.Z.Text,{className:"font-semibold m-l-xss"},"“"+i+"”"))))}},86879:function(e,t,i){i.d(t,{Z:function(){return M}});var a=i(70655),n=i(71230),r=i(15746),o=i(96486),s=i(67294),l=i(68432),d=i(16139),c=i(39117),p=i(73975),u=i(69523),f=i(24135),g=i(93379),m=i.n(g),h=i(7795),y=i.n(h),b=i(90569),S=i.n(b),P=i(3565),C=i.n(P),v=i(19216),T=i.n(v),D=i(44589),w=i.n(D),I=i(3765),x={};x.styleTagTransform=w(),x.setAttributes=C(),x.insert=S().bind(null,"head"),x.domAPI=y(),x.insertStyleElement=T(),m()(I.Z,x),I.Z&&I.Z.locals&&I.Z.locals;var M=function(e){var t=e.serviceType,i=e.serviceName,g=e.activeField,m=e.isWorkflow,h=e.workflowType,y=(0,l.$)().i18n,b=(0,a.CR)((0,s.useState)(!1),2),S=b[0],P=b[1],C=(0,a.CR)((0,s.useState)(""),2),v=C[0],T=C[1],D=(0,s.useCallback)((function(e){var t;if(e){var i=e.split("/");if(d.JJ.test(e))return i[1];var a=null!==(t=(0,o.last)(i))&&void 0!==t?t:"";return d.X$.test(a)?(0,o.first)(a.split("_")):a}}),[]);return(0,s.useEffect)((function(){(0,a.mG)(void 0,void 0,void 0,(function(){var e,n,r,o,s,l,d;return(0,a.Jh)(this,(function(u){switch(u.label){case 0:P(!0),u.label=1;case 1:return u.trys.push([1,3,4,5]),e="",n=y.language===p.Qv.English,r=y.language+"/"+t+"/"+i+".md",o=p.Qv.English+"/"+t+"/"+i+".md",m&&h&&(r=y.language+"/"+t+"/workflows/"+h+".md",o=p.Qv.English+"/"+t+"/workflows/"+h+".md"),[4,Promise.allSettled([(0,c.bA)(r),n?Promise.reject(""):(0,c.bA)(o)])];case 2:return s=a.CR.apply(void 0,[u.sent(),2]),l=s[0],d=s[1],"fulfilled"===l.status&&(e=l.value),n||"fulfilled"!==d.status||(e=d.value),T(e),[3,5];case 3:return u.sent(),T(""),[3,5];case 4:return P(!1),[7];case 5:return[2]}}))}))}),[i,t]),(0,s.useEffect)((function(){var e=D(g);if(e){var t=document.querySelector('[data-id="'+e+'"]');t&&(t.scrollIntoView({block:"center",behavior:"smooth",inline:"center"}),t.setAttribute("data-highlighted","true"))}}),[g,D]),S?s.createElement(u.Z,null):s.createElement(n.Z,{"data-testid":"service-requirements"},s.createElement(r.Z,{span:24},s.createElement(f.Z,{enableSeeMoreVariant:!1,markdown:v})))}},78666:function(e,t,i){i.d(t,{Pm:function(){return l},Rw:function(){return s},V1:function(){return o}});var a,n=i(23031),r=i(5302),o=[{name:n.ZP.t("label.configure-entity",{entity:n.ZP.t("label.ingestion")}),step:1},{name:n.ZP.t("label.schedule-interval"),step:2}],s={ADD:"add",EDIT:"edit"},l=((a={})[r.Hz.DataInsight]="data-insight",a[r.Hz.Dbt]="dbt-lowercase",a[r.Hz.ElasticSearchReindex]="elastic-search-re-index",a[r.Hz.Lineage]="lineage",a[r.Hz.Metadata]="metadata",a[r.Hz.Profiler]="profiler",a[r.Hz.TestSuite]="test-suite",a[r.Hz.Usage]="usage",a[r.Hz.Application]="application",a)},28517:function(e,t,i){var a;i.d(t,{g:function(){return a}}),function(e){e.CREATING="Creating",e.UPDATING="Updating",e.DEPLOYING="Deploying",e.DEPLOYED="Successfully deployed",e.DEPLOYING_ERROR="Error while deploying"}(a||(a={}))},99166:function(e,t,i){i.d(t,{MP:function(){return y},OO:function(){return b},Pg:function(){return g},U2:function(){return c},WY:function(){return f},dO:function(){return p},eM:function(){return h},iw:function(){return P},jl:function(){return u},u8:function(){return S},ws:function(){return m}});var a=i(70655),n=i(73213),r=i(62761),o=i(34530),s=i(22334),l=i(2598),d=i(39117),c=function(e){var t=e.serviceName,i=e.limit,n=e.after,r=e.before,s=e.include,d=void 0===s?o.y.NonDeleted:s;return(0,a.mG)(void 0,void 0,void 0,(function(){var e,o;return(0,a.Jh)(this,(function(a){switch(a.label){case 0:return e="/services/"+t,o={fields:"owner",limit:i,after:n,before:r,include:d},[4,l.Z.get(e,{params:o})];case 1:return[2,a.sent().data]}}))}))},p=function(e,t,i,n){return void 0===i&&(i=""),void 0===n&&(n=o.y.NonDeleted),(0,a.mG)(void 0,void 0,void 0,(function(){var r;return(0,a.Jh)(this,(function(a){switch(a.label){case 0:return r=(0,s.JP)("/services/"+e+"/name/"+t,i,"include="+n),[4,l.Z.get(r)];case 1:return[2,a.sent().data]}}))}))},u=function(e,t,i){return void 0===i&&(i=""),(0,a.mG)(void 0,void 0,void 0,(function(){var n;return(0,a.Jh)(this,(function(a){switch(a.label){case 0:return n=(0,s.JP)("/services/"+e+"/name/"+t,i),[4,l.Z.get(n)];case 1:return[2,a.sent().data]}}))}))},f=function(e,t){return(0,a.mG)(void 0,void 0,void 0,(function(){return(0,a.Jh)(this,(function(i){switch(i.label){case 0:return[4,l.Z.post("/services/"+e,t)];case 1:return[2,i.sent().data]}}))}))},g=function(e,t,i){return(0,a.mG)(void 0,void 0,void 0,(function(){return(0,a.Jh)(this,(function(t){switch(t.label){case 0:return[4,l.Z.put("/services/"+e,i)];case 1:return[2,t.sent().data]}}))}))},m=function(e,t,i){return(0,a.mG)(void 0,void 0,void 0,(function(){return(0,a.Jh)(this,(function(a){switch(a.label){case 0:return[4,l.Z.patch("/services/"+e+"/"+t,i,r.nF)];case 1:return[2,a.sent().data]}}))}))},h=function(e,t,i){return(0,a.mG)(void 0,void 0,void 0,(function(){return(0,a.Jh)(this,(function(a){switch(a.label){case 0:return[4,l.Z.patch("/services/"+e+"/"+t,i,r.nF)];case 1:return[2,a.sent().data]}}))}))},y=function(e,t){return(0,a.mG)(void 0,void 0,void 0,(function(){var i;return(0,a.Jh)(this,(function(a){switch(a.label){case 0:return i="/services/"+e+"/"+t+"/versions",[4,l.Z.get(i)];case 1:return[2,a.sent().data]}}))}))},b=function(e,t,i){return(0,a.mG)(void 0,void 0,void 0,(function(){var n;return(0,a.Jh)(this,(function(a){switch(a.label){case 0:return n="/services/"+e+"/"+t+"/versions/"+i,[4,l.Z.get(n)];case 1:return[2,a.sent().data]}}))}))},S=function(e){var t=e.search,i=e.searchIndex,o=e.currentPage,s=void 0===o?1:o,l=e.limit,c=void 0===l?r.IV:l,p=e.filters,u=e.deleted,f=void 0!==u&&u;return(0,a.mG)(void 0,void 0,void 0,(function(){return(0,a.Jh)(this,(function(e){switch(e.label){case 0:return[4,(0,d.rg)(null!=t?t:n.m,s,c,null!=p?p:"","","",i,f)];case 1:return[2,e.sent().data]}}))}))},P=function(e,t){return(0,a.mG)(void 0,void 0,void 0,(function(){return(0,a.Jh)(this,(function(i){switch(i.label){case 0:return[4,l.Z.put("/services/"+e+"/restore",{id:t})];case 1:return[2,i.sent().data]}}))}))}}}]);