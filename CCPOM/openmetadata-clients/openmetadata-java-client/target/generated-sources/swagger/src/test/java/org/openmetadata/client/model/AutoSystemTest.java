/*
 * OpenMetadata Apis
 * --- title: APIs slug: /main-concepts/metadata-standard/apis ---  # APIs  OpenMetadata supports REST APIs for getting data and in and out of the metadata service. APIs are built using general best practices of REST API design. We take a schema-first approach by defining Types and Entities in JSON Schema. We implement APIs based on these schemas.  ## Overview  ### URI  Following REST API conventions are followed for Resource URIs: - Operations for an entity are available through the Resource URI as a collection `.../api/<version>/entities`.  - Plural of the entity name is used as the collection name - example `.../api/v1/users`. - Trailing forward slash is not used in the endpoint URI. Example use `.../api/v1/databases` instead of `.../api/v1/databases/`. - Resource URI for an entity instance by the entity id is `.../api/v1/entities/{id}`.  - Resource URI for an entity instance by name is `.../api/v1/entities/name/{name}`.  ### Resource Representation  - The REST API calls return a response with JSON `Content-Type` and `Content-Length` that includes the length of the response. - All responses include the Resource ID field even though the id was provided in the request to simplify the consumption    of the response at the client. - Entity names and field names use `camelCase` per Javascript naming convention. - All resources include an attribute `href` with Resource URI. All relationship fields of an entity will also    include `href` links to the related resource for easy access. - Unknown fields sent by the client in API requests are not ignored to ensure the data sent by the client is not dropped    at the server without the user being aware of it.  ## API Organization  You can find the swagger documentation [here](/swagger.html). In a nutshell:  **Data Asset APIs** - support operations related to data asset entities. - `.../api/v1/databases` - `...api/v1/tables` - `.../api/v1/metrics` - `.../api/v1/dashboards` - `.../api/v1/reports` - `.../api/v1/pipelines` - `.../api/v1/topics`  **Service APIs** - support operations related to services from which metadata is collected: - `.../api/v1/services` is the collection of all service resources. - `.../api/v1/services/databaseService` - APIs related to database services. This includes Transactional databases - MySQL, Postgres, MSSQL, Oracle, and Data Warehouses - Apache Hive BigQuery, Redshift, and Snowflake. - `.../api/v1/services/dashboardService` - APIs related to Dashboard Services. This includes Looker, Superset, and Tableau. - `.../api/v1/services/messagingService` - APIs related to Messaging Services. This includes Apache Kafka, Redpanda, - Kinesis, and others.  **Teams & Users APIs** - `.../api/v1/teams` - APIs related to team entities - `.../api/v1/users` - APIs related to user entities  **Search & Suggest APIs** - support search and suggest APIs: - `.../api/v1/search` - collection for search and suggest APIs - `.../api/v1/search/query` - search entities using query text - `.../api/v1/search/suggest` - get suggested entities used for auto-completion  **Other APIs** - `.../api/v1/tags` for APIs related to Classification and Tag entities - `../api/v1/feeds` for APIs related to Threads and Posts entities - `.../api/v1/usage` for reporting usage information of entities
 *
 * The version of the OpenAPI document: 1.2.3
 * Contact: openmetadata-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openmetadata.client.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.openmetadata.client.model.ChangeDescription;
import org.openmetadata.client.model.EntityReference;
import org.openmetadata.client.model.LifeCycle;
import org.openmetadata.client.model.Style;
import org.openmetadata.client.model.TagLabel;
import org.openmetadata.client.model.Votes;
import org.junit.jupiter.api.Test;


/**
 * Model tests for AutoSystem
 */
class AutoSystemTest {
    private final AutoSystem model = new AutoSystem();

    /**
     * Model tests for AutoSystem
     */
    @Test
    void testAutoSystem() {
        // TODO: test AutoSystem
    }

    /**
     * Test the property 'acceptanceRecordDate'
     */
    @Test
    void acceptanceRecordDateTest() {
        // TODO: test acceptanceRecordDate
    }

    /**
     * Test the property 'acceptanceRecordTime'
     */
    @Test
    void acceptanceRecordTimeTest() {
        // TODO: test acceptanceRecordTime
    }

    /**
     * Test the property 'accompaniedByItBlock'
     */
    @Test
    void accompaniedByItBlockTest() {
        // TODO: test accompaniedByItBlock
    }

    /**
     * Test the property 'addRecordDate'
     */
    @Test
    void addRecordDateTest() {
        // TODO: test addRecordDate
    }

    /**
     * Test the property 'addRecordIp'
     */
    @Test
    void addRecordIpTest() {
        // TODO: test addRecordIp
    }

    /**
     * Test the property 'addRecordTime'
     */
    @Test
    void addRecordTimeTest() {
        // TODO: test addRecordTime
    }

    /**
     * Test the property 'administrators'
     */
    @Test
    void administratorsTest() {
        // TODO: test administrators
    }

    /**
     * Test the property 'administratorsInfo'
     */
    @Test
    void administratorsInfoTest() {
        // TODO: test administratorsInfo
    }

    /**
     * Test the property 'allowedProportions'
     */
    @Test
    void allowedProportionsTest() {
        // TODO: test allowedProportions
    }

    /**
     * Test the property 'approvedSourcingModel'
     */
    @Test
    void approvedSourcingModelTest() {
        // TODO: test approvedSourcingModel
    }

    /**
     * Test the property 'architect'
     */
    @Test
    void architectTest() {
        // TODO: test architect
    }

    /**
     * Test the property 'archiveDate'
     */
    @Test
    void archiveDateTest() {
        // TODO: test archiveDate
    }

    /**
     * Test the property 'asType'
     */
    @Test
    void asTypeTest() {
        // TODO: test asType
    }

    /**
     * Test the property 'author'
     */
    @Test
    void authorTest() {
        // TODO: test author
    }

    /**
     * Test the property 'autoSystemClassification'
     */
    @Test
    void autoSystemClassificationTest() {
        // TODO: test autoSystemClassification
    }

    /**
     * Test the property 'availabilityOfSpecialOrBiometricPd'
     */
    @Test
    void availabilityOfSpecialOrBiometricPdTest() {
        // TODO: test availabilityOfSpecialOrBiometricPd
    }

    /**
     * Test the property 'basisForDevelopmentAndInputIntoPe'
     */
    @Test
    void basisForDevelopmentAndInputIntoPeTest() {
        // TODO: test basisForDevelopmentAndInputIntoPe
    }

    /**
     * Test the property 'businessRecoveryCoordinator'
     */
    @Test
    void businessRecoveryCoordinatorTest() {
        // TODO: test businessRecoveryCoordinator
    }

    /**
     * Test the property 'changeDescription'
     */
    @Test
    void changeDescriptionTest() {
        // TODO: test changeDescription
    }

    /**
     * Test the property 'children'
     */
    @Test
    void childrenTest() {
        // TODO: test children
    }

    /**
     * Test the property 'clientPartEquioment'
     */
    @Test
    void clientPartEquiomentTest() {
        // TODO: test clientPartEquioment
    }

    /**
     * Test the property 'color'
     */
    @Test
    void colorTest() {
        // TODO: test color
    }

    /**
     * Test the property 'confluenceSpaceLink'
     */
    @Test
    void confluenceSpaceLinkTest() {
        // TODO: test confluenceSpaceLink
    }

    /**
     * Test the property 'creationProjectCode'
     */
    @Test
    void creationProjectCodeTest() {
        // TODO: test creationProjectCode
    }

    /**
     * Test the property 'criticalDayTime'
     */
    @Test
    void criticalDayTimeTest() {
        // TODO: test criticalDayTime
    }

    /**
     * Test the property 'criticalityClass'
     */
    @Test
    void criticalityClassTest() {
        // TODO: test criticalityClass
    }

    /**
     * Test the property 'dataAvailabilityonSpecialServiceClients'
     */
    @Test
    void dataAvailabilityonSpecialServiceClientsTest() {
        // TODO: test dataAvailabilityonSpecialServiceClients
    }

    /**
     * Test the property 'dataProducts'
     */
    @Test
    void dataProductsTest() {
        // TODO: test dataProducts
    }

    /**
     * Test the property 'db'
     */
    @Test
    void dbTest() {
        // TODO: test db
    }

    /**
     * Test the property 'dbVersion'
     */
    @Test
    void dbVersionTest() {
        // TODO: test dbVersion
    }

    /**
     * Test the property 'decommissioningDate'
     */
    @Test
    void decommissioningDateTest() {
        // TODO: test decommissioningDate
    }

    /**
     * Test the property 'degreeOfConfidentiality'
     */
    @Test
    void degreeOfConfidentialityTest() {
        // TODO: test degreeOfConfidentiality
    }

    /**
     * Test the property 'deleted'
     */
    @Test
    void deletedTest() {
        // TODO: test deleted
    }

    /**
     * Test the property 'department'
     */
    @Test
    void departmentTest() {
        // TODO: test department
    }

    /**
     * Test the property 'deprecated'
     */
    @Test
    void deprecatedTest() {
        // TODO: test deprecated
    }

    /**
     * Test the property 'deputyProductManager'
     */
    @Test
    void deputyProductManagerTest() {
        // TODO: test deputyProductManager
    }

    /**
     * Test the property 'description'
     */
    @Test
    void descriptionTest() {
        // TODO: test description
    }

    /**
     * Test the property 'devHead'
     */
    @Test
    void devHeadTest() {
        // TODO: test devHead
    }

    /**
     * Test the property 'devStrategicProspects'
     */
    @Test
    void devStrategicProspectsTest() {
        // TODO: test devStrategicProspects
    }

    /**
     * Test the property 'developerInformation'
     */
    @Test
    void developerInformationTest() {
        // TODO: test developerInformation
    }

    /**
     * Test the property 'disabled'
     */
    @Test
    void disabledTest() {
        // TODO: test disabled
    }

    /**
     * Test the property 'displayName'
     */
    @Test
    void displayNameTest() {
        // TODO: test displayName
    }

    /**
     * Test the property 'domain'
     */
    @Test
    void domainTest() {
        // TODO: test domain
    }

    /**
     * Test the property 'durationSourcingModel'
     */
    @Test
    void durationSourcingModelTest() {
        // TODO: test durationSourcingModel
    }

    /**
     * Test the property 'electronicCopyDoc'
     */
    @Test
    void electronicCopyDocTest() {
        // TODO: test electronicCopyDoc
    }

    /**
     * Test the property 'endSupportDate'
     */
    @Test
    void endSupportDateTest() {
        // TODO: test endSupportDate
    }

    /**
     * Test the property 'experts'
     */
    @Test
    void expertsTest() {
        // TODO: test experts
    }

    /**
     * Test the property 'extension'
     */
    @Test
    void extensionTest() {
        // TODO: test extension
    }

    /**
     * Test the property 'finalProductAllocation'
     */
    @Test
    void finalProductAllocationTest() {
        // TODO: test finalProductAllocation
    }

    /**
     * Test the property 'followers'
     */
    @Test
    void followersTest() {
        // TODO: test followers
    }

    /**
     * Test the property 'fullNameOwner'
     */
    @Test
    void fullNameOwnerTest() {
        // TODO: test fullNameOwner
    }

    /**
     * Test the property 'fullyQualifiedName'
     */
    @Test
    void fullyQualifiedNameTest() {
        // TODO: test fullyQualifiedName
    }

    /**
     * Test the property 'href'
     */
    @Test
    void hrefTest() {
        // TODO: test href
    }

    /**
     * Test the property 'id'
     */
    @Test
    void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'industrialEndDate'
     */
    @Test
    void industrialEndDateTest() {
        // TODO: test industrialEndDate
    }

    /**
     * Test the property 'industrialStartDate'
     */
    @Test
    void industrialStartDateTest() {
        // TODO: test industrialStartDate
    }

    /**
     * Test the property 'installationKit'
     */
    @Test
    void installationKitTest() {
        // TODO: test installationKit
    }

    /**
     * Test the property 'ipOfLastPostEdit'
     */
    @Test
    void ipOfLastPostEditTest() {
        // TODO: test ipOfLastPostEdit
    }

    /**
     * Test the property 'ispdn'
     */
    @Test
    void ispdnTest() {
        // TODO: test ispdn
    }

    /**
     * Test the property 'itCommunicationItSla'
     */
    @Test
    void itCommunicationItSlaTest() {
        // TODO: test itCommunicationItSla
    }

    /**
     * Test the property 'itRecoveryCoordinator'
     */
    @Test
    void itRecoveryCoordinatorTest() {
        // TODO: test itRecoveryCoordinator
    }

    /**
     * Test the property 'keyCompetencies'
     */
    @Test
    void keyCompetenciesTest() {
        // TODO: test keyCompetencies
    }

    /**
     * Test the property 'lifeCycle'
     */
    @Test
    void lifeCycleTest() {
        // TODO: test lifeCycle
    }

    /**
     * Test the property 'linkToUserList'
     */
    @Test
    void linkToUserListTest() {
        // TODO: test linkToUserList
    }

    /**
     * Test the property 'lisOfOtherSystemConnections'
     */
    @Test
    void lisOfOtherSystemConnectionsTest() {
        // TODO: test lisOfOtherSystemConnections
    }

    /**
     * Test the property 'main'
     */
    @Test
    void mainTest() {
        // TODO: test main
    }

    /**
     * Test the property 'mainFunctionsAndPurpose'
     */
    @Test
    void mainFunctionsAndPurposeTest() {
        // TODO: test mainFunctionsAndPurpose
    }

    /**
     * Test the property 'mc'
     */
    @Test
    void mcTest() {
        // TODO: test mc
    }

    /**
     * Test the property 'membershipInComplianceCircuits'
     */
    @Test
    void membershipInComplianceCircuitsTest() {
        // TODO: test membershipInComplianceCircuits
    }

    /**
     * Test the property 'mnemonicCode'
     */
    @Test
    void mnemonicCodeTest() {
        // TODO: test mnemonicCode
    }

    /**
     * Test the property 'modificationsInfo'
     */
    @Test
    void modificationsInfoTest() {
        // TODO: test modificationsInfo
    }

    /**
     * Test the property 'mutuallyExclusive'
     */
    @Test
    void mutuallyExclusiveTest() {
        // TODO: test mutuallyExclusive
    }

    /**
     * Test the property 'name'
     */
    @Test
    void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'note'
     */
    @Test
    void noteTest() {
        // TODO: test note
    }

    /**
     * Test the property 'numberInList'
     */
    @Test
    void numberInListTest() {
        // TODO: test numberInList
    }

    /**
     * Test the property 'operationType'
     */
    @Test
    void operationTypeTest() {
        // TODO: test operationType
    }

    /**
     * Test the property 'ordApointmentOwner'
     */
    @Test
    void ordApointmentOwnerTest() {
        // TODO: test ordApointmentOwner
    }

    /**
     * Test the property 'orderForDecommissioning'
     */
    @Test
    void orderForDecommissioningTest() {
        // TODO: test orderForDecommissioning
    }

    /**
     * Test the property 'outsideRussianFederationAccess'
     */
    @Test
    void outsideRussianFederationAccessTest() {
        // TODO: test outsideRussianFederationAccess
    }

    /**
     * Test the property 'ownDevelopmentOrPurchasedSoftware'
     */
    @Test
    void ownDevelopmentOrPurchasedSoftwareTest() {
        // TODO: test ownDevelopmentOrPurchasedSoftware
    }

    /**
     * Test the property 'owner'
     */
    @Test
    void ownerTest() {
        // TODO: test owner
    }

    /**
     * Test the property 'parent'
     */
    @Test
    void parentTest() {
        // TODO: test parent
    }

    /**
     * Test the property 'planningManager'
     */
    @Test
    void planningManagerTest() {
        // TODO: test planningManager
    }

    /**
     * Test the property 'productManager'
     */
    @Test
    void productManagerTest() {
        // TODO: test productManager
    }

    /**
     * Test the property 'productManagerPosition'
     */
    @Test
    void productManagerPositionTest() {
        // TODO: test productManagerPosition
    }

    /**
     * Test the property 'projectConnection'
     */
    @Test
    void projectConnectionTest() {
        // TODO: test projectConnection
    }

    /**
     * Test the property 'provider'
     */
    @Test
    void providerTest() {
        // TODO: test provider
    }

    /**
     * Test the property 'recordAcceptanceIp'
     */
    @Test
    void recordAcceptanceIpTest() {
        // TODO: test recordAcceptanceIp
    }

    /**
     * Test the property 'recordAcceptanceUser'
     */
    @Test
    void recordAcceptanceUserTest() {
        // TODO: test recordAcceptanceUser
    }

    /**
     * Test the property 'recordLastEditDate'
     */
    @Test
    void recordLastEditDateTest() {
        // TODO: test recordLastEditDate
    }

    /**
     * Test the property 'recordLastEditTime'
     */
    @Test
    void recordLastEditTimeTest() {
        // TODO: test recordLastEditTime
    }

    /**
     * Test the property 'registerLinkRfiInJiradev'
     */
    @Test
    void registerLinkRfiInJiradevTest() {
        // TODO: test registerLinkRfiInJiradev
    }

    /**
     * Test the property 'registrationCertificate'
     */
    @Test
    void registrationCertificateTest() {
        // TODO: test registrationCertificate
    }

    /**
     * Test the property 'regulatoryEvents'
     */
    @Test
    void regulatoryEventsTest() {
        // TODO: test regulatoryEvents
    }

    /**
     * Test the property 'reportInformation0409070'
     */
    @Test
    void reportInformation0409070Test() {
        // TODO: test reportInformation0409070
    }

    /**
     * Test the property 'responsibleEmployees'
     */
    @Test
    void responsibleEmployeesTest() {
        // TODO: test responsibleEmployees
    }

    /**
     * Test the property 'responsibleUsers'
     */
    @Test
    void responsibleUsersTest() {
        // TODO: test responsibleUsers
    }

    /**
     * Test the property 'reviewers'
     */
    @Test
    void reviewersTest() {
        // TODO: test reviewers
    }

    /**
     * Test the property 'roleModel'
     */
    @Test
    void roleModelTest() {
        // TODO: test roleModel
    }

    /**
     * Test the property 'rpo'
     */
    @Test
    void rpoTest() {
        // TODO: test rpo
    }

    /**
     * Test the property 'rto'
     */
    @Test
    void rtoTest() {
        // TODO: test rto
    }

    /**
     * Test the property 'serverEquipmentNameIp'
     */
    @Test
    void serverEquipmentNameIpTest() {
        // TODO: test serverEquipmentNameIp
    }

    /**
     * Test the property 'serverSoftware'
     */
    @Test
    void serverSoftwareTest() {
        // TODO: test serverSoftware
    }

    /**
     * Test the property 'shortName'
     */
    @Test
    void shortNameTest() {
        // TODO: test shortName
    }

    /**
     * Test the property 'signPd'
     */
    @Test
    void signPdTest() {
        // TODO: test signPd
    }

    /**
     * Test the property 'softwareAndHardwareComposition'
     */
    @Test
    void softwareAndHardwareCompositionTest() {
        // TODO: test softwareAndHardwareComposition
    }

    /**
     * Test the property 'softwareRightsLevel'
     */
    @Test
    void softwareRightsLevelTest() {
        // TODO: test softwareRightsLevel
    }

    /**
     * Test the property 'softwareVersion'
     */
    @Test
    void softwareVersionTest() {
        // TODO: test softwareVersion
    }

    /**
     * Test the property 'startSupportDate'
     */
    @Test
    void startSupportDateTest() {
        // TODO: test startSupportDate
    }

    /**
     * Test the property 'style'
     */
    @Test
    void styleTest() {
        // TODO: test style
    }

    /**
     * Test the property 'supplier'
     */
    @Test
    void supplierTest() {
        // TODO: test supplier
    }

    /**
     * Test the property 'supportContractor'
     */
    @Test
    void supportContractorTest() {
        // TODO: test supportContractor
    }

    /**
     * Test the property 'supportHead'
     */
    @Test
    void supportHeadTest() {
        // TODO: test supportHead
    }

    /**
     * Test the property 'supportMode'
     */
    @Test
    void supportModeTest() {
        // TODO: test supportMode
    }

    /**
     * Test the property 'tags'
     */
    @Test
    void tagsTest() {
        // TODO: test tags
    }

    /**
     * Test the property 'testingManager'
     */
    @Test
    void testingManagerTest() {
        // TODO: test testingManager
    }

    /**
     * Test the property 'thresholdTimeOfMinorFailure'
     */
    @Test
    void thresholdTimeOfMinorFailureTest() {
        // TODO: test thresholdTimeOfMinorFailure
    }

    /**
     * Test the property 'trialEndDate'
     */
    @Test
    void trialEndDateTest() {
        // TODO: test trialEndDate
    }

    /**
     * Test the property 'trialStartDate'
     */
    @Test
    void trialStartDateTest() {
        // TODO: test trialStartDate
    }

    /**
     * Test the property 'updatedAt'
     */
    @Test
    void updatedAtTest() {
        // TODO: test updatedAt
    }

    /**
     * Test the property 'updatedBy'
     */
    @Test
    void updatedByTest() {
        // TODO: test updatedBy
    }

    /**
     * Test the property 'usageCount'
     */
    @Test
    void usageCountTest() {
        // TODO: test usageCount
    }

    /**
     * Test the property 'userOfLastPostEdit'
     */
    @Test
    void userOfLastPostEditTest() {
        // TODO: test userOfLastPostEdit
    }

    /**
     * Test the property 'usingInternetSign'
     */
    @Test
    void usingInternetSignTest() {
        // TODO: test usingInternetSign
    }

    /**
     * Test the property 'version'
     */
    @Test
    void versionTest() {
        // TODO: test version
    }

    /**
     * Test the property 'votes'
     */
    @Test
    void votesTest() {
        // TODO: test votes
    }

    /**
     * Test the property 'workingHours'
     */
    @Test
    void workingHoursTest() {
        // TODO: test workingHours
    }

    /**
     * Test the property 'workplaceTypeAndSoftwareEnvVersion'
     */
    @Test
    void workplaceTypeAndSoftwareEnvVersionTest() {
        // TODO: test workplaceTypeAndSoftwareEnvVersion
    }

}
