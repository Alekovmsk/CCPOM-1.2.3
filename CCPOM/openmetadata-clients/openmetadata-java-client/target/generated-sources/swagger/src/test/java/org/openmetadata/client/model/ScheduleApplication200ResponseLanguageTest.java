/*
 * OpenMetadata Apis
 * --- title: APIs slug: /main-concepts/metadata-standard/apis ---  # APIs  OpenMetadata supports REST APIs for getting data and in and out of the metadata service. APIs are built using general best practices of REST API design. We take a schema-first approach by defining Types and Entities in JSON Schema. We implement APIs based on these schemas.  ## Overview  ### URI  Following REST API conventions are followed for Resource URIs: - Operations for an entity are available through the Resource URI as a collection `.../api/<version>/entities`.  - Plural of the entity name is used as the collection name - example `.../api/v1/users`. - Trailing forward slash is not used in the endpoint URI. Example use `.../api/v1/databases` instead of `.../api/v1/databases/`. - Resource URI for an entity instance by the entity id is `.../api/v1/entities/{id}`.  - Resource URI for an entity instance by name is `.../api/v1/entities/name/{name}`.  ### Resource Representation  - The REST API calls return a response with JSON `Content-Type` and `Content-Length` that includes the length of the response. - All responses include the Resource ID field even though the id was provided in the request to simplify the consumption    of the response at the client. - Entity names and field names use `camelCase` per Javascript naming convention. - All resources include an attribute `href` with Resource URI. All relationship fields of an entity will also    include `href` links to the related resource for easy access. - Unknown fields sent by the client in API requests are not ignored to ensure the data sent by the client is not dropped    at the server without the user being aware of it.  ## API Organization  You can find the swagger documentation [here](/swagger.html). In a nutshell:  **Data Asset APIs** - support operations related to data asset entities. - `.../api/v1/databases` - `...api/v1/tables` - `.../api/v1/metrics` - `.../api/v1/dashboards` - `.../api/v1/reports` - `.../api/v1/pipelines` - `.../api/v1/topics`  **Service APIs** - support operations related to services from which metadata is collected: - `.../api/v1/services` is the collection of all service resources. - `.../api/v1/services/databaseService` - APIs related to database services. This includes Transactional databases - MySQL, Postgres, MSSQL, Oracle, and Data Warehouses - Apache Hive BigQuery, Redshift, and Snowflake. - `.../api/v1/services/dashboardService` - APIs related to Dashboard Services. This includes Looker, Superset, and Tableau. - `.../api/v1/services/messagingService` - APIs related to Messaging Services. This includes Apache Kafka, Redpanda, - Kinesis, and others.  **Teams & Users APIs** - `.../api/v1/teams` - APIs related to team entities - `.../api/v1/users` - APIs related to user entities  **Search & Suggest APIs** - support search and suggest APIs: - `.../api/v1/search` - collection for search and suggest APIs - `.../api/v1/search/query` - search entities using query text - `.../api/v1/search/suggest` - get suggested entities used for auto-completion  **Other APIs** - `.../api/v1/tags` for APIs related to Classification and Tag entities - `../api/v1/feeds` for APIs related to Threads and Posts entities - `.../api/v1/usage` for reporting usage information of entities
 *
 * The version of the OpenAPI document: 1.2.3
 * Contact: openmetadata-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openmetadata.client.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Set;
import org.junit.jupiter.api.Test;


/**
 * Model tests for ScheduleApplication200ResponseLanguage
 */
class ScheduleApplication200ResponseLanguageTest {
    private final ScheduleApplication200ResponseLanguage model = new ScheduleApplication200ResponseLanguage();

    /**
     * Model tests for ScheduleApplication200ResponseLanguage
     */
    @Test
    void testScheduleApplication200ResponseLanguage() {
        // TODO: test ScheduleApplication200ResponseLanguage
    }

    /**
     * Test the property 'language'
     */
    @Test
    void languageTest() {
        // TODO: test language
    }

    /**
     * Test the property 'script'
     */
    @Test
    void scriptTest() {
        // TODO: test script
    }

    /**
     * Test the property 'variant'
     */
    @Test
    void variantTest() {
        // TODO: test variant
    }

    /**
     * Test the property 'country'
     */
    @Test
    void countryTest() {
        // TODO: test country
    }

    /**
     * Test the property 'unicodeLocaleAttributes'
     */
    @Test
    void unicodeLocaleAttributesTest() {
        // TODO: test unicodeLocaleAttributes
    }

    /**
     * Test the property 'unicodeLocaleKeys'
     */
    @Test
    void unicodeLocaleKeysTest() {
        // TODO: test unicodeLocaleKeys
    }

    /**
     * Test the property 'displayLanguage'
     */
    @Test
    void displayLanguageTest() {
        // TODO: test displayLanguage
    }

    /**
     * Test the property 'displayScript'
     */
    @Test
    void displayScriptTest() {
        // TODO: test displayScript
    }

    /**
     * Test the property 'displayCountry'
     */
    @Test
    void displayCountryTest() {
        // TODO: test displayCountry
    }

    /**
     * Test the property 'displayVariant'
     */
    @Test
    void displayVariantTest() {
        // TODO: test displayVariant
    }

    /**
     * Test the property 'displayName'
     */
    @Test
    void displayNameTest() {
        // TODO: test displayName
    }

    /**
     * Test the property 'extensionKeys'
     */
    @Test
    void extensionKeysTest() {
        // TODO: test extensionKeys
    }

    /**
     * Test the property 'iso3Language'
     */
    @Test
    void iso3LanguageTest() {
        // TODO: test iso3Language
    }

    /**
     * Test the property 'iso3Country'
     */
    @Test
    void iso3CountryTest() {
        // TODO: test iso3Country
    }

}
