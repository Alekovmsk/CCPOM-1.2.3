/*
 * OpenMetadata Apis
 * --- title: APIs slug: /main-concepts/metadata-standard/apis ---  # APIs  OpenMetadata supports REST APIs for getting data and in and out of the metadata service. APIs are built using general best practices of REST API design. We take a schema-first approach by defining Types and Entities in JSON Schema. We implement APIs based on these schemas.  ## Overview  ### URI  Following REST API conventions are followed for Resource URIs: - Operations for an entity are available through the Resource URI as a collection `.../api/<version>/entities`.  - Plural of the entity name is used as the collection name - example `.../api/v1/users`. - Trailing forward slash is not used in the endpoint URI. Example use `.../api/v1/databases` instead of `.../api/v1/databases/`. - Resource URI for an entity instance by the entity id is `.../api/v1/entities/{id}`.  - Resource URI for an entity instance by name is `.../api/v1/entities/name/{name}`.  ### Resource Representation  - The REST API calls return a response with JSON `Content-Type` and `Content-Length` that includes the length of the response. - All responses include the Resource ID field even though the id was provided in the request to simplify the consumption    of the response at the client. - Entity names and field names use `camelCase` per Javascript naming convention. - All resources include an attribute `href` with Resource URI. All relationship fields of an entity will also    include `href` links to the related resource for easy access. - Unknown fields sent by the client in API requests are not ignored to ensure the data sent by the client is not dropped    at the server without the user being aware of it.  ## API Organization  You can find the swagger documentation [here](/swagger.html). In a nutshell:  **Data Asset APIs** - support operations related to data asset entities. - `.../api/v1/databases` - `...api/v1/tables` - `.../api/v1/metrics` - `.../api/v1/dashboards` - `.../api/v1/reports` - `.../api/v1/pipelines` - `.../api/v1/topics`  **Service APIs** - support operations related to services from which metadata is collected: - `.../api/v1/services` is the collection of all service resources. - `.../api/v1/services/databaseService` - APIs related to database services. This includes Transactional databases - MySQL, Postgres, MSSQL, Oracle, and Data Warehouses - Apache Hive BigQuery, Redshift, and Snowflake. - `.../api/v1/services/dashboardService` - APIs related to Dashboard Services. This includes Looker, Superset, and Tableau. - `.../api/v1/services/messagingService` - APIs related to Messaging Services. This includes Apache Kafka, Redpanda, - Kinesis, and others.  **Teams & Users APIs** - `.../api/v1/teams` - APIs related to team entities - `.../api/v1/users` - APIs related to user entities  **Search & Suggest APIs** - support search and suggest APIs: - `.../api/v1/search` - collection for search and suggest APIs - `.../api/v1/search/query` - search entities using query text - `.../api/v1/search/suggest` - get suggested entities used for auto-completion  **Other APIs** - `.../api/v1/tags` for APIs related to Classification and Tag entities - `../api/v1/feeds` for APIs related to Threads and Posts entities - `.../api/v1/usage` for reporting usage information of entities
 *
 * The version of the OpenAPI document: 1.2.3
 * Contact: openmetadata-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openmetadata.client.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.net.URI;
import java.util.ArrayList;
import java.util.List;
import java.util.UUID;
import org.openmetadata.client.model.ChangeDescription;
import org.openmetadata.client.model.EntityReference;
import org.openmetadata.client.model.LifeCycle;
import org.openmetadata.client.model.Style;
import org.openmetadata.client.model.TagLabel;
import org.openmetadata.client.model.Votes;
import org.junit.jupiter.api.Test;


/**
 * Model tests for UserEsk
 */
class UserEskTest {
    private final UserEsk model = new UserEsk();

    /**
     * Model tests for UserEsk
     */
    @Test
    void testUserEsk() {
        // TODO: test UserEsk
    }

    /**
     * Test the property 'changeDescription'
     */
    @Test
    void changeDescriptionTest() {
        // TODO: test changeDescription
    }

    /**
     * Test the property 'children'
     */
    @Test
    void childrenTest() {
        // TODO: test children
    }

    /**
     * Test the property 'createTimestamp'
     */
    @Test
    void createTimestampTest() {
        // TODO: test createTimestamp
    }

    /**
     * Test the property 'dataProducts'
     */
    @Test
    void dataProductsTest() {
        // TODO: test dataProducts
    }

    /**
     * Test the property 'deleted'
     */
    @Test
    void deletedTest() {
        // TODO: test deleted
    }

    /**
     * Test the property 'department'
     */
    @Test
    void departmentTest() {
        // TODO: test department
    }

    /**
     * Test the property 'deprecated'
     */
    @Test
    void deprecatedTest() {
        // TODO: test deprecated
    }

    /**
     * Test the property 'description'
     */
    @Test
    void descriptionTest() {
        // TODO: test description
    }

    /**
     * Test the property 'disabled'
     */
    @Test
    void disabledTest() {
        // TODO: test disabled
    }

    /**
     * Test the property 'displayName'
     */
    @Test
    void displayNameTest() {
        // TODO: test displayName
    }

    /**
     * Test the property 'domain'
     */
    @Test
    void domainTest() {
        // TODO: test domain
    }

    /**
     * Test the property 'email'
     */
    @Test
    void emailTest() {
        // TODO: test email
    }

    /**
     * Test the property 'experts'
     */
    @Test
    void expertsTest() {
        // TODO: test experts
    }

    /**
     * Test the property 'extension'
     */
    @Test
    void extensionTest() {
        // TODO: test extension
    }

    /**
     * Test the property 'firstName'
     */
    @Test
    void firstNameTest() {
        // TODO: test firstName
    }

    /**
     * Test the property 'followers'
     */
    @Test
    void followersTest() {
        // TODO: test followers
    }

    /**
     * Test the property 'fullName'
     */
    @Test
    void fullNameTest() {
        // TODO: test fullName
    }

    /**
     * Test the property 'fullyQualifiedName'
     */
    @Test
    void fullyQualifiedNameTest() {
        // TODO: test fullyQualifiedName
    }

    /**
     * Test the property 'href'
     */
    @Test
    void hrefTest() {
        // TODO: test href
    }

    /**
     * Test the property 'id'
     */
    @Test
    void idTest() {
        // TODO: test id
    }

    /**
     * Test the property 'isActive'
     */
    @Test
    void isActiveTest() {
        // TODO: test isActive
    }

    /**
     * Test the property 'jobTitle'
     */
    @Test
    void jobTitleTest() {
        // TODO: test jobTitle
    }

    /**
     * Test the property 'lastName'
     */
    @Test
    void lastNameTest() {
        // TODO: test lastName
    }

    /**
     * Test the property 'lifeCycle'
     */
    @Test
    void lifeCycleTest() {
        // TODO: test lifeCycle
    }

    /**
     * Test the property 'middleName'
     */
    @Test
    void middleNameTest() {
        // TODO: test middleName
    }

    /**
     * Test the property 'modifyTimestamp'
     */
    @Test
    void modifyTimestampTest() {
        // TODO: test modifyTimestamp
    }

    /**
     * Test the property 'mutuallyExclusive'
     */
    @Test
    void mutuallyExclusiveTest() {
        // TODO: test mutuallyExclusive
    }

    /**
     * Test the property 'name'
     */
    @Test
    void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'owner'
     */
    @Test
    void ownerTest() {
        // TODO: test owner
    }

    /**
     * Test the property 'parent'
     */
    @Test
    void parentTest() {
        // TODO: test parent
    }

    /**
     * Test the property 'phoneNumber'
     */
    @Test
    void phoneNumberTest() {
        // TODO: test phoneNumber
    }

    /**
     * Test the property 'provider'
     */
    @Test
    void providerTest() {
        // TODO: test provider
    }

    /**
     * Test the property 'reviewers'
     */
    @Test
    void reviewersTest() {
        // TODO: test reviewers
    }

    /**
     * Test the property 'style'
     */
    @Test
    void styleTest() {
        // TODO: test style
    }

    /**
     * Test the property 'tags'
     */
    @Test
    void tagsTest() {
        // TODO: test tags
    }

    /**
     * Test the property 'updatedAt'
     */
    @Test
    void updatedAtTest() {
        // TODO: test updatedAt
    }

    /**
     * Test the property 'updatedBy'
     */
    @Test
    void updatedByTest() {
        // TODO: test updatedBy
    }

    /**
     * Test the property 'usageCount'
     */
    @Test
    void usageCountTest() {
        // TODO: test usageCount
    }

    /**
     * Test the property 'userEskClassification'
     */
    @Test
    void userEskClassificationTest() {
        // TODO: test userEskClassification
    }

    /**
     * Test the property 'userName'
     */
    @Test
    void userNameTest() {
        // TODO: test userName
    }

    /**
     * Test the property 'version'
     */
    @Test
    void versionTest() {
        // TODO: test version
    }

    /**
     * Test the property 'votes'
     */
    @Test
    void votesTest() {
        // TODO: test votes
    }

}
