/*
 * OpenMetadata Apis
 * --- title: APIs slug: /main-concepts/metadata-standard/apis ---  # APIs  OpenMetadata supports REST APIs for getting data and in and out of the metadata service. APIs are built using general best practices of REST API design. We take a schema-first approach by defining Types and Entities in JSON Schema. We implement APIs based on these schemas.  ## Overview  ### URI  Following REST API conventions are followed for Resource URIs: - Operations for an entity are available through the Resource URI as a collection `.../api/<version>/entities`.  - Plural of the entity name is used as the collection name - example `.../api/v1/users`. - Trailing forward slash is not used in the endpoint URI. Example use `.../api/v1/databases` instead of `.../api/v1/databases/`. - Resource URI for an entity instance by the entity id is `.../api/v1/entities/{id}`.  - Resource URI for an entity instance by name is `.../api/v1/entities/name/{name}`.  ### Resource Representation  - The REST API calls return a response with JSON `Content-Type` and `Content-Length` that includes the length of the response. - All responses include the Resource ID field even though the id was provided in the request to simplify the consumption    of the response at the client. - Entity names and field names use `camelCase` per Javascript naming convention. - All resources include an attribute `href` with Resource URI. All relationship fields of an entity will also    include `href` links to the related resource for easy access. - Unknown fields sent by the client in API requests are not ignored to ensure the data sent by the client is not dropped    at the server without the user being aware of it.  ## API Organization  You can find the swagger documentation [here](/swagger.html). In a nutshell:  **Data Asset APIs** - support operations related to data asset entities. - `.../api/v1/databases` - `...api/v1/tables` - `.../api/v1/metrics` - `.../api/v1/dashboards` - `.../api/v1/reports` - `.../api/v1/pipelines` - `.../api/v1/topics`  **Service APIs** - support operations related to services from which metadata is collected: - `.../api/v1/services` is the collection of all service resources. - `.../api/v1/services/databaseService` - APIs related to database services. This includes Transactional databases - MySQL, Postgres, MSSQL, Oracle, and Data Warehouses - Apache Hive BigQuery, Redshift, and Snowflake. - `.../api/v1/services/dashboardService` - APIs related to Dashboard Services. This includes Looker, Superset, and Tableau. - `.../api/v1/services/messagingService` - APIs related to Messaging Services. This includes Apache Kafka, Redpanda, - Kinesis, and others.  **Teams & Users APIs** - `.../api/v1/teams` - APIs related to team entities - `.../api/v1/users` - APIs related to user entities  **Search & Suggest APIs** - support search and suggest APIs: - `.../api/v1/search` - collection for search and suggest APIs - `.../api/v1/search/query` - search entities using query text - `.../api/v1/search/suggest` - get suggested entities used for auto-completion  **Other APIs** - `.../api/v1/tags` for APIs related to Classification and Tag entities - `../api/v1/feeds` for APIs related to Threads and Posts entities - `.../api/v1/usage` for reporting usage information of entities
 *
 * The version of the OpenAPI document: 1.2.3
 * Contact: openmetadata-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openmetadata.client.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import org.openmetadata.client.model.ElasticsSearch;
import org.junit.jupiter.api.Test;


/**
 * Model tests for OpenMetadataConnection
 */
class OpenMetadataConnectionTest {
    private final OpenMetadataConnection model = new OpenMetadataConnection();

    /**
     * Model tests for OpenMetadataConnection
     */
    @Test
    void testOpenMetadataConnection() {
        // TODO: test OpenMetadataConnection
    }

    /**
     * Test the property 'apiVersion'
     */
    @Test
    void apiVersionTest() {
        // TODO: test apiVersion
    }

    /**
     * Test the property 'authProvider'
     */
    @Test
    void authProviderTest() {
        // TODO: test authProvider
    }

    /**
     * Test the property 'clusterName'
     */
    @Test
    void clusterNameTest() {
        // TODO: test clusterName
    }

    /**
     * Test the property 'elasticsSearch'
     */
    @Test
    void elasticsSearchTest() {
        // TODO: test elasticsSearch
    }

    /**
     * Test the property 'enableVersionValidation'
     */
    @Test
    void enableVersionValidationTest() {
        // TODO: test enableVersionValidation
    }

    /**
     * Test the property 'extraHeaders'
     */
    @Test
    void extraHeadersTest() {
        // TODO: test extraHeaders
    }

    /**
     * Test the property 'forceEntityOverwriting'
     */
    @Test
    void forceEntityOverwritingTest() {
        // TODO: test forceEntityOverwriting
    }

    /**
     * Test the property 'hostPort'
     */
    @Test
    void hostPortTest() {
        // TODO: test hostPort
    }

    /**
     * Test the property 'includeDashboards'
     */
    @Test
    void includeDashboardsTest() {
        // TODO: test includeDashboards
    }

    /**
     * Test the property 'includeDatabaseServices'
     */
    @Test
    void includeDatabaseServicesTest() {
        // TODO: test includeDatabaseServices
    }

    /**
     * Test the property 'includeGlossaryTerms'
     */
    @Test
    void includeGlossaryTermsTest() {
        // TODO: test includeGlossaryTerms
    }

    /**
     * Test the property 'includeMessagingServices'
     */
    @Test
    void includeMessagingServicesTest() {
        // TODO: test includeMessagingServices
    }

    /**
     * Test the property 'includeMlModels'
     */
    @Test
    void includeMlModelsTest() {
        // TODO: test includeMlModels
    }

    /**
     * Test the property 'includePipelineServices'
     */
    @Test
    void includePipelineServicesTest() {
        // TODO: test includePipelineServices
    }

    /**
     * Test the property 'includePipelines'
     */
    @Test
    void includePipelinesTest() {
        // TODO: test includePipelines
    }

    /**
     * Test the property 'includePolicy'
     */
    @Test
    void includePolicyTest() {
        // TODO: test includePolicy
    }

    /**
     * Test the property 'includeTables'
     */
    @Test
    void includeTablesTest() {
        // TODO: test includeTables
    }

    /**
     * Test the property 'includeTags'
     */
    @Test
    void includeTagsTest() {
        // TODO: test includeTags
    }

    /**
     * Test the property 'includeTeams'
     */
    @Test
    void includeTeamsTest() {
        // TODO: test includeTeams
    }

    /**
     * Test the property 'includeTopics'
     */
    @Test
    void includeTopicsTest() {
        // TODO: test includeTopics
    }

    /**
     * Test the property 'includeUsers'
     */
    @Test
    void includeUsersTest() {
        // TODO: test includeUsers
    }

    /**
     * Test the property 'limitRecords'
     */
    @Test
    void limitRecordsTest() {
        // TODO: test limitRecords
    }

    /**
     * Test the property 'secretsManagerLoader'
     */
    @Test
    void secretsManagerLoaderTest() {
        // TODO: test secretsManagerLoader
    }

    /**
     * Test the property 'secretsManagerProvider'
     */
    @Test
    void secretsManagerProviderTest() {
        // TODO: test secretsManagerProvider
    }

    /**
     * Test the property 'securityConfig'
     */
    @Test
    void securityConfigTest() {
        // TODO: test securityConfig
    }

    /**
     * Test the property 'sslConfig'
     */
    @Test
    void sslConfigTest() {
        // TODO: test sslConfig
    }

    /**
     * Test the property 'storeServiceConnection'
     */
    @Test
    void storeServiceConnectionTest() {
        // TODO: test storeServiceConnection
    }

    /**
     * Test the property 'supportsDataInsightExtraction'
     */
    @Test
    void supportsDataInsightExtractionTest() {
        // TODO: test supportsDataInsightExtraction
    }

    /**
     * Test the property 'supportsElasticSearchReindexingExtraction'
     */
    @Test
    void supportsElasticSearchReindexingExtractionTest() {
        // TODO: test supportsElasticSearchReindexingExtraction
    }

    /**
     * Test the property 'type'
     */
    @Test
    void typeTest() {
        // TODO: test type
    }

    /**
     * Test the property 'verifySSL'
     */
    @Test
    void verifySSLTest() {
        // TODO: test verifySSL
    }

}
