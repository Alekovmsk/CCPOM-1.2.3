/*
 * OpenMetadata Apis
 * --- title: APIs slug: /main-concepts/metadata-standard/apis ---  # APIs  OpenMetadata supports REST APIs for getting data and in and out of the metadata service. APIs are built using general best practices of REST API design. We take a schema-first approach by defining Types and Entities in JSON Schema. We implement APIs based on these schemas.  ## Overview  ### URI  Following REST API conventions are followed for Resource URIs: - Operations for an entity are available through the Resource URI as a collection `.../api/<version>/entities`.  - Plural of the entity name is used as the collection name - example `.../api/v1/users`. - Trailing forward slash is not used in the endpoint URI. Example use `.../api/v1/databases` instead of `.../api/v1/databases/`. - Resource URI for an entity instance by the entity id is `.../api/v1/entities/{id}`.  - Resource URI for an entity instance by name is `.../api/v1/entities/name/{name}`.  ### Resource Representation  - The REST API calls return a response with JSON `Content-Type` and `Content-Length` that includes the length of the response. - All responses include the Resource ID field even though the id was provided in the request to simplify the consumption    of the response at the client. - Entity names and field names use `camelCase` per Javascript naming convention. - All resources include an attribute `href` with Resource URI. All relationship fields of an entity will also    include `href` links to the related resource for easy access. - Unknown fields sent by the client in API requests are not ignored to ensure the data sent by the client is not dropped    at the server without the user being aware of it.  ## API Organization  You can find the swagger documentation [here](/swagger.html). In a nutshell:  **Data Asset APIs** - support operations related to data asset entities. - `.../api/v1/databases` - `...api/v1/tables` - `.../api/v1/metrics` - `.../api/v1/dashboards` - `.../api/v1/reports` - `.../api/v1/pipelines` - `.../api/v1/topics`  **Service APIs** - support operations related to services from which metadata is collected: - `.../api/v1/services` is the collection of all service resources. - `.../api/v1/services/databaseService` - APIs related to database services. This includes Transactional databases - MySQL, Postgres, MSSQL, Oracle, and Data Warehouses - Apache Hive BigQuery, Redshift, and Snowflake. - `.../api/v1/services/dashboardService` - APIs related to Dashboard Services. This includes Looker, Superset, and Tableau. - `.../api/v1/services/messagingService` - APIs related to Messaging Services. This includes Apache Kafka, Redpanda, - Kinesis, and others.  **Teams & Users APIs** - `.../api/v1/teams` - APIs related to team entities - `.../api/v1/users` - APIs related to user entities  **Search & Suggest APIs** - support search and suggest APIs: - `.../api/v1/search` - collection for search and suggest APIs - `.../api/v1/search/query` - search entities using query text - `.../api/v1/search/suggest` - get suggested entities used for auto-completion  **Other APIs** - `.../api/v1/tags` for APIs related to Classification and Tag entities - `../api/v1/feeds` for APIs related to Threads and Posts entities - `.../api/v1/usage` for reporting usage information of entities
 *
 * The version of the OpenAPI document: 1.2.3
 * Contact: openmetadata-dev@googlegroups.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openmetadata.client.model;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.util.ArrayList;
import java.util.List;
import org.openmetadata.client.model.CustomMetricProfile;
import org.openmetadata.client.model.Histogram;
import org.junit.jupiter.api.Test;


/**
 * Model tests for ColumnProfile
 */
class ColumnProfileTest {
    private final ColumnProfile model = new ColumnProfile();

    /**
     * Model tests for ColumnProfile
     */
    @Test
    void testColumnProfile() {
        // TODO: test ColumnProfile
    }

    /**
     * Test the property 'customMetricsProfile'
     */
    @Test
    void customMetricsProfileTest() {
        // TODO: test customMetricsProfile
    }

    /**
     * Test the property 'distinctCount'
     */
    @Test
    void distinctCountTest() {
        // TODO: test distinctCount
    }

    /**
     * Test the property 'distinctProportion'
     */
    @Test
    void distinctProportionTest() {
        // TODO: test distinctProportion
    }

    /**
     * Test the property 'duplicateCount'
     */
    @Test
    void duplicateCountTest() {
        // TODO: test duplicateCount
    }

    /**
     * Test the property 'firstQuartile'
     */
    @Test
    void firstQuartileTest() {
        // TODO: test firstQuartile
    }

    /**
     * Test the property 'histogram'
     */
    @Test
    void histogramTest() {
        // TODO: test histogram
    }

    /**
     * Test the property 'interQuartileRange'
     */
    @Test
    void interQuartileRangeTest() {
        // TODO: test interQuartileRange
    }

    /**
     * Test the property 'max'
     */
    @Test
    void maxTest() {
        // TODO: test max
    }

    /**
     * Test the property 'maxLength'
     */
    @Test
    void maxLengthTest() {
        // TODO: test maxLength
    }

    /**
     * Test the property 'mean'
     */
    @Test
    void meanTest() {
        // TODO: test mean
    }

    /**
     * Test the property 'median'
     */
    @Test
    void medianTest() {
        // TODO: test median
    }

    /**
     * Test the property 'min'
     */
    @Test
    void minTest() {
        // TODO: test min
    }

    /**
     * Test the property 'minLength'
     */
    @Test
    void minLengthTest() {
        // TODO: test minLength
    }

    /**
     * Test the property 'missingCount'
     */
    @Test
    void missingCountTest() {
        // TODO: test missingCount
    }

    /**
     * Test the property 'missingPercentage'
     */
    @Test
    void missingPercentageTest() {
        // TODO: test missingPercentage
    }

    /**
     * Test the property 'name'
     */
    @Test
    void nameTest() {
        // TODO: test name
    }

    /**
     * Test the property 'nonParametricSkew'
     */
    @Test
    void nonParametricSkewTest() {
        // TODO: test nonParametricSkew
    }

    /**
     * Test the property 'nullCount'
     */
    @Test
    void nullCountTest() {
        // TODO: test nullCount
    }

    /**
     * Test the property 'nullProportion'
     */
    @Test
    void nullProportionTest() {
        // TODO: test nullProportion
    }

    /**
     * Test the property 'stddev'
     */
    @Test
    void stddevTest() {
        // TODO: test stddev
    }

    /**
     * Test the property 'sum'
     */
    @Test
    void sumTest() {
        // TODO: test sum
    }

    /**
     * Test the property 'thirdQuartile'
     */
    @Test
    void thirdQuartileTest() {
        // TODO: test thirdQuartile
    }

    /**
     * Test the property 'timestamp'
     */
    @Test
    void timestampTest() {
        // TODO: test timestamp
    }

    /**
     * Test the property 'uniqueCount'
     */
    @Test
    void uniqueCountTest() {
        // TODO: test uniqueCount
    }

    /**
     * Test the property 'uniqueProportion'
     */
    @Test
    void uniqueProportionTest() {
        // TODO: test uniqueProportion
    }

    /**
     * Test the property 'validCount'
     */
    @Test
    void validCountTest() {
        // TODO: test validCount
    }

    /**
     * Test the property 'valuesCount'
     */
    @Test
    void valuesCountTest() {
        // TODO: test valuesCount
    }

    /**
     * Test the property 'valuesPercentage'
     */
    @Test
    void valuesPercentageTest() {
        // TODO: test valuesPercentage
    }

    /**
     * Test the property 'variance'
     */
    @Test
    void varianceTest() {
        // TODO: test variance
    }

}
